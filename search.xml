<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-matery魔改</title>
      <link href="/posts/27595.html"/>
      <url>/posts/27595.html</url>
      
        <content type="html"><![CDATA[<h1 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h1><h2 id="修改网站整体配色"><a href="#修改网站整体配色" class="headerlink" title="修改网站整体配色"></a>修改网站整体配色</h2><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;source&#x2F;css&#x2F;matery.css 修改bg-color 的background-image属性来设置颜色，修改opacity设置透明度</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #ee9ca7 0%<span class="token punctuation">,</span> #ffdde1 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消banner蒙层"><a href="#取消banner蒙层" class="headerlink" title="取消banner蒙层"></a>取消banner蒙层</h2><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;source&#x2F;css&#x2F;matery.css 将bg-cover:after 注释</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*.bg-cover:after &#123;    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置网站背景图"><a href="#设置网站背景图" class="headerlink" title="设置网站背景图"></a>设置网站背景图</h2><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;source&#x2F;css&#x2F;matery.css</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* background-color: #eaeaea; */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>60deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 165<span class="token punctuation">,</span> 150<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span> 5%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 228<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">)</span> 0% 0% / cover<span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/theme/H21b5f6b8496141a1979a33666e1074d9x.jpg"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/theme/H21b5f6b8496141a1979a33666e1074d9x.jpg"</span><span class="token punctuation">)</span></span> 0px 0px<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.5 适配目录</p><ul><li>好像没有生效</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/source/css/post.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.toc-widget</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 345px<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 10px 35px 2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .15<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 5px 15px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .07<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 2px 5px -5px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .1<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改banner图"><a href="#修改banner图" class="headerlink" title="修改banner图"></a>修改banner图</h2><ul><li><p>方式一：banner轮播</p><ul><li>在hexo-theme-matery._config中配置featureImages</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">featureImages</span><span class="token punctuation">:</span><span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover17.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover18.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover19.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover20.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover21.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover22.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover23.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover24.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover25.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover26.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover27.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover28.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover29.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover30.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover31.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover32.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover33.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover34.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover35.jpg<span class="token punctuation">-</span> https<span class="token punctuation">:</span>//zhangtq<span class="token punctuation">-</span>blog.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/theme/cover36.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;layout&#x2F;_partial&#x2F;bg-cover-content.ejs</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token comment">//var bannerUrl = "&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/medias/banner/') %>" + new Date().getDay() + '.jpg';</span>    <span class="token comment">//$('.bg-cover').css('background-image', 'url(' + bannerUrl + ')');</span>    <span class="token comment">// 随机选择配置文件中featureImages配置的图片</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(&lt;%- theme.featureImages[Math.floor(Math.random() * theme.featureImages.length + 1)-1] %>)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：设置为外部链接图片</p></li><li><p>vi themes&#x2F;hexo-theme-matery&#x2F;layout&#x2F;_partial&#x2F;bg-cover-content.ejs</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token comment">//var bannerUrl = "&lt;%- theme.jsDelivr.url %>&lt;%- url_for('/medias/banner/') %>" + new Date().getDay() + '.jpg';</span>    <span class="token comment">//$('.bg-cover').css('background-image', 'url(' + bannerUrl + ')');</span>    <span class="token comment">// 随机选择配置文件中featureImages配置的图片</span>    <span class="token comment">//$('.bg-cover').css('background-image', 'url(&lt;%- theme.featureImages[Math.floor(Math.random() * theme.featureImages.length + 1)-1] %>)');</span>    <span class="token comment">//固定一张图片</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/theme/cover3.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化背景壁纸和目录栏"><a href="#优化背景壁纸和目录栏" class="headerlink" title="优化背景壁纸和目录栏"></a>优化背景壁纸和目录栏</h2><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;source&#x2F;css&#x2F;matery.css</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* background-color: #eaeaea; */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>60deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 165<span class="token punctuation">,</span> 150<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span> 5%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 228<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">)</span> 0% 0% / cover<span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/theme/%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E5%9B%BE%E7%89%87.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/theme/H21b5f6b8496141a1979a33666e1074d9x.jpg"</span><span class="token punctuation">)</span></span> 0px 0px<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改页脚访问量等信息"><a href="#修改页脚访问量等信息" class="headerlink" title="修改页脚访问量等信息"></a>修改页脚访问量等信息</h2><ul><li><p>vi themes&#x2F;hexo-theme-matery&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</p></li><li><p>增加建站时间</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新增社交链接"><a href="#新增社交链接" class="headerlink" title="新增社交链接"></a>新增社交链接</h2><ul><li><p>vi themes&#x2F;hexo-theme-matery&#x2F;layout&#x2F;_partial&#x2F;social-link.ejs</p></li><li><p>添加git链接</p></li></ul><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>git<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>git </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的Git<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa-brands fa-gitlab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中图标类似fa-gitlab可以在[Font Awesome](<a href="https://fontawesome.com/search">Font Awesome</a>)中查找</li><li>常用图标如下</li></ul><pre class="line-numbers language-none"><code class="language-none">Facebook: fa-facebookTwitter: fa-twitterGoogle-plus: fa-google-plusLinkedin: fa-linkedinTumblr: fa-tumblrMedium: fa-mediumSlack: fa-slack新浪微博: fa-weibo微信: fa-wechatQQ: fa-qq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后在主题配置文件中配置自己的git地址</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  <span class="token key atrule">git</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/better_better  <span class="token key atrule">email</span><span class="token punctuation">:</span> 15652533044@163.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1028354023</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true、false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改打赏二维码"><a href="#修改打赏二维码" class="headerlink" title="修改打赏二维码"></a>修改打赏二维码</h2><ul><li>在<strong>主题文件</strong>的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片</li></ul><h2 id="部署到多个仓库"><a href="#部署到多个仓库" class="headerlink" title="部署到多个仓库"></a>部署到多个仓库</h2><ul><li>在根目录下设置deploy</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/better_better/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery.git<span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/better_better/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery.git<span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改根目录下的_config.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span><span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span><span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加rss订阅"><a href="#添加rss订阅" class="headerlink" title="添加rss订阅"></a>添加rss订阅</h2><ul><li>安装插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改根目录下的_config.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> atom<span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml<span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token key atrule">hub</span><span class="token punctuation">:</span><span class="token key atrule">content</span><span class="token punctuation">:</span><span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span><span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span><span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加动态标签"><a href="#添加动态标签" class="headerlink" title="添加动态标签"></a>添加动态标签</h2><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;layout&#x2F;layout.ejs</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span>            <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板"></a>新建文章模板</h2><ul><li>修改&#x2F;scaffolds&#x2F;post.md中的内容</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>date<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> date <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>author<span class="token operator">:</span> img<span class="token operator">:</span> coverImg<span class="token operator">:</span> top<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">false</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>mathjax<span class="token operator">:</span> <span class="token boolean">false</span>password<span class="token operator">:</span>summary<span class="token operator">:</span>tags<span class="token operator">:</span>categories<span class="token operator">:</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><ul><li>hexo new page 404</li><li>vi .&#x2F;source&#x2F;404&#x2F;404.md 添加如下内容</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> <span class="token number">404</span> Not Foundtoc<span class="token operator">:</span> <span class="token boolean">false</span>comments<span class="token operator">:</span> <span class="token boolean">false</span>layout<span class="token operator">:</span> <span class="token number">404</span>type<span class="token operator">:</span> <span class="token number">404</span>permalink<span class="token operator">:</span> /<span class="token number">404</span>description<span class="token operator">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vi themes&#x2F;hexo-theme-matery&#x2F;layout&#x2F;404.ejs 添加如下内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token comment">/* don't remove. */</span>    <span class="token punctuation">.</span>about<span class="token operator">-</span>cover <span class="token punctuation">&#123;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">.</span>2vh<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bg-cover pd-header about-cover"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s10 offset-s1 m8 offset-m2 l8 offset-l2"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>                        <span class="token number">404</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"description center-align"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%=</span> page<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/theme/cover3.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在nginx的config做如下配置</li><li>本网站做了私有话部署，是部署在阿里云服务器，所以需要需改静态资源服务器的404指向</li><li>如果是托管在gitee 或者github上显示404页面，需要在&#x2F;source&#x2F;目录下新建404.md文件，文件内容和404.index内容相同，这是因为gitee或者github托管时，静态资源服务器配置的404页面是在根目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    listen       <span class="token number">81</span><span class="token punctuation">;</span>    server_name  _<span class="token punctuation">;</span>    location / <span class="token punctuation">&#123;</span>        root /home/repository<span class="token punctuation">;</span>        index index.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">404</span> /404.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /40x.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    location <span class="token operator">=</span> /404.html <span class="token punctuation">&#123;</span>        <span class="token comment"># 放错误页面的目录路径。</span>        root /home/repository<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="去除banner上的logo-和左上角title"><a href="#去除banner上的logo-和左上角title" class="headerlink" title="去除banner上的logo 和左上角title"></a>去除banner上的logo 和左上角title</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/layout/_partial/header.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"navbar-fixed"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>nav id<span class="token operator">=</span><span class="token string">"headNav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bg-color nav-transparent"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"navContainer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"nav-wrapper container"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand-logo"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for() %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 去掉首页banner上的logo显示<span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>logo <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>logo<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %>&lt;%- url_for(theme.logo) %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo-img"</span> alt<span class="token operator">=</span><span class="token string">"LOGO"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 去掉左上角网站title<span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo-span"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> config<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/navigation'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/github-link'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改建站时间为动态变化"><a href="#修改建站时间为动态变化" class="headerlink" title="修改建站时间为动态变化"></a>修改建站时间为动态变化</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/layout/_partial/footer.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 运行天数提醒<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>time<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"sitetime"</span><span class="token operator">></span> Loading <span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"my-face"</span><span class="token operator">></span>ღゝ◡╹<span class="token punctuation">)</span>ノ♡<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script<span class="token operator">></span>          <span class="token keyword">var</span> <span class="token function-variable function">calcSiteTime</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> startYear <span class="token operator">=</span> <span class="token string">"&lt;%- theme.time.year %>"</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> startMonth <span class="token operator">=</span> <span class="token string">"&lt;%- theme.time.month %>"</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token string">"&lt;%- theme.time.date %>"</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> startHour <span class="token operator">=</span> <span class="token string">"&lt;%- theme.time.hour %>"</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> startMinute <span class="token operator">=</span> <span class="token string">"&lt;%- theme.time.minute %>"</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> startSecond <span class="token operator">=</span> <span class="token string">"&lt;%- theme.time.second %>"</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>startYear<span class="token punctuation">,</span> startMonth<span class="token punctuation">,</span> startDate<span class="token punctuation">,</span> startHour<span class="token punctuation">,</span> startMinute<span class="token punctuation">,</span> startSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>              <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 区分是否有年份.</span>              <span class="token keyword">var</span> language <span class="token operator">=</span> <span class="token string">'&lt;%- config.language %>'</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>startYear <span class="token operator">===</span> <span class="token function">String</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> todayYear<span class="token punctuation">;</span>                  <span class="token keyword">var</span> daysTip <span class="token operator">=</span> <span class="token string">'This site has been running for '</span> <span class="token operator">+</span> diffDays <span class="token operator">+</span> <span class="token string">' days'</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      daysTip <span class="token operator">=</span> <span class="token string">'本站已运行 '</span> <span class="token operator">+</span> diffDays <span class="token operator">+</span> <span class="token string">' 天'</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">'zh-HK'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      daysTip <span class="token operator">=</span> <span class="token string">'本站已運行 '</span> <span class="token operator">+</span> diffDays <span class="token operator">+</span> <span class="token string">' 天'</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> daysTip<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> startYear <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> todayYear<span class="token punctuation">;</span>                  <span class="token keyword">var</span> yearsAndDaysTip <span class="token operator">=</span> <span class="token string">'This site has been running for '</span> <span class="token operator">+</span> diffYears <span class="token operator">+</span> <span class="token string">' years and '</span>                      <span class="token operator">+</span> diffDays <span class="token operator">+</span> <span class="token string">' days'</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      yearsAndDaysTip <span class="token operator">=</span> <span class="token string">'本站已运行 '</span> <span class="token operator">+</span> diffYears <span class="token operator">+</span> <span class="token string">' 年 '</span> <span class="token operator">+</span> diffDays <span class="token operator">+</span> <span class="token string">' 天'</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">'zh-HK'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      yearsAndDaysTip <span class="token operator">=</span> <span class="token string">'本站已運行 '</span> <span class="token operator">+</span> diffYears <span class="token operator">+</span> <span class="token string">' 年 '</span> <span class="token operator">+</span> diffDays <span class="token operator">+</span> <span class="token string">' 天'</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> yearsAndDaysTip<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token function">calcSiteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>script language<span class="token operator">=</span>javascript<span class="token operator">></span>           <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>               <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//北京时间2018-2-13 00:00:00 </span>              <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>               <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span>diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token comment">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>           <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="卜算子"><a href="#卜算子" class="headerlink" title="卜算子"></a>卜算子</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/layout/_partial/footer.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在打开文件的中替换原来的内容为以下内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalTraffic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_pv"</span> style<span class="token operator">=</span><span class="token string">'display:none'</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-heart-o"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        本站总访问量 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_pv"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalNumberOfvisitors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_uv"</span> style<span class="token operator">=</span><span class="token string">'display:none'</span><span class="token operator">></span>        人次<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>访客数 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_uv"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> 人<span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在这个文件最后加上如下代码</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50ms周期检测函数 </span>    <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span> <span class="token comment">// 初始化首次数据 </span>    <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加上初始数据 </span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止检测 </span>        <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="替换icon和baner上的图标"><a href="#替换icon和baner上的图标" class="headerlink" title="替换icon和baner上的图标"></a>替换icon和baner上的图标</h2><pre class="line-numbers language-none"><code class="language-none">替换 themes\hexo-theme-matery\source\medias中的logo.png替换 themes\hexo-theme-matery\source  favicon.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="添加博客动态标签"><a href="#添加博客动态标签" class="headerlink" title="添加博客动态标签"></a>添加博客动态标签</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/layout/layout.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在对应的位置下添加如下代码</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span>            <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexo-neat代码优化加速"><a href="#hexo-neat代码优化加速" class="headerlink" title="hexo-neat代码优化加速"></a>hexo-neat代码优化加速</h2><ul><li>站点根目录下_config.yaml添加如下内容</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span><span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">neat_html</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.md'</span><span class="token key atrule">neat_css</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span><span class="token key atrule">neat_js</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">output</span><span class="token punctuation">:</span>  <span class="token key atrule">compress</span><span class="token punctuation">:</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/**/instantpage.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装插件</li></ul><pre class="line-numbers language-none"><code class="language-none">npm install hexo-neat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行hexo</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g<span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修复详情页下面的上一篇-x2F-下一篇摘要失效"><a href="#修复详情页下面的上一篇-x2F-下一篇摘要失效" class="headerlink" title="修复详情页下面的上一篇&#x2F;下一篇摘要失效"></a>修复详情页下面的上一篇&#x2F;下一篇摘要失效</h2><pre class="line-numbers language-none"><code class="language-none">vi theme&#x2F;hexo-theme-matery&#x2F;layout&#x2F;_partial&#x2F;prev-next.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>找到上一页对应的位置，大概在41行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"summary block-with-text"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>summary <span class="token operator">&amp;&amp;</span> page<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>summary <span class="token operator">%</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">strip_html</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找到下一页对应的位置，大概在103行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"summary block-with-text"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>summary <span class="token operator">&amp;&amp;</span> page<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>summary <span class="token operator">%</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">strip_html</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章详情页头部添加作者信息"><a href="#文章详情页头部添加作者信息" class="headerlink" title="文章详情页头部添加作者信息"></a>文章详情页头部添加作者信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/layout/_partial/post-detail.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在36行附近添加如下内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>author <span class="token operator">&amp;&amp;</span> page<span class="token punctuation">.</span>author<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-date info-break-policy"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa-solid fa-user-pen"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>author <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li>最终效果如下</li></ul><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 紅色</div><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 綠色</div><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 黃色</div><ul><li>在themes&#x2F;hexo-theme-matery&#x2F;scripts&#x2F; 新建block.js文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/scripts/block.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>添加如下内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> className <span class="token operator">=</span>  args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'&lt;div class="uk-alert uk-alert-danger">&lt;i class="fas fa-exclamation-triangle">&lt;/i> '</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">ends</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> className <span class="token operator">=</span>  args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'&lt;div class="uk-alert uk-alert-success">&lt;i class="fa fa-check-circle">&lt;/i> '</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">ends</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">args<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> className <span class="token operator">=</span>  args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'&lt;div class="uk-alert uk-alert-warning">&lt;i class="fa fa-exclamation-circle">&lt;/i> '</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">ends</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在head.ejs文件中添加样式</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes/hexo-theme-matery/layout/_partial/head.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        .uk-alert <span class="token punctuation">&#123;</span>            margin-bottom: 15px<span class="token punctuation">;</span>            padding: 10px<span class="token punctuation">;</span>            background: <span class="token comment">#ebf7fd;</span>            color: <span class="token comment">#2d7091;</span>            border: 1px solid rgba<span class="token punctuation">(</span><span class="token number">45</span>, <span class="token number">112</span>, <span class="token number">145</span>, <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            border-radius: 4px<span class="token punctuation">;</span>            text-shadow: <span class="token number">0</span> 1px <span class="token number">0</span> <span class="token comment">#ffffff;</span>        <span class="token punctuation">&#125;</span>        .uk-alert-success <span class="token punctuation">&#123;</span>            background: <span class="token comment">#e8ece2;</span>            color: <span class="token comment">#659f13;</span>            border-left: 6px solid rgba<span class="token punctuation">(</span><span class="token number">120</span>, <span class="token number">199</span>, <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            font-weight: <span class="token number">600</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        .uk-alert-warning <span class="token punctuation">&#123;</span>            background: <span class="token comment">#fff1f0;</span>            color: rgb<span class="token punctuation">(</span><span class="token number">73</span>, <span class="token number">59</span>, <span class="token number">156</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            border-left: 6px solid rgb<span class="token punctuation">(</span><span class="token number">83</span>, <span class="token number">27</span>, <span class="token number">184</span>, <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            font-weight: <span class="token number">600</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        .uk-alert-danger <span class="token punctuation">&#123;</span>            background: <span class="token comment">#f8f8f6;</span>            color: <span class="token comment">#eb360d;</span>            border-left: 6px solid<span class="token comment">#eb360d;</span>            font-weight: <span class="token number">600</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>/style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用方法</li></ul><pre class="line-numbers language-none"><code class="language-none">&#123;%r%&#125;紅色&#123;%endr%&#125;&#123;%g%&#125;綠色&#123;%endg%&#125;&#123;%y%&#125;黃色&#123;%endy%&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><ul><li>在博客根目录执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根目录配置文件中开启懒加载</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> <span class="token comment"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>到这里就配置完了，执行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>就有效果了，以后博客上的图片就都是懒加载了，以上步骤理论上任何主题都可以用</p><p>一般情况下懒加载会和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是loading image。matery主题的解决方案是：</p><p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p></li><li><p>在108行加入以下内容</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>修改后代码</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#articleContent, #myGallery'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lightGallery</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">'.img-item'</span><span class="token punctuation">,</span>            <span class="token comment">// 启用字幕</span>            <span class="token literal-property property">subHtmlSelectorRelative</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 懒加载防止插件冲突</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// progress bar init</span>        <span class="token keyword">const</span> progressElement <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.progress-bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>progressElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">ScrollProgress</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                progressElement<span class="token punctuation">.</span>st<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p><p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand-logo"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for() %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>logo <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>logo<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;%= theme.logo %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo-img"</span> alt<span class="token operator">=</span><span class="token string">"LOGO"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo-span"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> config<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义加载logo"><a href="#自定义加载logo" class="headerlink" title="自定义加载logo"></a>自定义加载logo</h2><ul><li><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</li><li>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决懒加载后图片不能立即显示问题"><a href="#解决懒加载后图片不能立即显示问题" class="headerlink" title="解决懒加载后图片不能立即显示问题"></a>解决懒加载后图片不能立即显示问题</h2><ul><li><p>此优化后可以做到懒加载无感知</p></li><li><p>在根目录的配置文件_config.yaml 添加如下内容</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># optional</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> <span class="token comment"># optional eg ./images/loading.gif</span>  <span class="token key atrule">isSPA</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># optional</span>  <span class="token key atrule">preloadRatio</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token comment"># optional, default is 1 通过修改该值可以调节预加载的阈值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置优化达到性能最佳</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 图片懒加载</span><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment">#eg ./images/loading.gif</span>  <span class="token key atrule">isSPA</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">preloadRatio</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="我的梦想card添加一言"><a href="#我的梦想card添加一言" class="headerlink" title="我的梦想card添加一言"></a>我的梦想card添加一言</h2><ul><li>vi themes\hexo-theme-matery\source\css\matery.css</li><li>在最后添加如下样式内容</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 增加每日一言模块 */</span><span class="token selector">.poem-wrap</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 730px<span class="token punctuation">;</span>    <span class="token property">max-width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #797979<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 80px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-left</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-border</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 27%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #797979<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-right</span> <span class="token punctuation">&#123;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-wrap h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #797979<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-wrap p:nth-of-type(1)</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-wrap p</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #797979<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Linux Biolinum"</span><span class="token punctuation">,</span> <span class="token string">"Noto Serif SC"</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> Menlo<span class="token punctuation">,</span> Monaco<span class="token punctuation">,</span> monospace<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.poem-wrap p:nth-of-type(2)</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 15px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vi themes\hexo-theme-matery\layout_widget\dream.ejs</li><li>修改为如下内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn?c=d&amp;c=h&amp;c=j'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> info <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> poem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'poem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto<span class="token punctuation">;</span>        info<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"--"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from_who <span class="token operator">+</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 加入网易云音乐热门评论，实时更新 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-wrap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>dream<span class="token punctuation">.</span>showTitle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-border poem-left"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-border poem-right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> theme<span class="token punctuation">.</span>dream<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"poem"</span><span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"info"</span><span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"hitokoto"</span><span class="token operator">></span>正在加载一言<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在主题配置文件中开启dream显示</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dream</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 摘录  <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment"># 此时text的内容不会显示，内容会自动使用一言api的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 可以在其他地方引用，只需要将deream.ejs中的代码加入需要引用的ejs文件中即可</div><h2 id="自定义我的相册"><a href="#自定义我的相册" class="headerlink" title="自定义我的相册"></a>自定义我的相册</h2><ul><li>修改主题配置文件</li><li><code> vi themes\hexo-theme-matery\_config.yml</code></li></ul><pre class="line-numbers language-none"><code class="language-none"># 二级菜单写法如下媒体:  icon: fas fa-list  children:    - name: 相册      url: &#x2F;galleries      icon: fas fa-image#    - name: Musics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新建相册页</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo new page gallery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在<code>source\galleries\</code>下新建或者修改index.md为以下内容</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> galleriesdate<span class="token operator">:</span> <span class="token number">2022</span><span class="token number">-11</span><span class="token number">-27</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">36</span>type<span class="token operator">:</span> <span class="token string">"galleries"</span>layout<span class="token operator">:</span> <span class="token string">"galleries"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在<code>themes\hexo-theme-matery\source\css\</code> 新建或者修改gallery.css</p></li><li><pre><code class="shell">vi themes\hexo-theme-matery\source\css\gallery.css<pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;css.gallery-wrapper&#123;  padding-top: 30px;&#125;.gallery-wrapper .gallery-box&#123;  padding: 5px !important;&#125;.gallery-wrapper .gallery-item &#123;  display: block;  overflow: hidden;  background-color: #fff;  padding: 5px;  padding-bottom: 0;  position: relative;  -moz-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22);  -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22);  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22);&#125;.gallery-cover-box&#123;  width: 100%;  padding-top: 60%;  text-align: center;  overflow: hidden;  position: relative;  background: center center no-repeat;  -webkit-background-size: cover;  background-size: cover;&#125;.gallery-cover-box .gallery-cover-img &#123;  display: inline-block;  width: 100%;  position: absolute;  left: 50%;  top: 50%;  transform: translate(-50%,-50%);&#125;.gallery-item .gallery-name&#123;  font-size: 14px;  line-height: 24px;  text-align: center;  color: #666;  margin: 0;&#125;.waterfall &#123;  column-count: 3;  column-gap: 1em;&#125;.photo-wrapper&#123;  padding-top: 20px;&#125;.photo-item &#123;  display: block;  padding: 10px;  padding-bottom: 0;  margin-bottom: 14px;  font-size: 0;  -moz-page-break-inside: avoid;  -webkit-column-break-inside: avoid;  break-inside: avoid;  background: white;  -moz-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22);  -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22);  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.22);&#125;.photo-item img &#123;  width: 100%;&#125;.photo-item .photo-name&#123;  font-size: 14px;  line-height: 30px;  text-align: center;  margin-top: 10px;  margin-bottom: 10px;  border-top: 1px solid #dddddd;&#125;&#x2F;*适配移动端布局*&#x2F;@media only screen and (max-width: 601px) &#123;  .waterfall &#123;    column-count: 2;    column-gap: 1em;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>在<code>themes\hexo-theme-matery\layout\</code>目录下新建 或者修改<code>galleries.ejs</code> 文件，替换为以下内容</p></li><li><p>该版本为添加了一言api的版本，如果不需要删除对应的代码就行</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/gallery.css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/bg-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言<span class="token constant">API</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 现代写法，推荐 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token function">兼容低版本浏览器</span> <span class="token punctuation">(</span>包括 <span class="token constant">IE</span><span class="token punctuation">)</span>，可移除 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>End<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn?c=d&amp;c=h&amp;c=j'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> info <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> poem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'poem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>from_who<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            info<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            info<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"--"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from_who <span class="token operator">+</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 加入网易云音乐热门评论，实时更新 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-wrap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-border poem-left"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-border poem-right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>时光机<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"poem"</span><span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"info"</span><span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"hitokoto"</span><span class="token operator">></span>正在加载一言<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> galleries <span class="token operator">=</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-wrapper row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> galleries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> gallery <span class="token operator">=</span> galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s6 m4 l4 xl3 gallery-box"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"./&lt;%- gallery.name %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-item"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span>                     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-cover-box"</span> style<span class="token operator">=</span><span class="token string">"background-image: url(https://zhangtq-gallery.oss-cn-hangzhou.aliyuncs.com/cover/&lt;%- gallery.cover%>);"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-name"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> gallery<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>themes\hexo-theme-matery\layout\</code>下新建或者修改<code>gallery.ejs</code> 文件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/gallery.css"</span><span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"/libs/fancybox/jquery.fancybox.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"/libs/justifiedGallery/justifiedGallery.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/post-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">let</span> galleries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    galleries <span class="token operator">=</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> pageTitle <span class="token operator">=</span> page<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getCurrentGallery</span><span class="token punctuation">(</span><span class="token parameter">galleries<span class="token punctuation">,</span> pageTitle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> galleries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> pageTitle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> currentGallery <span class="token operator">=</span> <span class="token function">getCurrentGallery</span><span class="token punctuation">(</span>galleries<span class="token punctuation">,</span> pageTitle<span class="token punctuation">)</span><span class="token keyword">var</span> photos <span class="token operator">=</span> currentGallery<span class="token punctuation">.</span>photos<span class="token punctuation">;</span><span class="token keyword">let</span> imageStr <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> photos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> photo <span class="token operator">=</span> photos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     imageStr <span class="token operator">+=</span> <span class="token string">"&lt;a href=\"https://zhangtq-gallery.oss-cn-hangzhou.aliyuncs.com/photo/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>            <span class="token string">"     class=\"photo-item\" rel=\"example_group\""</span> <span class="token operator">+</span>            <span class="token string">"     data-fancybox=\"images\">"</span> <span class="token operator">+</span>            <span class="token string">"      &lt;img src=\"https://zhangtq-gallery.oss-cn-hangzhou.aliyuncs.com/photo/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>            <span class="token string">"       alt="</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">">\n"</span> <span class="token operator">+</span>            <span class="token string">"    &lt;/a>"</span><span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言<span class="token constant">API</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 现代写法，推荐 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token function">兼容低版本浏览器</span> <span class="token punctuation">(</span>包括 <span class="token constant">IE</span><span class="token punctuation">)</span>，可移除 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>End<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn?c=d&amp;c=h&amp;c=j'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> info <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> poem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'poem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>from_who<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            info<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            info<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"--"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from_who <span class="token operator">+</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 加入网易云音乐热门评论，实时更新 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-wrap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-border poem-left"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poem-border poem-right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>时光机<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"poem"</span><span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"info"</span><span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"hitokoto"</span><span class="token operator">></span>正在加载一言<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"photo-wrapper"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>password <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/crypto-js.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/gallery-encrypt.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"hbe-security"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hbe-input-container"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hbe-form-control"</span> id<span class="token operator">=</span><span class="token string">"pass"</span>  placeholder<span class="token operator">=</span><span class="token string">"请输入密码查看内容"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn-decrypt"</span> id<span class="token operator">=</span><span class="token string">"btn_decrypt"</span><span class="token operator">></span>解密<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div  id<span class="token operator">=</span><span class="token string">"mygallery"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waterfall"</span> id<span class="token operator">=</span><span class="token string">"encrypt-blog"</span> style<span class="token operator">=</span><span class="token string">"display:none"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">aes</span><span class="token punctuation">(</span>imageStr<span class="token punctuation">,</span> page<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waterfall"</span> id<span class="token operator">=</span><span class="token string">"encrypt-blog"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> imageStr <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/libs/fancybox/fancybox.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/libs/justifiedGallery/justifiedGallery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[rel=example_group]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fancybox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#encrypt-blog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">margins</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">rowHeight</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 需要几个文件，我把文件地址放在下面，用浏览器打开链接，就会显示出代码，然后复制粘贴到文加中去就行。开头的是文件路径，如果没有的话，就新建一个就 OK 了。</div></li><li><p><code>hemes\hexo-theme-matery\source\libs\fancybox\jquery.fancybox.css</code></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/fancybox/jquery.fancybox.css">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/fancybox/jquery.fancybox.css</a></p></li><li><p><code>themes\hexo-theme-matery\source\libs\fancybox\fancybox.js</code></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/fancybox/fancybox.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/fancybox/fancybox.js</a></p></li><li><p><code>themes\hexo-theme-matery\source\libs\justifiedGallery\justifiedGallery.min.css</code></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/justifiedGallery/justifiedGallery.min.css">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/justifiedGallery/justifiedGallery.min.css</a></p></li><li><p><code>themes\hexo-theme-matery\source\libs\justifiedGallery\justifiedGallery.min.js</code></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/justifiedGallery/justifiedGallery.min.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/libs/justifiedGallery/justifiedGallery.min.js</a></p></li><li><p><code>hemes\hexo-theme-matery\source\js\crypto-js.js</code></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/crypto-js.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/crypto-js.js</a></p></li><li><p><code>hemes\hexo-theme-matery\source\js\gallery-encrypt.js</code></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/gallery-encrypt.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/gallery-encrypt.js</a></p></li></ul><blockquote><p>链接有可能失效，这里提供压缩包下载</p><p><a href="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/gallery-css-js/gallery-css-js.zip">点击下载</a></p></blockquote><h2 id="相册加密"><a href="#相册加密" class="headerlink" title="相册加密"></a>相册加密</h2><ul><li>依赖于上面的的<code>crypto-js.js</code>和<code>gallery-encrypt.js</code>放到相同的目录下就可以</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-blog-encrypt<span class="token function">npm</span> <span class="token function">install</span> crypto-js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>vi themes\hexo-theme-matery\_config.yml</code> 修改enable为True</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>  <span class="token key atrule">promptMessage</span><span class="token punctuation">:</span> 请输入访问本文章的密码  <span class="token key atrule">errorMessage</span><span class="token punctuation">:</span> 密码错误，将返回主页！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新建如下<code> themes\hexo-theme-matery\scripts\helpers\</code> 目录，如果目录不存在先新建目录</li><li>在encrypt.j文件中加入如下内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* global hexo */</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> CryptoJS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto-js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'aes'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span>password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> content<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>themes\hexo-theme-matery\source\css\</code> 的my.css中添加如下内容</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.hbe-input-container  .btn-decrypt</span><span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #3f90ff<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>至此，添加密码功能就实现了</li><li>在新建的 <strong><a href="http://index.md/">index.md</a></strong> 文章内添加 <strong>password</strong>属性，后面写上你的密码即可，然后执行命令，查看本地效果即可**<em>注意：密码需要经过sha256加密</em>， 这里提供加密网站<a href="http://www.ttmd5.com/hash.php">在线加密网站</a></li></ul><h2 id="一级菜单或二级菜单页面改成友链形式"><a href="#一级菜单或二级菜单页面改成友链形式" class="headerlink" title="一级菜单或二级菜单页面改成友链形式"></a>一级菜单或二级菜单页面改成友链形式</h2><ul><li><code>themes\hexo-theme-matery\_config.yml</code> 这里以二级菜单书籍为例</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Friends</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span class="token comment"># 二级菜单写法如下</span><span class="token key atrule">媒体</span><span class="token punctuation">:</span>  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 相册      <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 书籍      <span class="token key atrule">url</span><span class="token punctuation">:</span> /books      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>vi themes\hexo-theme-matery\languages\zh-CN.yml</code> 添加如下内容</li><li>这一步相当于做了中英文对照，使页面下的大标题和菜单中文一致，如果不做的话，在页面上会直接显示books,而不是书籍</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">books</span><span class="token punctuation">:</span> 书籍 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>hexo new page books</code></li><li><code>vi source\books\index.md</code> 替换为如下内容</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">---title<span class="token operator">:</span> booksdate<span class="token operator">:</span> <span class="token number">2022</span><span class="token number">-11</span><span class="token number">-27</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">29</span>type<span class="token operator">:</span> <span class="token string">"books"</span>layout<span class="token operator">:</span> <span class="token string">"books"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拷贝friends.ej文件作为books.ejs</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> themes<span class="token punctuation">\</span>hexo-theme-matery<span class="token punctuation">\</span>layout<span class="token punctuation">\</span>friends.ejs themes<span class="token punctuation">\</span>hexo-theme-matery<span class="token punctuation">\</span>layout<span class="token punctuation">\</span>books.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改books.ejs</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes<span class="token punctuation">\</span>hexo-theme-matery<span class="token punctuation">\</span>layout<span class="token punctuation">\</span>books.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开 musics.ejs 文本内搜索 friends ，把它们改成 books，<strong>注意定义的 class 和 id 内的不要改，只改变量</strong>，更改目标为下图高亮部分</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221128001429060.png" alt="image-20221128001429060"></p><ul><li>复制friends.json 文件为books.json</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">cp source\_data\friends.json source\_data\books.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>hexo g &amp;&amp; hexo s</li><li>至此就会将页面改为友链样式，后续只需要在books.json中修改具体内容就可以了</li></ul><h2 id="自定义菜单下友链样式修改"><a href="#自定义菜单下友链样式修改" class="headerlink" title="自定义菜单下友链样式修改"></a>自定义菜单下友链样式修改</h2><ul><li>修改缩略图边框为方形（大多图片是方形的，这样后续添加内容会更美观）</li><li>以下步骤其实就是找到你菜单详情页面的js文件，做出修改</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> themes<span class="token punctuation">\</span>hexo-theme-matery<span class="token punctuation">\</span>layout<span class="token punctuation">\</span>books.ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个属性是控制弯曲度的</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>frind<span class="token operator">-</span>ship img <span class="token punctuation">&#123;</span>border<span class="token operator">-</span>radius<span class="token operator">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>修改高度，还是上面这个文件,由于我后来对卡片内容做了调整，后来值有所变化，按需修改width和height值就可以了</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>frind<span class="token operator">-</span>ship <span class="token punctuation">.</span>title img <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 167px<span class="token punctuation">;</span>flex<span class="token operator">-</span>shrink<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加显示卡片内容</li><li>先看效果图</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221128002626121.png" alt="image-20221128002626121"></p><ul><li>还是上面的文件,大约210行附近，这块的内容可以自定以，注意取值和json 文件的字段相同就行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;%- url_for(friend.avatar) %>"</span> alt<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h5<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> friend<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>        <span class="token operator">&lt;</span>h5<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> friend<span class="token punctuation">.</span>type <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>        <span class="token operator">&lt;</span>h5<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> friend<span class="token punctuation">.</span>recommendation <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h5<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> friend<span class="token punctuation">.</span>process <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h5<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改books.json文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://zhangtq-gallery.oss-cn-hangzhou.aliyuncs.com/fenmian/s34144077.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"深入理解分布式系统"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"科技/互联网"</span><span class="token punctuation">,</span><span class="token property">"recommendation"</span><span class="token operator">:</span> <span class="token string">"★★★★"</span><span class="token punctuation">,</span><span class="token property">"process"</span><span class="token operator">:</span> <span class="token string">"在看ing"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://book.douban.com/subject/35794814/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"了解书籍"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://zhangtq-gallery.oss-cn-hangzhou.aliyuncs.com/fenmian/s29434304.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"流畅的Python"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"互联网/编程"</span><span class="token punctuation">,</span><span class="token property">"recommendation"</span><span class="token operator">:</span> <span class="token string">"★★★★"</span><span class="token punctuation">,</span><span class="token property">"process"</span><span class="token operator">:</span> <span class="token string">"在看ing"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://book.douban.com/subject/27028517/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"了解书籍"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://zhangtq-gallery.oss-cn-hangzhou.aliyuncs.com/fenmian/s33964410.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Go语言底层原理剖析"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"互联网/编程"</span><span class="token punctuation">,</span><span class="token property">"recommendation"</span><span class="token operator">:</span> <span class="token string">"★★★★★"</span><span class="token punctuation">,</span><span class="token property">"process"</span><span class="token operator">:</span> <span class="token string">"已看完(2020/9/22)"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://book.douban.com/subject/35556889/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"了解书籍"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一级菜单和二级菜单的改法相同，只是在_config.yaml里配置的menu 不一致罢了</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">Friends</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span class="token comment"># 二级菜单写法如下</span><span class="token key atrule">媒体</span><span class="token punctuation">:</span>  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list  <span class="token key atrule">children</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 相册      <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 书籍      <span class="token key atrule">url</span><span class="token punctuation">:</span> /books      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 一级菜单写法如下</span><span class="token key atrule">Friends</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book书籍：<span class="token key atrule">url</span><span class="token punctuation">:</span> /books<span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意头像链接，可以下载下来放到自己的图床上比如oss ，防止不能访问，目前豆瓣的头像会有限制</li></ul><h1 id="hexo-typora-oss-最佳实践"><a href="#hexo-typora-oss-最佳实践" class="headerlink" title="hexo+ typora+ oss 最佳实践"></a>hexo+ typora+ oss 最佳实践</h1><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 不推荐通过方式一下载插件的方式来显示图片，这里会提供方法但是强烈建议使用方式二</div><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul><li>修改博客根目录中<code>_config.yml</code>文件的配置项<code>post_asset_folder</code>为<code>true</code>：</li><li>完成此设置后，当你通过<code>hexo new 文件名</code>新建博客后，会产生一个和文件同名的文件夹。</li><li>下载插件 npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save</li><li>当文章需要添加图片时，将需要添加的图片放入同名的文件夹中，同时通过相对路径索引到该图片</li><li>在typora中设置： 文件–&gt;偏好设置–&gt;图像</li></ul><p><img src="https://www.freesion.com/images/433/1b1e2e6531d46b4b8c32e82084e30819.png" alt="1587393533151"></p><ul><li>以后直接粘贴图片就可以自动保存到 hexo 配置的 post_asset_folder 文件夹里,自动渲染了</li><li>直接渲染时会发现显示不了，此时需要在typora中将图片路径前的文件目录去除</li><li>可以通过typor中批量替换的方式，但是替换后在typora中又不能显示了，网页显示正常</li></ul><h3 id="方式二通过阿里云oss图床"><a href="#方式二通过阿里云oss图床" class="headerlink" title="方式二通过阿里云oss图床"></a>方式二通过阿里云oss图床</h3><ul><li><p>阿里云的操作就不再这里详谈了，有一点注意的使创建bucket后需要将buckeet改为公开</p></li><li><p>配置typora： 文件–&gt;偏好设置</p></li><li><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221126194736863.png" alt="image-20221126194736863"></p></li><li><p>在进行第五步打开配置文件添加如下内容</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"uploader"</span><span class="token operator">:</span> <span class="token string">"aliyun"</span><span class="token punctuation">,</span>    <span class="token property">"aliyun"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"accessKeyId"</span><span class="token operator">:</span> <span class="token string">"****"</span><span class="token punctuation">,</span>      <span class="token property">"accessKeySecret"</span><span class="token operator">:</span> <span class="token string">"*****"</span><span class="token punctuation">,</span>      <span class="token property">"bucket"</span><span class="token operator">:</span> <span class="token string">"zhangtq-blog"</span><span class="token punctuation">,</span><span class="token comment">//换成你自己的Bucket名称</span>      <span class="token property">"area"</span><span class="token operator">:</span> <span class="token string">"oss-cn-hangzhou"</span><span class="token punctuation">,</span><span class="token comment">//OSS概览里的EndPoint(地域节点)，“.”前面的内容</span>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"content_picture/"</span><span class="token punctuation">,</span><span class="token comment">//Bucket下的文件夹，没有可以不写，默认不要文件夹</span>      <span class="token property">"customUrl"</span><span class="token operator">:</span> <span class="token string">"https://*******.aliyuncs.com"</span><span class="token punctuation">,</span><span class="token comment">//OSS概览里的Bucket域名(开头加上https://)</span>      <span class="token property">"options"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token comment">//可以不写</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>至此，每次我们复制图片到typora中后，都会自动上传至oss，同时在md文件中自动引用url</li></ul><blockquote><p>最开是博主是按照大多数人一样，通过在根目录下设置post_asset_folder: true，这样每次hexo new 文件名后会产生一个同名的文件夹</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题II</title>
      <link href="/posts/45160.html"/>
      <url>/posts/45160.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>时间复杂度与空间复杂度分析作为数据结构与算法的第一课，看多少便都不过分，建议多看看，这里推荐两篇文章</p></blockquote><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI0NjAxMDU5NA==&mid=2475918746&idx=1&sn=3fe42234a1f07fb084d11fe06fb24893&chksm=ff22e217c8556b019b9052f9d4805174385ba4c8c099216fa226dbd1b033a9a49782579e4b75&token=1996171232&lang=zh_CN#rd">保姆级教学！彻底学会时间复杂度和空间复杂度 (qq.com)</a></li><li><a href="https://www.cnblogs.com/biehongli/p/11672380.html">时间复杂度o(1), o(n), o(logn), o(nlogn) - 别先生 - 博客园 (cnblogs.com)</a></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote><p>数组是一种基础的<strong>线性数据结构</strong>，它是用<strong>连续的一段内存空间，来存储相同数据类型</strong>数据的集合</p><p>两个重点：</p><ul><li>连续内存空间</li><li>相同数据类型</li></ul></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130225923967.png" alt="image-20221130225923967"></p><h2 id="解决数组问题常用的双指针和快慢指针"><a href="#解决数组问题常用的双指针和快慢指针" class="headerlink" title="解决数组问题常用的双指针和快慢指针"></a>解决数组问题常用的双指针和快慢指针</h2><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i>  快慢指针是双指针的一种，快慢指针通常是从同侧开始不强调是哪种类型的双指针，一般left 以左边为起始， right以右边为起始，两侧向中间靠拢的方式</div><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27.移除元素</a></h2><blockquote><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>方法一： 双指针</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>                <span class="token keyword">while</span> left<span class="token operator">&lt;=</span> right <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span>val<span class="token punctuation">:</span>                        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>                        <span class="token keyword">break</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        nums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                        right <span class="token operator">-=</span> <span class="token number">1</span>            left <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：快慢指针</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> right<span class="token operator">&lt;</span>n<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> left        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h2><blockquote><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221201011720285.png" alt="image-20221201011720285"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token punctuation">,</span>top<span class="token punctuation">,</span> bottom  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"-"</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        start <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> top<span class="token operator">&lt;=</span> bottom<span class="token punctuation">:</span>                        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>                <span class="token comment"># result.append(start)</span>                board<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> start                start <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># result.append(start)</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> start                start <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># result.append(start)</span>                    board<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> start                    start <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">:</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># result.append(start)</span>                    board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> start                    start <span class="token operator">+=</span> <span class="token number">1</span>            left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">-=</span> <span class="token number">1</span>            top <span class="token operator">+=</span> <span class="token number">1</span>            bottom <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> board<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h2><blockquote><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221201012100898.png" alt="image-20221201012100898"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        滑动窗口        """</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        min_len <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>        total <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            total <span class="token operator">+=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> total<span class="token operator">>=</span> target<span class="token punctuation">:</span>                min_len <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>right<span class="token operator">-</span> left <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> min_len<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>min_len<span class="token punctuation">,</span> right<span class="token punctuation">,</span> left<span class="token punctuation">)</span>                total <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">if</span> min_len <span class="token operator">==</span> n<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">else</span> min_len<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h2><blockquote><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1：</p><p>输入：nums &#x3D; [-4,-1,0,3,10]<br>输出：[0,1,9,16,100]<br>解释：平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]<br>示例 2：</p><p>输入：nums &#x3D; [-7,-3,2,3,11]<br>输出：[4,9,9,49,121]</p></blockquote><p>双指针：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        可以平方后归并排序        这里采用双指针的方式        """</span>        left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分类+合并有序列表：</p><pre class="line-numbers language-pythoon" data-language="pythoon"><code class="language-pythoon">class Solution:    def sortedSquares(self, nums: List[int]) -&gt; List[int]:        # 分情况讨论        neg &#x3D; []        non_neg &#x3D; []        for num in nums:            if num &lt; 0:                neg.append(num * num)            else:                non_neg.append(num * num)        neg.reverse()        # 合并有序列表        m, n &#x3D; len(neg), len(non_neg)        i &#x3D; j &#x3D; 0        ans &#x3D; []        while i &lt; m and j &lt; n:            if neg[i] &lt; non_neg[j]:                ans.append(neg[i])                i +&#x3D; 1            else:                ans.append(non_neg[j])                j +&#x3D; 1        ans +&#x3D; neg[i:]        ans +&#x3D; non_neg[j:]        return ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链式结构的存储"><a href="#链式结构的存储" class="headerlink" title="链式结构的存储"></a>链式结构的存储</h2><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130204840602.png" alt="链式存储结构"></p><ul><li><p>用一种任意存储单元存储数据元素</p></li><li><p>各个存储单元在内存中可以不用连续</p></li><li><p>通过指针的形式链接起来</p></li></ul><h2 id="单项链表"><a href="#单项链表" class="headerlink" title="单项链表"></a>单项链表</h2><ul><li>多个节点相连</li><li>每个节点中包含一个指针域</li><li>单链表的指针域指向的是下一个节点的地址</li><li>把指向下个节点的指针叫做后继指针</li></ul><p><img src="C:\Users\zhangtq\AppData\Roaming\Typora\typora-user-images\image-20221130205630113.png" alt="image-20221130205630113"></p><ul><li>单链表的第一个节点的存储位置叫做头指针，最后一个节点的后继指针为空</li></ul><p><img src="C:\Users\zhangtq\AppData\Roaming\Typora\typora-user-images\image-20221130210123345.png" alt="image-20221130210123345"></p><ul><li>此外，有时候为了操作，我们会在第一个节点前面添加一个节点，称为头节点</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130210704820.png" alt="添加头节点的链表"></p><ul><li><p>头指针和和头节点</p></li><li><blockquote><p>头指针是指向链表第一个节点的指针，头指针在链表中必须存在，因为我们要通过头指针直到链表的位置在哪里</p><p>如果存在头节点，那么头指针就是指向头节点的指针，其实和上面一样，有头节点的话，第一个节点必是头指针</p></blockquote></li><li><blockquote><p>头节点不具有实际意义，头节点中不存储数据元素，只是我们在删除或者插入时，为了统一头节点的操作专门设定的</p></blockquote></li></ul><h2 id="单向链表的插入操作"><a href="#单向链表的插入操作" class="headerlink" title="单向链表的插入操作"></a>单向链表的插入操作</h2><ul><li>单项链表插入操作</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130212139357.png" alt="单向链表插入"></p><ul><li>如上图，如果将t节点插入到s节点后需要<ul><li>将t节点的后继节点指向s节点的后继节点</li><li>将s节点的后继节点指向节点t</li></ul></li><li>单项链表的删除操作</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130213205047.png" alt="image-20221130213205047"></p><ul><li>由图可见，删除操作的本质其实是绕过要删除的节点，这里指t节点</li><li>具体操作是将节点s的后继指针指向节点t的后继指针</li></ul><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><ul><li>双向链表，有两个方向，相对于单向链表，多了一个前驱指针prev,指向前驱节点</li><li>双向链表可以向前走，也可以向后</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130223251256.png" alt="双向链表"></p><ul><li>双向链表用了空间换时间，会更快</li></ul><h2 id="单项链表和双向链表操作对比"><a href="#单项链表和双向链表操作对比" class="headerlink" title="单项链表和双向链表操作对比"></a>单项链表和双向链表操作对比</h2><h3 id="链表的插入的两种前置条件"><a href="#链表的插入的两种前置条件" class="headerlink" title="链表的插入的两种前置条件"></a>链表的插入的两种前置条件</h3><ul><li><p>在data域的某个特定值的节点前后插入新的节点</p></li><li><p>在给定的节点前后插入新的节点</p></li><li><p>针对第一种情况，两种链表的复杂度相近</p><ul><li>第一步显示表里链表找到值为特定值的节点，两种都是从头开始遍历复杂度O(n)</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130224227799.png" alt="找到特定值节点"></p><ul><li>第二步是插入操作<ul><li>如果是向后插入，那么两种链表时间复杂度基本一直</li><li>如果是向前插入，单链表慢，因为单链表还需要再遍历一次链表找到特定值节点的前驱节点这个时间又是O(n)，但是双向链表可以直接找到前驱节点</li></ul></li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221130224740974.png" alt="image-20221130224740974"></p></li><li><p>针对第二种情况，和第一种类似，已经知道节点的情况下如果向后插入，单链表和双链表没有区别 都是O(1)</p></li><li><p>针对第二种情况，如果向前插入，单链表需要循环链表，找到先找到前驱节点，而双向链表可以直接插入</p></li></ul><h3 id="两种链表的删除操作"><a href="#两种链表的删除操作" class="headerlink" title="两种链表的删除操作"></a>两种链表的删除操作</h3><h3 id="两种前置条件"><a href="#两种前置条件" class="headerlink" title="两种前置条件"></a>两种前置条件</h3><pre><code>- 在某个data域值等于特定值前后删除- 在某个节点前后删除</code></pre><ul><li>对于情况一<ul><li>第一步，需要在data域值找到特定值节点，这一步两种链表相同</li><li>如果是向前删除，那么单向链表需要再遍历一次链表，找到特定值节点的前驱节点，而双向链表可以直接删除</li><li>如果是向后删除，两者时间复杂度相似</li></ul></li><li>针对情况二：<ul><li>如果是向前删除，单向链表需要遍历，找到前驱节点才可以删除，双向链表可以直接利用prev指针</li><li>如果是向后删除，两者时间复杂度相似</li></ul></li></ul><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><blockquote><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221201182026892.png" alt="image-20221201182026892"></p><blockquote><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2输出：[1,2,3,5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>方法一：找到要删除的前驱节点，直接删除，注意处理第一个节点，认为添加一个头节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        倒数第n个节点，也就是删除正向的第len-n +1 个节点        链表是没有len 方法的，需要先找到链表的长度        为了让第一个节点能操作一致， 添加一个头节点        new-head.next 为真正的头节点        """</span>        dummary <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>        length <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>            length <span class="token operator">+=</span> <span class="token number">1</span>        cur <span class="token operator">=</span> dummary        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">-</span> n <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> dummary<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：借助栈的特性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""利用找的特性则出栈找到要删除前N个节点，出栈此时，stack[-1] 即栈顶就是要删除的前驱节点找到前驱节点后，根据链表的删除方法，删除节点就可以了"""</span>        <span class="token comment"># 方法二， 借助栈</span>        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>        stack <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        cur <span class="token operator">=</span> dummy        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 前驱节点</span>        prev_node <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        prev_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev_node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h2><blockquote><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221201212729257.png" alt="image-20221201212729257"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>                dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>        cur <span class="token operator">=</span> dummy        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            node1 <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            node2 <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node2            node1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node2<span class="token punctuation">.</span><span class="token builtin">next</span>            node2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node1            cur <span class="token operator">=</span> node1        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-K-个一组翻转链表（需补充解题方法）"><a href="#25-K-个一组翻转链表（需补充解题方法）" class="headerlink" title="25. K 个一组翻转链表（需补充解题方法）"></a><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表（需补充解题方法）</a></h2><blockquote><p>给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">pass</span><span class="token comment"># 困难题，后续补充</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h2><blockquote><p>给你一个链表的头节点 head ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221202013620665.png" alt="image-20221202013620665"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># 哈希set的方式</span>    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        viewed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            <span class="token keyword">if</span> head <span class="token keyword">in</span> viewed<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            viewed<span class="token punctuation">.</span>add<span class="token punctuation">(</span>head<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment"># 快慢指针</span>    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        slow <span class="token operator">=</span> fast <span class="token operator">=</span> head        <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> slow <span class="token keyword">is</span> fast<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h2><blockquote><p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>不允许修改 链表。</p></blockquote><ul><li>数学推导+快慢指针法</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221202142358917.png" alt="image-20221202142358917"></p><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i>    设链表的总长度为a+b ，其中a为头节点到入口处的距离，b为环形的长度现在假设有两个人开始跑步，一个人的速度是另一个人的两倍，他们们在相遇点相遇，此时我们看看他们走过的距离关系第一次相遇1. 令slow的走过的距离为slow = s  --->fast = 2s2.  由于是在环内相遇，可知fast一定是套圈slow了，且快的人比慢的人在圈里多跑了n圈，即nb, 由于慢的人走了s， 所有快的人走了fast = s + nb (具体n是几未知)3.  有1式 减2可得s = nb4. 可以再看， 每次经过入口点得距离k = a + nb5. 由于s已经搜了nb步， 所以只需要再走a步就是入口点，如何得到a步呢第二次相遇1. 由上面推导我们可得slow 再走a步就是入口点，1. 此时让快得人去起始点，保持和慢得人一致得速度，当两人相遇时，恰好走了a步</div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 走两步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> fast <span class="token keyword">is</span> slow<span class="token punctuation">:</span>  <span class="token comment"># 首次相遇:</span>                fast <span class="token operator">=</span> head                <span class="token keyword">while</span> fast <span class="token keyword">is</span> <span class="token keyword">not</span> slow<span class="token punctuation">:</span>                    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                    <span class="token comment">#if fast is slow:</span>                    <span class="token comment">#    return slow</span>                <span class="token keyword">return</span> fast        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h2><blockquote><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221202201030405.png" alt="image-20221202201030405"></p><blockquote><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><p>自定义评测：</p><p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p><p>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0<br>listA - 第一个链表<br>listB - 第二个链表<br>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数<br>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数<br>评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221202201321823.png" alt="image-20221202201321823"></p><ul><li>采用hash 表的方式，看是否存在hash表中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        viewed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> headA<span class="token punctuation">:</span>            viewed<span class="token punctuation">.</span>add<span class="token punctuation">(</span>headA<span class="token punctuation">)</span>            headA <span class="token operator">=</span> headA<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> headB<span class="token punctuation">:</span>            <span class="token keyword">if</span> headB <span class="token keyword">in</span> viewed<span class="token punctuation">:</span>                <span class="token keyword">return</span> headB            headB <span class="token operator">=</span> headB<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="143-重排链表"><a href="#143-重排链表" class="headerlink" title="143. 重排链表"></a><a href="https://leetcode.cn/problems/reorder-list/">143. 重排链表</a></h2><blockquote><p>给定一个单链表 L 的头节点 head ，单链表 L 表示为：</p><p>L0 → L1 → … → Ln - 1 → Ln<br>请将其重新排列后变为：</p><p>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …<br>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221202143938115.png" alt="image-20221202143938115"></p><p>方法一： 栈+ 计算中间节点得前驱节点+链表原地插入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: None Do not return anything, modify head in-place instead.        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">None</span>                stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>        middle <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span><span class="token number">2</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> middle<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 将栈中得元素插入到head中</span>            tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> tmp            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            middle <span class="token operator">-=</span> <span class="token number">1</span>        stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：反转链表 + 链表中点 + 链表拼接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: None Do not return anything, modify head in-place instead.        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token keyword">def</span> <span class="token function">middle_node</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            slow <span class="token operator">=</span> fast <span class="token operator">=</span> head            <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">return</span> slow        <span class="token keyword">def</span> <span class="token function">reverse_link</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            原地逆置法            初始化两个三个指针，一个指向头节点，一个指向第一个节点，一个指向第二个节点            """</span>            beg<span class="token operator">=</span> head            end <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">while</span> end<span class="token punctuation">:</span>                beg<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token builtin">next</span>                end<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head                head <span class="token operator">=</span> end                end <span class="token operator">=</span> beg<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">return</span> head        <span class="token keyword">def</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>                l1_next <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>                l2_next <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>                l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2                l1 <span class="token operator">=</span> l1_next                l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1                l2 <span class="token operator">=</span> l2_next        node <span class="token operator">=</span> middle_node<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        right <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token comment">#右半部链表</span>        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 注意一定要断链</span>        <span class="token comment"># 逆置链表</span>        right <span class="token operator">=</span> reverse_link<span class="token punctuation">(</span>right<span class="token punctuation">)</span>        <span class="token comment"># 合并两个链表</span>        mergeList<span class="token punctuation">(</span>head<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h2><blockquote><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p></blockquote><h2 id="常见反转链表的方法"><a href="#常见反转链表的方法" class="headerlink" title="常见反转链表的方法"></a>常见反转链表的方法</h2><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><ul><li>所谓头插法，是指在原有链表的基础上，依次将位于链表头部的节点摘下，然后采用从头部插入的方式生成一个新链表，则此链表即为原链表的反转版</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221201234143662.png" alt="image-20221201234143662"></p><ul><li>新建一个头指针指向空的节点</li><li>将原链表的节点插入新节点的头部</li><li>重复上面操作，每次插入头部，这样最终就实现了逆置</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        头插法        原地逆置法        """</span>        new_head <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            <span class="token builtin">next</span> <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>            head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_head            new_head <span class="token operator">=</span> head            head <span class="token operator">=</span> <span class="token builtin">next</span>        <span class="token keyword">return</span> new_head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原地逆置法"><a href="#原地逆置法" class="headerlink" title="原地逆置法"></a>原地逆置法</h3><p>头插法需要建立新的链表，而原地逆置法是在原来链表的基础上直接进行修改。此时需要借助两个指针</p><ul><li>初始状态下， head 指向头节点， beg指向第一个节点，end 指向第二个节点</li><li>第一轮交换，将end 节点摘出来， 然后添加至链表的头部</li><li>将end指向bed.next节点，然后将end指向的节点从链表中摘除，然后将end节点添加至头部</li><li>依次重复最后完成反转链表</li></ul><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 注意边界条件以及初始化beg和end指针</div><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221202002039580.png" alt="image-20221202002039580"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        原地逆置法        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment"># 初始化两个指针</span>        beg <span class="token operator">=</span> head        end <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">while</span> end<span class="token punctuation">:</span>            <span class="token comment">#beg = head</span>            <span class="token comment">#end = head.next</span>            beg<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token builtin">next</span>            end<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head            head <span class="token operator">=</span> end            end <span class="token operator">=</span> beg<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="堆、栈、队列"><a href="#堆、栈、队列" class="headerlink" title="堆、栈、队列"></a>堆、栈、队列</h1><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h2><blockquote><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：</p><p>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue1 <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>queue2 <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue1<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>queue1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>queue2 <span class="token operator">=</span> self<span class="token punctuation">.</span>queue2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>queue1    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue1<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="346-数据流中的移动平均值"><a href="#346-数据流中的移动平均值" class="headerlink" title="346. 数据流中的移动平均值"></a><a href="https://leetcode.cn/problems/moving-average-from-data-stream/">346. 数据流中的移动平均值</a></h2><blockquote><p>给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算其所有整数的移动平均值。</p><p>实现 MovingAverage 类：</p><p>MovingAverage(int size) 用窗口大小 size 初始化对象。<br>double next(int val) 计算并返回数据流中最后 size 个值的移动平均值。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221204091756212.png" alt="image-20221204091756212"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MovingAverage</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">>=</span>self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="281-锯齿迭代器"><a href="#281-锯齿迭代器" class="headerlink" title="281. 锯齿迭代器"></a><a href="https://leetcode.cn/problems/zigzag-iterator/">281. 锯齿迭代器</a></h2><blockquote><p>给出两个一维的向量，请你实现一个迭代器，交替返回它们中间的元素。</p><p>示例:</p><p>输入:<br>v1 &#x3D; [1,2]<br>v2 &#x3D; [3,4,5,6] </p><p>输出: [1,3,2,4,5,6]</p><p>解析: 通过连续调用 next 函数直到 hasNext 函数返回 false，<br>     next 函数返回值的次序应依次为: [1,3,2,4,5,6]。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ZigzagIterator</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    通过tag标记下次是取数据的队列    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue1 <span class="token operator">=</span> v1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>queue2 <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue1 <span class="token keyword">else</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue1 <span class="token keyword">and</span> self<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue2<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue2 <span class="token keyword">and</span> self<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue1 <span class="token keyword">or</span> self<span class="token punctuation">.</span>queue2 <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></h2><blockquote><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221206110053748.png" alt="image-20221206110053748"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> matrix<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">:</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bottom<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">:</span>                <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>            left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">-=</span> <span class="token number">1</span>            top <span class="token operator">+=</span> <span class="token number">1</span>            bottom <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="362-敲击计数器"><a href="#362-敲击计数器" class="headerlink" title="362. 敲击计数器"></a><a href="https://leetcode.cn/problems/design-hit-counter/">362. 敲击计数器</a></h2><blockquote><p>设计一个敲击计数器，使它可以统计在过去 5 分钟内被敲击次数。（即过去 300 秒）</p><p>您的系统应该接受一个时间戳参数 timestamp (单位为 秒 )，并且您可以假定对系统的调用是按时间顺序进行的(即 timestamp 是单调递增的)。几次撞击可能同时发生。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HitCounter</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    相当于一个固定大小的窗口，再窗口内找到合适数据    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue1 <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>queue2 <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>queue1 <span class="token keyword">and</span> timestamp <span class="token operator">-</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">300</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue1<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getHits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>queue1 <span class="token keyword">and</span> timestamp <span class="token operator">-</span> self<span class="token punctuation">.</span>queue1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">300</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue1<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue1<span class="token punctuation">)</span><span class="token comment"># Your HitCounter object will be instantiated and called as such:</span><span class="token comment"># obj = HitCounter()</span><span class="token comment"># obj.hit(timestamp)</span><span class="token comment"># param_2 = obj.getHits(timestamp)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a><a href="https://leetcode.cn/problems/min-stack/">155. 最小栈</a></h2><blockquote><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p><p>实现 MinStack 类:</p><p>MinStack() 初始化堆栈对象。<br>void push(int val) 将元素val推入堆栈。<br>void pop() 删除堆栈顶部的元素。<br>int top() 获取堆栈顶部的元素。<br>int getMin() 获取堆栈中的最小元素。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment">#self.min = val if not self.min  else min(self.min, val)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> val<span class="token punctuation">:</span>                self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> num    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># Your MinStack object will be instantiated and called as such:</span><span class="token comment"># obj = MinStack()</span><span class="token comment"># obj.push(val)</span><span class="token comment"># obj.pop()</span><span class="token comment"># param_3 = obj.top()</span><span class="token comment"># param_4 = obj.getMin()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h2><blockquote><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><p>实现 MyQueue 类：</p><p>void push(int x) 将元素 x 推到队列的末尾<br>int pop() 从队列的开头移除并返回元素<br>int peek() 返回队列开头的元素<br>boolean empty() 如果队列为空，返回 true ；否则，返回 false<br>说明：</p><p>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek&#x2F;pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> self<span class="token punctuation">.</span>stack1<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  <span class="token boolean">False</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack1 <span class="token keyword">or</span> self<span class="token punctuation">.</span>stack2<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值</a></h2><blockquote><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的算符包括 +、-、*、&#x2F; 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>注意 两个整数之间的除法只保留整数部分。</p><p>可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tokens<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        set1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token builtin">chr</span> <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">chr</span> <span class="token keyword">not</span> <span class="token keyword">in</span> set1<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                num1 <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                num2 <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">chr</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>                    temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2 <span class="token operator">/</span>  num1<span class="token punctuation">)</span>                <span class="token keyword">elif</span> <span class="token builtin">chr</span> <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">:</span>                    temp <span class="token operator">=</span> num1 <span class="token operator">*</span> num2                <span class="token keyword">elif</span> <span class="token builtin">chr</span> <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">:</span>                    temp <span class="token operator">=</span>num1 <span class="token operator">+</span> num2                <span class="token keyword">else</span><span class="token punctuation">:</span>                                        temp <span class="token operator">=</span> num2 <span class="token operator">-</span> num1                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h2><blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">")"</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">:</span> <span class="token string">"&#123;"</span><span class="token punctuation">,</span>  <span class="token string">"]"</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> ss <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> ss <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>                <span class="token keyword">if</span> stack <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1472-设计浏览器历史记录"><a href="#1472-设计浏览器历史记录" class="headerlink" title="1472. 设计浏览器历史记录"></a><a href="https://leetcode.cn/problems/design-browser-history/">1472. 设计浏览器历史记录</a></h2><blockquote><p>你有一个只支持单个标签页的 浏览器 ，最开始你浏览的网页是 homepage ，你可以访问其他的网站 url ，也可以在浏览历史中后退 steps 步或前进 steps 步。</p><p>请你实现 BrowserHistory 类：</p><p>BrowserHistory(string homepage) ，用 homepage 初始化浏览器类。<br>void visit(string url) 从当前页跳转访问 url 对应的页面  。执行此操作会把浏览历史前进的记录全部删除。<br>string back(int steps) 在浏览历史中后退 steps 步。如果你只能在浏览历史中后退至多 x 步且 steps &gt; x ，那么你只后退 x 步。请返回后退 至多 steps 步以后的 url 。<br>string forward(int steps) 在浏览历史中前进 steps 步。如果你只能在浏览历史中前进至多 x 步且 steps &gt; x ，那么你只前进 x 步。请返回前进 至多 steps步以后的 url 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BrowserHistory</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> homepage<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span>homepage<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>stack <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> url            <span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> steps<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> steps <span class="token operator">>=</span> self<span class="token punctuation">.</span>pos<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span>self<span class="token punctuation">.</span>pos<span class="token punctuation">]</span>              <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pos <span class="token operator">=</span> self<span class="token punctuation">.</span>pos<span class="token operator">-</span>steps            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span>self<span class="token punctuation">.</span>pos<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> steps<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> steps<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pos <span class="token operator">=</span> self<span class="token punctuation">.</span>pos <span class="token operator">+</span> steps            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span>self<span class="token punctuation">.</span>pos<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="735-行星碰撞"><a href="#735-行星碰撞" class="headerlink" title="735. 行星碰撞"></a><a href="https://leetcode.cn/problems/asteroid-collision/">735. 行星碰撞</a></h2><blockquote><p>给定一个整数数组 asteroids，表示在同一行的行星。</p><p>对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。</p><p>找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">asteroidCollision</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> asteroids<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span>asteroids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        asteroids <span class="token operator">=</span> asteroids<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>asteroids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            need_insert<span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">while</span> stack<span class="token punctuation">:</span>                <span class="token comment"># print(stack[-1], asteroids[i])</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span><span class="token number">0</span> <span class="token keyword">and</span> asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">and</span> asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    need_insert <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>                <span class="token comment"># 下面为不通向的逻辑</span>                <span class="token comment"># 前数向左，后数向右</span>                <span class="token keyword">elif</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">and</span> asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    need_insert <span class="token operator">=</span> <span class="token boolean">False</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>                <span class="token comment"># 相撞， 后大于前</span>                <span class="token keyword">elif</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># 插入后需要判断和原有的stack中的大小</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    need_insert <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    need_insert <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> stack <span class="token keyword">and</span> need_insert<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>asteroids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除字符串中的所有相邻重复项-II"><a href="#删除字符串中的所有相邻重复项-II" class="headerlink" title="删除字符串中的所有相邻重复项 II"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string-ii/">删除字符串中的所有相邻重复项 II</a></h2><blockquote><p>给你一个字符串 s，「k 倍重复项删除操作」将会从 s 中选择 k 个相邻且相等的字母，并删除它们，使被删去的字符串的左侧和右侧连在一起。</p><p>你需要对 s 重复进行无限次这样的删除操作，直到无法继续为止。</p><p>在执行完所有删除操作后，返回最终得到的字符串。</p><p>本题答案保证唯一</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 方法一：会超时</span>        <span class="token comment"># result = list()</span>        <span class="token comment"># for ss in s:</span>        <span class="token comment">#     # 不足k-1个直接加入</span>        <span class="token comment">#     if len(result) &lt; k-1:</span>        <span class="token comment">#         result.append(ss)</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         # 检测后k-1各元素是否相同并且同为ss</span>        <span class="token comment">#         is_valid = False</span>        <span class="token comment">#         result.append(ss)</span>        <span class="token comment">#         for i in range(-1, -k-1, -1):</span>        <span class="token comment">#             if result[i] != ss:</span>        <span class="token comment">#                 is_valid = True</span>        <span class="token comment">#                 break</span>        <span class="token comment">#         if not is_valid:</span>        <span class="token comment">#             result = result[:len(result)-k]</span>        <span class="token comment"># return "".join(result)</span>        <span class="token comment"># 方法二 利用栈</span>        stack <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ss <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> stack<span class="token punctuation">:</span>                <span class="token keyword">if</span> ss <span class="token operator">==</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                    stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ss <span class="token operator">==</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>=</span>k<span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ss<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ss<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token builtin">chr</span><span class="token punctuation">,</span> num <span class="token keyword">in</span> stack<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token operator">*</span>num<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1249-移除无效的括号"><a href="#1249-移除无效的括号" class="headerlink" title="1249. 移除无效的括号"></a><a href="https://leetcode.cn/problems/minimum-remove-to-make-valid-parentheses/">1249. 移除无效的括号</a></h2><blockquote><p>给你一个由 ‘(‘、’)’ 和小写字母组成的字符串 s。</p><p>你需要从字符串中删除最少数目的 ‘(‘ 或者 ‘)’ （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。</p><p>请返回任意一个合法字符串。</p><p>有效「括号字符串」应当符合以下 任意一条 要求：</p><p>空字符串或只包含小写字母的字符串<br>可以被写作 AB（A 连接 B）的字符串，其中 A 和 B 都是有效「括号字符串」<br>可以被写作 (A) 的字符串，其中 A 是一个有效的「括号字符串」</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minRemoveToMakeValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        stack1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"("</span><span class="token punctuation">:</span>                stack1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">")"</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> stack1<span class="token punctuation">:</span>                    stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">while</span> stack1<span class="token punctuation">:</span>            s<span class="token punctuation">[</span>stack1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"0"</span>        s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        s<span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="哈希-hashmap-x2F-hashset"><a href="#哈希-hashmap-x2F-hashset" class="headerlink" title="哈希(hashmap&#x2F;hashset)"></a>哈希(hashmap&#x2F;hashset)</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h2><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># # 方法一 借助hashmap</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                hashdict<span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> temp <span class="token keyword">in</span> hashdict<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hashdict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">]</span>            hashdict<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> i    <span class="token comment"># 暴力解法</span>    <span class="token comment"># def twoSum(self, nums: List[int], target: int) -> List[int]:</span>    <span class="token comment">#     for i in range(len(nums)):</span>    <span class="token comment">#         for j in range(i+1, len(nums)):</span>    <span class="token comment">#             if nums[i] + nums[j] == target:</span>    <span class="token comment">#                 return i, j</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="146-LRU-缓存"><a href="#146-LRU-缓存" class="headerlink" title="146. LRU 缓存"></a><a href="https://leetcode.cn/problems/lru-cache/">146. LRU 缓存</a></h2><blockquote><p>请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。<br>实现 LRUCache 类：<br>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存<br>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。<br>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。<br>函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。</p></blockquote><p><strong>hashmap + 双端队列</strong></p><blockquote><p>hashmap 中按照对应的key存储节点信息，在节保存key和value</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LinkedNode</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> prev<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> nex<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev        self<span class="token punctuation">.</span>nex <span class="token operator">=</span> nex<span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>capacity<span class="token operator">=</span> capacity        self<span class="token punctuation">.</span>lru <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#  初始化两个节点作为首尾节点，并连接起来</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> LinkedNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> LinkedNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>nex <span class="token operator">=</span> self<span class="token punctuation">.</span>tail        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>lru<span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>lru<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>node_to_tail<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>value        <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>lru<span class="token punctuation">:</span>  <span class="token comment"># to linkednode tail</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>lru<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value            self<span class="token punctuation">.</span>node_to_tail<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lru<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>                        <span class="token comment"># remove head</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>nex            <span class="token keyword">del</span> self<span class="token punctuation">.</span>lru<span class="token punctuation">[</span>node<span class="token punctuation">.</span>key<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>nex<span class="token punctuation">.</span>value<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>nex<span class="token punctuation">.</span>value<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>remove_head_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        node <span class="token operator">=</span> LinkedNode<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">,</span> value<span class="token operator">=</span>value<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lru<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node        self<span class="token punctuation">.</span>add_tail_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">remove_head_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        去除某个节点        """</span>        <span class="token comment"># 开始移除</span>                node_prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev        node_nex <span class="token operator">=</span> node<span class="token punctuation">.</span>nex        node_prev<span class="token punctuation">.</span>nex <span class="token operator">=</span> node_nex        node_nex<span class="token punctuation">.</span>prev <span class="token operator">=</span> node_prev    <span class="token keyword">def</span> <span class="token function">add_tail_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        添加至末尾，此时需要保持尾节点不变        """</span>        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>nex <span class="token operator">=</span> node        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev        node<span class="token punctuation">.</span>nex <span class="token operator">=</span> self<span class="token punctuation">.</span>tail        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">node_to_tail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将任意节点移动到尾部        """</span>        self<span class="token punctuation">.</span>remove_head_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add_tail_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token comment"># Your LRUCache object will be instantiated and called as such:</span><span class="token comment"># obj = LRUCache(capacity)</span><span class="token comment"># param_1 = obj.get(key)</span><span class="token comment"># obj.put(key,value)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="128-最长连续序列"><a href="#128-最长连续序列" class="headerlink" title="128. 最长连续序列"></a><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128. 最长连续序列</a></h2><blockquote><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p></blockquote><ul><li>借助hashmap</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    借助hashmap来实现    """</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        max_len <span class="token operator">=</span> <span class="token number">0</span>        nums_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> nums_set<span class="token punctuation">:</span>            pre_num <span class="token operator">=</span> num <span class="token operator">-</span><span class="token number">1</span>                        <span class="token keyword">if</span> pre_num <span class="token keyword">not</span> <span class="token keyword">in</span> nums_set<span class="token punctuation">:</span>                temp_len <span class="token operator">=</span> <span class="token number">1</span>                cur <span class="token operator">=</span> num                <span class="token keyword">while</span> cur<span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">in</span> nums_set<span class="token punctuation">:</span>                    cur <span class="token operator">+=</span><span class="token number">1</span>                    temp_len <span class="token operator">+=</span> <span class="token number">1</span>                max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>temp_len<span class="token punctuation">,</span> max_len<span class="token punctuation">)</span>                    <span class="token keyword">return</span> max_len        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态规划解法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        hash_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token keyword">not</span> <span class="token keyword">in</span> hash_dict<span class="token punctuation">:</span>                left <span class="token operator">=</span> hash_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                right <span class="token operator">=</span> hash_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                cur_lenght <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">+</span><span class="token number">1</span>                res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cur_lenght<span class="token punctuation">,</span> res<span class="token punctuation">)</span>                hash_dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> cur_lenght                hash_dict<span class="token punctuation">[</span>num<span class="token operator">-</span>left<span class="token punctuation">]</span><span class="token operator">=</span> cur_lenght                hash_dict<span class="token punctuation">[</span>num<span class="token operator">+</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> cur_lenght        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="73-矩阵置零"><a href="#73-矩阵置零" class="headerlink" title="73. 矩阵置零"></a><a href="https://leetcode.cn/problems/set-matrix-zeroes/">73. 矩阵置零</a></h2><blockquote><p>给定一个 <code>*m* x *n*</code> 的矩阵，如果一个元素为 <strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong> 。请使用 <strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 算法<strong>。</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify matrix in-place instead.        """</span>        need_zero_raw <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        need_zero_col <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    need_zero_raw<span class="token punctuation">.</span>add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    need_zero_col<span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> need_zero_raw<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> need_zero_col<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 一种改进方法是用矩阵得第一行和第一列来记录需要置为0得行列，如果某行得第一个元素为0则改行置为0，同理设置列注意这样会改变行列得值，所以要提前判断第一行和第一列是否为0就可以了</div><h2 id="380-O-1-时间插入、删除和获取随机元素"><a href="#380-O-1-时间插入、删除和获取随机元素" class="headerlink" title="380. O(1) 时间插入、删除和获取随机元素"></a><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/">380. O(1) 时间插入、删除和获取随机元素</a></h2><blockquote><p> 实现RandomizedSet 类：</p><p> RandomizedSet() 初始化 RandomizedSet 对象<br> bool insert(int val) 当元素 val 不存在时，向集合中插入该项，并返回 true ；否则，返回 false 。<br> bool remove(int val) 当元素 val 存在时，从集合中移除该项，并返回 true ；否则，返回 false 。<br> int getRandom() 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 相同的概率 被返回。<br> 你必须实现类的所有函数，并满足每个函数的 平均 时间复杂度为 O(1) 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RandomizedSet</span><span class="token punctuation">:</span>    <span class="token comment"># def __init__(self):</span>    <span class="token comment">#     self.data = set()</span>    <span class="token comment"># def insert(self, val: int) -> bool:</span>    <span class="token comment">#     if val not in self.data:</span>    <span class="token comment">#         self.data.add(val)</span>    <span class="token comment">#         return True</span>    <span class="token comment">#     else:</span>    <span class="token comment">#         return False</span>    <span class="token comment"># def remove(self, val: int) -> bool:</span>    <span class="token comment">#     if val in self.data:</span>    <span class="token comment">#         self.data.remove(val)</span>    <span class="token comment">#         return True</span>    <span class="token comment">#     else:</span>    <span class="token comment">#         return False</span>    <span class="token comment"># def getRandom(self) -> int:</span>    <span class="token comment">#     # 此方法list（）时间复杂度是O(n)</span>    <span class="token comment">#     return random.choice(list(self.data))</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>end_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>nums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> val <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>end_index <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">=</span> self<span class="token punctuation">.</span>end_index            self<span class="token punctuation">.</span>nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> val <span class="token keyword">in</span> self<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            index <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            end_num <span class="token operator">=</span> self<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>self<span class="token punctuation">.</span>end_index<span class="token punctuation">]</span>            <span class="token comment"># 不能执行删除， 需要执行交换，将最后一个元素换到index 位置，然后删除最后一个元素</span>            <span class="token comment"># 将end_index    -1</span>            self<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> end_num            self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>end_num<span class="token punctuation">]</span> <span class="token operator">=</span> index            self<span class="token punctuation">.</span>nums<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">del</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>val<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>end_index <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token comment"># Your RandomizedSet object will be instantiated and called as such:</span><span class="token comment"># obj = RandomizedSet()</span><span class="token comment"># param_1 = obj.insert(val)</span><span class="token comment"># param_2 = obj.remove(val)</span><span class="token comment"># param_3 = obj.getRandom()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></h2><blockquote><p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p><p>字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/group-anagrams">https://leetcode.cn/problems/group-anagrams</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        使用hashmap        """</span>        hashmap <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> str_ <span class="token keyword">in</span> strs<span class="token punctuation">:</span>            key<span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>str_<span class="token punctuation">)</span>            key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            hashmap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>str_<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>val <span class="token keyword">for</span> _<span class="token punctuation">,</span>val <span class="token keyword">in</span> hashmap<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="299-猜数字游戏"><a href="#299-猜数字游戏" class="headerlink" title="299. 猜数字游戏"></a><a href="https://leetcode.cn/problems/bulls-and-cows/">299. 猜数字游戏</a></h2><blockquote><p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：</p><p>写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：</p><p>猜测数字中有多少位属于数字和确切位置都猜对了（称为 “Bulls”，公牛），<br>有多少位属于数字猜对了但是位置不对（称为 “Cows”，奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。<br>给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。</p><p>提示的格式为 “xAyB” ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。</p><p>请注意秘密数字和朋友猜测的数字都可能含有重复数字。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/bulls-and-cows">https://leetcode.cn/problems/bulls-and-cows</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getHint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> secret<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> guess<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>        secret_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>        guess_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> s<span class="token punctuation">,</span> g <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> guess<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 公牛</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> g<span class="token punctuation">:</span>                a <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                secret_dict<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                guess_dict<span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 统计母牛得个数</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> guess_dict<span class="token punctuation">:</span>            temp_num <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>guess_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token punctuation">,</span> secret_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            b <span class="token operator">+=</span> temp_num                    <span class="token keyword">return</span> <span class="token string">"&#123;a&#125;A&#123;b&#125;B"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">=</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>以第一个数为起点，与后面得数一次比较，如果比基数大就交换，这样每一趟结束都会将未排序中最大得数放在已排序得开头</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> nums<span class="token keyword">def</span> <span class="token function">bubble_sort2</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exchange <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                exchange <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> exchange<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> nums                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>设定第一个元素得坐标为基准下标，然后用这个元素与无序数组中得元素做比较，找出此时得最小下标</p><p>每一轮循环，都会将无序中得最小元素交换至有序数组得末尾</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        basic <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><blockquote><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><ul><li>方法一： 二分+双指针</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    先用二分查找找到第一个出现得位置，然后找出左右边界    """</span>    <span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># left 代表最左边，right最右边</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span> target<span class="token punctuation">:</span>                left <span class="token operator">=</span> right <span class="token operator">=</span> mid                <span class="token keyword">while</span> left<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    left <span class="token operator">-=</span><span class="token number">1</span>                <span class="token keyword">while</span> right <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    right <span class="token operator">+=</span> <span class="token number">1</span>                 <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二： 二分+分别寻找左右边界</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">searchleft</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">searchright</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> right <span class="token keyword">if</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums <span class="token keyword">or</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span> target <span class="token keyword">or</span> nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> searchleft<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">,</span> searchright<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h2><blockquote><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p><p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array">https://leetcode.cn/problems/search-in-rotated-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">while</span> left <span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token comment">#有序部分</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 再递减序列里</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                      right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment">#  一半升序，一半降序，前半部分>后半部分</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="852-山脉数组的峰顶索引"><a href="#852-山脉数组的峰顶索引" class="headerlink" title="852. 山脉数组的峰顶索引"></a><a href="https://leetcode.cn/problems/peak-index-in-a-mountain-array/">852. 山脉数组的峰顶索引</a></h2><blockquote><p>符合下列属性的数组 arr 称为 山脉数组 ：<br>arr.length &gt;&#x3D; 3<br>存在 i（0 &lt; i &lt; arr.length - 1）使得：<br>arr[0] &lt; arr[1] &lt; … arr[i-1] &lt; arr[i]<br>arr[i] &gt; arr[i+1] &gt; … &gt; arr[arr.length - 1]<br>给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] &lt; arr[1] &lt; … arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; … &gt; arr[arr.length - 1] 的下标 i 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/peak-index-in-a-mountain-array">https://leetcode.cn/problems/peak-index-in-a-mountain-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162. 寻找峰值"></a><a href="https://leetcode.cn/problems/find-peak-element/">162. 寻找峰值</a></h2><blockquote><p>峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</p><p>你可以假设 nums[-1] &#x3D; nums[n] &#x3D; -∞ 。</p><p>你必须实现时间复杂度为 O(log n) 的算法来解决此问题。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/find-peak-element">https://leetcode.cn/problems/find-peak-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    target = nums[mid-1]&lt;numd[mid]> nums[mid+1]    """</span>    <span class="token keyword">def</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>                left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>left <span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278. 第一个错误的版本"></a><a href="https://leetcode.cn/problems/first-bad-version/">278. 第一个错误的版本</a></h2><blockquote><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/first-bad-version">https://leetcode.cn/problems/first-bad-version</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># The isBadVersion API is already defined for you.</span><span class="token comment"># def isBadVersion(version: int) -> bool:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n        <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>                        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            tag1 <span class="token operator">=</span> isBadVersion<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            <span class="token keyword">if</span> tag1<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                    <span class="token keyword">return</span> right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="74-搜索二维矩阵"><a href="#74-搜索二维矩阵" class="headerlink" title="74. 搜索二维矩阵"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix/">74. 搜索二维矩阵</a></h2><blockquote><p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><p>每行中的整数从左到右按升序排列。<br>每行的第一个整数大于前一行的最后一个整数。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/search-a-2d-matrix">https://leetcode.cn/problems/search-a-2d-matrix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230109131318316.png" alt="image-20230109131318316"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment"># TODO 先用二分查找判断在哪一行</span>        top<span class="token punctuation">,</span> buttom <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m        possible_row <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> top<span class="token operator">&lt;=</span>buttom<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>top<span class="token operator">+</span>buttom<span class="token punctuation">)</span><span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">:</span>                buttom <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">:</span>                top <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span>target <span class="token operator">&lt;=</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">or</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                possible_row <span class="token operator">=</span> mid                <span class="token keyword">break</span>        <span class="token comment"># 没有找到合适的区间行，返回false</span>        <span class="token keyword">if</span> possible_row <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment"># TODO 用二分查找是否是在这一行里</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n        row <span class="token operator">=</span> matrix<span class="token punctuation">[</span>possible_row<span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> row<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                right <span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240. 搜索二维矩阵 II"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II</a></h2><blockquote><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/search-a-2d-matrix-ii">https://leetcode.cn/problems/search-a-2d-matrix-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230109134725241.png" alt="image-20230109134725241"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> matrix<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>                <span class="token comment"># 每一行中进行二分查找</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">if</span> row<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">elif</span> row<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根 "></a><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 </a></h2><blockquote><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/sqrtx">https://leetcode.cn/problems/sqrtx</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># x：为正整数   求数平方根 结果向下取整</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x                <span class="token keyword">while</span> left <span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> x <span class="token keyword">and</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;=</span> x <span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;</span> x<span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="540-有序数组中的单一元素"><a href="#540-有序数组中的单一元素" class="headerlink" title="540. 有序数组中的单一元素"></a><a href="https://leetcode.cn/problems/single-element-in-a-sorted-array/">540. 有序数组中的单一元素</a></h2><blockquote><p>给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。</p><p>请你找出并返回只出现一次的那个数。</p><p>你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/single-element-in-a-sorted-array">https://leetcode.cn/problems/single-element-in-a-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    当 \textit&#123;mid&#125;mid 是偶数时，mid + 1 = mid^1；    当 \textit&#123;mid&#125;mid 是奇数时，mid - 1 = mid^1。    """</span>    <span class="token keyword">def</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        low<span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                high <span class="token operator">=</span> mid        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="528-按权重随机选择"><a href="#528-按权重随机选择" class="headerlink" title="528. 按权重随机选择"></a><a href="https://leetcode.cn/problems/random-pick-with-weight/">528. 按权重随机选择</a></h2><blockquote><p>给你一个 下标从 0 开始 的正整数数组 w ，其中 w[i] 代表第 i 个下标的权重。</p><p>请你实现一个函数 pickIndex ，它可以 随机地 从范围 [0, w.length - 1] 内（含 0 和 w.length - 1）选出并返回一个下标。选取下标 i 的 概率 为 w[i] &#x2F; sum(w) 。</p><p>例如，对于 w &#x3D; [1, 3]，挑选下标 0 的概率为 1 &#x2F; (1 + 3) &#x3D; 0.25 （即，25%），而选取下标 1 的概率为 3 &#x2F; (1 + 3) &#x3D; 0.75（即，75%）。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/random-pick-with-weight">https://leetcode.cn/problems/random-pick-with-weight</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230110183654906.png" alt="image-20230110183654906"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">后续补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><p><strong>基础知识：常见双指针算法分为三类，同向（即两个指针都相同一个方向移动），背向（两个指针从相同或者相邻的位置出发，背向移动直到其中一根指针到达边界为止），相向（两个指针从两边出发一起向中间移动直到两个指针相遇）</strong></p><h2 id="背向双指针"><a href="#背向双指针" class="headerlink" title="背向双指针"></a>背向双指针</h2><h3 id="409-最长回文串"><a href="#409-最长回文串" class="headerlink" title="409. 最长回文串"></a><a href="https://leetcode.cn/problems/longest-palindrome/">409. 最长回文串</a></h3><blockquote><p>给定一个包含大写字母和小写字母的字符串 s ，返回 通过这些字母构造成的 最长的回文串 。</p><p>在构造过程中，请注意 区分大小写 。比如 “Aa” 不能当做一个回文字符串。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/longest-palindrome">https://leetcode.cn/problems/longest-palindrome</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230110185049415.png" alt="image-20230110185049415"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        count <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> v <span class="token keyword">in</span> count<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ans <span class="token operator">+=</span> v<span class="token operator">//</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span>            <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">and</span> ans <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                ans <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ans        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a><a href="https://leetcode.cn/problems/valid-palindrome/">125. 验证回文串</a></h2><blockquote><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 回文串 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 s，如果它是 回文串 ，返回 true ；否则，返回 false 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/valid-palindrome">https://leetcode.cn/problems/valid-palindrome</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230110200409992.png" alt="image-20230110200409992"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        ss <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'[a-zA-Z0-9]'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>                left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> ss<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ss<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h2><blockquote><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><h3 id="前中后序遍历"><a href="#前中后序遍历" class="headerlink" title="前中后序遍历"></a>前中后序遍历</h3><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h1 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h1><h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><h1 id="深度优先和广度优先"><a href="#深度优先和广度优先" class="headerlink" title="深度优先和广度优先"></a>深度优先和广度优先</h1><h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="/posts/20687.html"/>
      <url>/posts/20687.html</url>
      
        <content type="html"><![CDATA[<h1 id="http必知必会"><a href="#http必知必会" class="headerlink" title="http必知必会"></a>http必知必会</h1><h1 id="http-请求方式"><a href="#http-请求方式" class="headerlink" title="http 请求方式"></a>http 请求方式</h1><ul><li><p>get: 请求服务器的某些资源</p></li><li><p>post: 向服务器提交某些资源</p></li><li><p>put; 用于新增资源</p></li><li><p>patch: 对资源进行部分修改</p></li><li><p>delete: 删除资源</p></li><li><p>head: 请求资源的头部信息， 获取于post或者get相同的头信息，  该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源 </p></li><li><p>opstions:  检测资源支持的通信选项， 比如：‘／user’路由支持哪些方法：get、post、delete</p></li><li><p>trace: 回显服务器收到的请求，一般用作测试或者网络诊断</p></li></ul><h1 id="GET-和POST有什么区别"><a href="#GET-和POST有什么区别" class="headerlink" title="GET 和POST有什么区别"></a>GET 和POST有什么区别</h1><ul><li>数据传输方式不同， get使用url传输数据，而post的数据一般通过请求体传输</li><li>安全性不同：post数据在请求体内，有一定的安全性保障，而get在url， 很容易查到数据信息</li><li>数据类型不同：get只是永续ascii码，post没有限制</li><li>get请求无害： 刷新，后退等操作，post可能会重复提交表单</li><li>get传参是，参数的数据量小于post</li></ul><h1 id="什么是无状态协议，-http是无状态协议吗，怎么解决"><a href="#什么是无状态协议，-http是无状态协议吗，怎么解决" class="headerlink" title="什么是无状态协议， http是无状态协议吗，怎么解决"></a>什么是无状态协议， http是无状态协议吗，怎么解决</h1><ul><li>无状态协议是指对会话没有记忆功能。缺少状态意味着后面处理需要前面请求到的状态信息。解决办法：cookie, session 和jwt</li></ul><h1 id="udp和tcp的区别"><a href="#udp和tcp的区别" class="headerlink" title="udp和tcp的区别"></a>udp和tcp的区别</h1><ul><li><p>udp 是什么</p><blockquote><p>udp是用户数据报协议。他不需要握手操作，从而加快了通信速度，允许网络上的其他主机在同意之前传输数据</p></blockquote></li><li><p>udp的特点</p><ul><li>能够支持容忍数据包丢失的带宽密集型应用程序</li><li>具有低延迟的特点</li><li>能够发送大量的数据包</li><li>能够允许dns查找，dns是建立在udp上的应用层协议</li></ul></li><li><p>tcp 是什么</p><blockquote><p>tco传输控制协议，能够帮助你确定计算机连接到internet以及他们之间进行数据传输，通过三次握手来启动和确认tcp的连接过程</p></blockquote></li><li><p>tcp 的主要特点</p><ul><li>能够确保连接的确立和数据包的发送</li><li>支持错误重传</li><li>提供错误校验</li></ul></li><li><p>tcp 和udp的区别</p><ul><li>tcp 是面向连接的协议，udp是无连接的协议</li><li>tcp在发送数据前建立连接，然后再发送数据，udp 无序建立连接就可以直接发送数据</li><li>tcp会按照特定顺序重新排列数据包。udp数据包没有固定顺序，所有的数据包都是相互独立的</li><li>tcp的传输速度比较慢，udp传输会更快</li><li>tcp的头部有20字节, udp只有8字节</li><li>tcp是重量级的，在发送任何用户数据前，tcp都需要三次握手确认连接，udp是轻量级的，没有跟踪连接，消息排序等功能</li><li>tcp 能够进行错误校验，并且能进行错误恢复， udp 也会进行错误检查，但是会丢弃错误的数据包</li><li>tcp 有发送确认，udp没有发送确认</li><li>tcp是可靠的，能确保数据发送到目标地址， udp不能保证</li></ul></li></ul><h1 id="http中的302状体"><a href="#http中的302状体" class="headerlink" title="http中的302状体"></a>http中的302状体</h1><ul><li>302表示重定向，这种情况下，返回的头部信息中会包含location字段，内容是重定向的url</li></ul><h1 id="http-协议由什么组成"><a href="#http-协议由什么组成" class="headerlink" title="http 协议由什么组成"></a>http 协议由什么组成</h1><ul><li>起始行（start line）、头部（header）和主体（body）三部分组成，起始行是对报文进行的描述，头部包含报文的一些属性，主体包含报文的数据</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1668574410255.png" alt="1668574410255"></p><h1 id="cookie-和session的区别"><a href="#cookie-和session的区别" class="headerlink" title="cookie 和session的区别"></a>cookie 和session的区别</h1><blockquote><p>cookie 保存在浏览器上，session保存在浏览器上</p><p>session 中保存的是对象，cookie保存的是字符串</p><p>cookie的安全性一般，在安全性第一的原则下，优先选择session</p><p>单个cookie保存的数据不能超过4k</p><p>session可以放在文件内存或者数据库中</p><p>session中运行时依赖sessionId, 而sessionId时存在cookie中，也就是说，如果浏览器禁用了cookie，session也会失效（但是可以通过其他方式实现，比如在url中传递sessionId）</p></blockquote><h1 id="http协议有什么特点"><a href="#http协议有什么特点" class="headerlink" title="http协议有什么特点"></a>http协议有什么特点</h1><ul><li>无状态</li><li>c&#x2F;s模型</li><li>简单快速</li><li>灵活：可以传输任何类型的数据</li></ul><h1 id="http和https有什么区别"><a href="#http和https有什么区别" class="headerlink" title="http和https有什么区别"></a>http和https有什么区别</h1><ul><li>https有ca证书，http一般没有</li><li>http时超文本传输协议，信息时明文传输的，http则是具有安全性的ssl加密传输</li><li>http默认端口时80， https默认端口时443</li></ul><h1 id="http中的keep-alive是用来干什么的"><a href="#http中的keep-alive是用来干什么的" class="headerlink" title="http中的keep-alive是用来干什么的"></a>http中的keep-alive是用来干什么的</h1><ul><li>在早期的http1.0中，每次http请求都是需要创建一个连接，而创建连接的过程需要消耗资源和时间，为了减少资源消耗，缩短响应时间，就需要重用连接，在后来，引入了重用连接机制，就是在http请求头中加入了connection：keep-alive告诉对方这个请求响应完成后不要关闭，下一次继续使用</li><li>keep-alive的优点：<ul><li>减少cpu和内存的使用</li><li>请求和应答之间管线化</li><li>降低拥塞控制（tcp连接减少了）</li><li>减少了后续的请求延迟（无序在进行握手）</li></ul></li></ul><h1 id="http-三次握手和四次挥手"><a href="#http-三次握手和四次挥手" class="headerlink" title="http 三次握手和四次挥手"></a>http 三次握手和四次挥手</h1><ul><li><p>三次握手过程</p><blockquote><ol><li>客户端向服务端发送syn报文， 同时发送自己的初始化序列号isn，此时客户端处于syn_send</li><li>服务端收到后然会syn报文，发送自己的初始化序列号，同时返回ack，ack的值为isn +1, syn-revd</li><li>客户端收到服务端返回的syn报文后，会返回ack，值为服务端色isn+1,此时客户端处于established状态</li><li>服务端收到后后也处于established状态</li></ol></blockquote></li><li><p>四次挥手过程</p><blockquote><ol><li>第一次挥手：客户端发送一个fin报文，报文会指定一个序列号，此时客户端处于fin_wait状态</li><li>第二次挥手：服务端收到fin之后，会发送ack报文，值为isn+1，表明收到客户端的报文，此时客户端处于close_waiting状态</li><li>第三次挥手：服务端此时也想断开了，和客户端一样，发送fin报文，并且指定序列号，此时服务端处于last-ack状态</li><li>第四次挥手：客户端收到fin之后，一样会发送一个ack报文作为应答，且把服务端的序列号（isn） +1作文自己的ack，此时客户端处于time_wait状态，需要过一阵等服务端收到自己的ack报文后进入close状态</li><li>服务端收到ack报文后，处于close状态</li></ol></blockquote></li></ul><h1 id="请求转发和重定向的区别"><a href="#请求转发和重定向的区别" class="headerlink" title="请求转发和重定向的区别"></a>请求转发和重定向的区别</h1><blockquote><p>转发过程：</p><p>客户端浏览器发出请求—&gt; 服务端接收请求—&gt;调用内部方法在容器内部完成请求处理和转发过程—&gt; 将目标资源发送给客户端 转发的路径必须是同一web容器下的url，不能转向到其他web路径上，中间传递的是自己的容器内request, 在客户端浏览器路径依然显示的是自己第一次访问的路径，也就是说客户无感知。转发行为浏览器只是做了一次请求</p><p>重定向过程：</p><p>客户但浏览器发送http请求—&gt;服务端接受请求—&gt; 返回302状态码以及在头部添加location字段，表明重定向的url—&gt; 浏览器发现响应式302状态，则自动发送一个新的http请求，请求url是location地址—&gt;服务端依据请求返回数据。这里的location可以重定向到任何地址，在浏览器的地址栏可以看到请求地址发生了变化，重定向行为浏览器至少发生了两次请求</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio微服务</title>
      <link href="/posts/50921.html"/>
      <url>/posts/50921.html</url>
      
        <content type="html"><![CDATA[<h1 id="istio能做什么"><a href="#istio能做什么" class="headerlink" title="istio能做什么"></a>istio能做什么</h1><ul><li>连接： 智能控制服务之间的调用流量， 实现灰度升级，ab测试和蓝绿部署等</li><li>安全加固： 自动为服务之间的调用提供认认证、授权和加密</li><li>控制：应用用户定义的policy,保证资源在消费者中公平分配</li><li>观察：查看服务运行期间的各种数据，比如日志，监控，了解服务的运行情况</li></ul><p>istios是servicemesh 的产品化落地，可以通过现有的服务器新增部署边车代理（sidecar proxy）,应用程序不用改代码，就能实现以下基本功能：</p><ul><li><p>帮助微服务之间建立连接</p></li><li><p>帮助微服务分层解耦，解耦后的proxy 代理层能专注于提供基础架构能力</p><ul><li><p>服务发现</p><ul><li><blockquote><p>服务注册 将服务注册到服务中心上</p><p>服务发现 从注册中心获取服务信息</p></blockquote></li></ul></li><li><p>负载均衡</p><ul><li><blockquote><p>流量分流。 常见的负载均衡（nginx, haproxy, lvs）</p></blockquote></li></ul></li><li><p>故障恢复</p><ul><li><blockquote><p>具备出现故障自动恢复的功能</p></blockquote></li></ul></li><li><p>服务度量</p><ul><li><blockquote><p>http:</p><p>请求个数</p><p>请求持续时间</p><p>请求大小</p><p>响应大小</p><p>tcp:</p><p>tcp 发送字节数</p><p>tcp 接收字节数</p><p>tcp 打开连接数</p><p>tcp 关闭连接数</p></blockquote></li></ul></li><li><p>服务监控</p></li><li><p>A&#x2F;B测试</p></li><li><p>灰度发布</p><ul><li><blockquote><p>通过负载均衡等策略，先将少量的流量导入新版本，然后通过监控等确认金丝雀没有问题后，进行服务扩容，最终将老版本全部下线，将所有流量打入新版本</p></blockquote></li></ul></li><li><p>限流限速</p></li><li><p>访问控制</p></li><li><p>身份认证</p></li></ul></li></ul><h1 id="istio-核心特性"><a href="#istio-核心特性" class="headerlink" title="istio 核心特性"></a>istio 核心特性</h1><ul><li><strong>流控（断路器 超时， 重试，多路由规则，ab测试， 灰度发布）</strong></li><li>安全（加密，身份认证等）</li><li><strong>可观察（追踪，监控数据收集，）</strong></li><li>平台无关性</li><li>集成与定制</li></ul><h2 id="服务熔断和降级-断路器"><a href="#服务熔断和降级-断路器" class="headerlink" title="服务熔断和降级- 断路器"></a>服务熔断和降级- 断路器</h2><ul><li>下游的服务因为某种原因突然变得不可用或响应过慢，上游服务为了保证自己整体服务的可用性</li><li>不再继续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转则恢复调用</li></ul><h2 id="服务熔断的原理"><a href="#服务熔断的原理" class="headerlink" title="服务熔断的原理"></a>服务熔断的原理</h2><ul><li>当远程服务被调用时，断路器将监视这个调用，如调用时间太长，断路器将会介入并中断调用。</li><li>此外，断路器将监视所有对远程资源的调用，如对某一个远程资源的调用失败次数足够多</li><li>那么断路器会出现并采取快速失败，阻止将来调用此远程资源的请求.</li><li>断路器模式的状态图</li></ul><p><img src="/1667998383076.png" alt="1667998383076"></p><ul><li>最开始处于closed状态，一旦检测到错误到达一定阈值，便转为open状态；</li><li>这时候会有个 reset timeout，到了这个时间了，会转移到half open状态，尝试放行一部分请求到后端</li><li>一旦检测成功便回归到closed状态，即恢复服务</li></ul><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p><strong>服务熔断是服务降级的一种方式</strong></p><ul><li>当下游的服务因为某种原因响应过慢，下游服务主动停掉一些不太重要的业务，释放出服务器资源，增加响应速度！</li><li>二、当下游的服务因为某种原因不可用，上游主动调用本地的一些降级逻辑，避免卡顿，迅速返回给用户！</li></ul><p><strong>在实际工作中，采用以下的方式来完成降级工作</strong></p><ul><li>梳理出核心业务和非核心业务流程</li><li>在非核心业务上增加开关， 一旦发现系统扛不住，关掉开关，结束这些次要流程</li><li>一个微服务架构下有很多功能，需要区分核心功能和非核心功能</li><li>然后次要功能加上开关，需要降级的时候，把次要功能关了吧 </li><li>降低一致性了，即将核心业务流程的同步改异步，将强一致性改最终一致性</li></ul><h2 id="服务超时"><a href="#服务超时" class="headerlink" title="服务超时"></a>服务超时</h2><h2 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h2><h2 id="多路由规则"><a href="#多路由规则" class="headerlink" title="多路由规则"></a>多路由规则</h2><ol><li>http重定向</li><li>http重写</li><li>http重试</li><li>http故障注入</li><li>http 跨域资源共享</li></ol><h1 id="istio-架构"><a href="#istio-架构" class="headerlink" title="istio 架构"></a>istio 架构</h1><h2 id="流量治理"><a href="#流量治理" class="headerlink" title="流量治理"></a>流量治理</h2><ul><li><p>在控制平面会经过如下流程</p><ul><li>管理员通过命令行或者api创建流量规则</li><li>pilot将规则转化为envoy的标准格式</li><li>polit 将规则下发给envoy</li></ul></li><li><p>在数据平面会有如下流程：</p><ul><li>envoy拦截pod上本地容器的inbound和outbound流量</li><li>在流量经过envoy时对流量进行治理</li></ul></li></ul><p><img src="/1668052000960.png" alt="1668052000960"></p><h2 id="数据平面和控制平面"><a href="#数据平面和控制平面" class="headerlink" title="数据平面和控制平面"></a>数据平面和控制平面</h2><ul><li>数据平面<ul><li>数据平面时有一组sidecar方式部署的只能代理（envoy+sidecar）组成</li><li>sidecar控制微服务之间的所有网络通信，管理入口和出口流量</li><li>sidecar一般和业务容器绑定在一起（在k8s中以自动注入的方式注入到企业pod中）来劫持业务 容器的流量，并且接受控制平面的的控制，同时向控制面输出日志，追踪以及监控数据等</li><li>envoy 和pilot打包在同一个镜像中，即sidecar proxy</li></ul></li><li>控制平面<ul><li>负责管理和管理和配置代理</li><li>控制平面的核心，管理istio的所有功能，主要包括istod (pilot,mixer,ciadel等服务组件的集成)</li></ul></li></ul><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p> <img src="/image-20220909112116832.a1bd212f.png" alt="img"> </p><h3 id="特性描述"><a href="#特性描述" class="headerlink" title="特性描述"></a>特性描述</h3><ol><li><p>自动注入</p><ul><li>在创建应用程序时自动注入sidecar代理envoy程序</li><li>在kubernetes中创建pod的时候，kube-apiserver 调用控制面组件sidecar-injector服务，自动修改程序的描述信息并注入sidecar</li><li>真正创建pod时，在创建业务容器pod中同时创建sidecar容器</li></ul></li><li><p>流量拦截</p><ul><li>在pod初始化时设置iptable流量规则，基于配置的iptable规则拦截业务容器的进出口流量到sidecar上</li><li>应用程序无感知</li><li>上图中，流出 frontend 服务的流量会被 frontend 服务侧的 Envoy 拦截，而当流量到达 forecast容器时，Inbound 流量被 forecast 服务侧的 Envoy 拦截</li></ul></li><li><p>服务发现</p><ul><li>务发起方的 Envoy 调用控制面组件 Pilot 的服务发现接口获取目标服务的实例列表 </li><li>上图中，frontend 服务侧的 Envoy 通过 Pilot 的服务发现接口得到 forecast 服务各个实例的地址</li></ul></li><li><p>负载均衡</p><ul><li>服务发起方的 Envoy 根据配置的负载均衡策略选择服务实例，并连接对应的实例地址。</li><li>上图中，数据面的各个 Envoy 从 Pilot 中获取 forecast 服务的负载均衡配置，并执行负载均衡动作。</li></ul></li><li><p>流量治理</p><ul><li>envoy 从 Pilot 中获取配置的流量规则，在拦截到 Inbound 流量和 Outbound 流量时执行治理逻辑。</li><li>上图中， frontend 服务侧的 Envoy 从 Pilot 中获取流量治理规则，并根据该流量治理规则将不同特征的流量分发到 forecast 服务的 v1 或 v2 版本。</li></ul></li><li><p>访问安全</p><ul><li>在服务间访问时通过双方的 Envoy 进行双向认证和通道加密，并基于服务的身份进行授权管理。</li><li>上图中，Pilot 下发安全相关配置，在 frontend 服务和 forecast 服务的 Envoy 上自动加载证书和密钥来实现双向认证</li><li>其中的证书和密钥由另一个管理面组件 Citadel 维护。</li></ul></li><li><p>服务监测</p><ul><li>在服务间通信时，通信双方的 Envoy 都会连接管理面组件 Mixer 上报访问数据，并通过Mixer 将数据转发给对应的监控后端。</li><li>上图中，frontend 服务对 forecast 服务的访问监控指标、日志和调用链都可以通过这种方式收集到对应的监控后端。</li></ul></li><li><p>策略执行</p><ul><li>在进行服务访问时，通过 Mixer 连接后端服务来控制服务间的访问，判断对访问是放行还是拒绝。</li><li>上图中，Mixer 后端可以对接一个限流服务对从 frontend 服务到 forecast 服务的访问进行速率控制等操作。</li></ul></li><li><p>外部访问</p><ul><li><p>在网格的入口处有一个 Envoy 扮演入口网关的角 色。</p></li><li><p>上图中，外部服务通过 Gateway 访问入口服务 frontend，对 frontend 服务的负载均衡和一些流量治理策略都在这个 Gateway 上执行</p></li></ul></li></ol><h3 id="istio-组件作用"><a href="#istio-组件作用" class="headerlink" title="istio 组件作用"></a>istio 组件作用</h3><h4 id="pilot组件"><a href="#pilot组件" class="headerlink" title="pilot组件"></a>pilot组件</h4><ul><li><p>pilot是主要的控制组件，下发指令控制客户但，在整个系统中，pilot完成以下任务</p><ul><li>从kubernetes或者其他平台的注册中心或者服务信息，完成服务发现过程</li><li>读取istio的各项控制配置，在进行转换之后  ，将其发送给数据面执行</li></ul></li><li><p>pilot 将配置内容发送给数据面的envoy，envoy更具pilot指令，将路由，服务，监听，集群等定义信息转换为本地配置，完成控制行为的落地</p><ul><li>pilot为envoy提供服务发现</li><li>提供流量管理功能（a&#x2F;b测试，金丝雀发布）以及弹性功能（超时，重试，熔断等）</li><li>生成envoy配置</li><li>启动envoy</li><li>监控并且管理envoy的运行状况, 比如envoy出错时， pilot-agent负责重启，或者envoy配置变更后，pilot 负责重启</li></ul></li><li><p>pilot-agent是什么</p><ul><li>Envoy 不直接跟 k8s 交互，通过 pilot-agent 管理的</li><li>Pilot-agent 进程根据 K8S APIserver 中的配置信息生成 Envoy 的配置文件，并负责启动 Envoy 进程。</li><li>Envoy 由 Pilot-agent 进程启动，启动后，Envoy 读取 Pilot-agent 为它生成的配置文件</li><li>然后根据该文件的配置获取到Pilot 的地址，通过数据面从 pilot 拉取动态配置信息</li><li>包括路由(route），监听器(1istener），服务集群(cluster）和服务端点 (endpoint)</li></ul></li></ul><h4 id="envoy组件"><a href="#envoy组件" class="headerlink" title="envoy组件"></a>envoy组件</h4><ol><li>envoy是什么 <ul><li>envoy是c++开发的高性能代理，用于协调网络中所有服务的入口和出口流量</li><li>envoy有许多强大的功能：动态服务发现、负载均衡、tls终端、http\grpc代理、</li><li>断路器、健康检查、流量拆分灰度发布、故障注入</li></ul></li><li>istio 与envoy的关系<ul><li>envoy 和serviceA同属于一个pod， 共享网络和命名空间，代理podA的流量</li><li>将流量按照请求规则作用在serviceA中</li></ul></li></ol><p><img src="/1668054370581.png" alt="1668054370581"></p><h4 id="Citadel"><a href="#Citadel" class="headerlink" title="Citadel"></a>Citadel</h4><ul><li>负责处理系统上不同服务之间的 TLS 通信。</li><li>Citadel 充当证书颁发机构(CA)，并生成证书以允许在数据平面中进行安全的 mTLS 通信。</li><li>Citadel 是 Istio 的核心安全组件，提供了自动生 成、分发、轮换与撤销密钥和证书功能。</li><li>Citadel 一直监听 Kube- apiserver，以 Secret 的形式为每个服务都生成证书密钥，并在 Pod 创建时挂载到 Pod 上</li><li>代理容器使用这些文件来做服务身份认证，进而代 理两端服务实现双向 TLS 认证、通道加密、访问授权等安全功能</li><li>如图 所示，frontend 服 务对 forecast 服务的访问用到了HTTP 方式，通过配置即可对服务增加认证功能</li><li>双方的 Envoy 会建立双向认证的 TLS 通道，从而在服务间启用双向认证的 HTTPS</li></ul><p><img src="/image-20220909142205117.2d6c0e8a.png" alt="img"></p><h4 id="Galley"><a href="#Galley" class="headerlink" title="Galley"></a>Galley</h4><ul><li>Galley 是 istio 的配置验证、提取、处理和分发的组件。</li><li>Galley 是提供配置管理的服务。实现原理是通过 k8s 提供的 ValidatingWebhook 对配置进行验证。</li><li>Galley 使 Istio 可以与 Kubernetes 之外的其他环境一起工作，因为它可以将不同的配置数据转换为Istio 可以理解的通用格式。</li></ul><h4 id="Ingressgateway"><a href="#Ingressgateway" class="headerlink" title="Ingressgateway"></a>Ingressgateway</h4><ul><li>ingressgateway就是入口处的gateway， 从网格外部访问网格内的服务就是通过这个gateway进行的</li><li>istio-ingressgateway是一个loadblance类型的service， 不同于其他的服务组件只有一两个端口</li><li>istio-ingressgateway 开放了一组端口，这些就是网格内服务的外部访问端口</li><li>如图所示，网格入口网关的负载和网格内的sidecar是同样的执行流程</li><li>也和内部的其他sidecar一样，通过pilot处接受流量规则</li><li>**网关配置应用于在网格边缘运行的独立 Envoy 代理<code>，</code>而不是与服务工作负载一起运行的 Sidecar Envoy 代理&#96; **</li></ul><p><img src="/1668055016859.png" alt="1668055016859"></p><h4 id="Sidecar-injector"><a href="#Sidecar-injector" class="headerlink" title="Sidecar-injector"></a>Sidecar-injector</h4><ul><li>Sidecar-injector 是负责自动注入的组件，只要开启了自动注 入，在 Pod 创建时就会自动调用istio-sidecar-injector 向 Pod 中注入 Sidecar 容器。</li><li>在 Kubernetes 环境下，根据自动注入配置，Kube-apiserver 在拦截到 Pod 创建的请求时</li><li>会调用自动注入服务 istio-sidecar-injector 生成 Sidecar 容器的描述并将其插入原 Pod 的定义中</li><li>这样，在创建的 Pod 内除了包括业务容器，还包括 Sidecar 容器，这个注入过程对用户透明。</li></ul><h1 id="ingress部署nginx"><a href="#ingress部署nginx" class="headerlink" title="# ingress部署nginx"></a># ingress部署nginx</h1><h2 id="入口网关"><a href="#入口网关" class="headerlink" title="入口网关"></a>入口网关</h2><ul><li>入口网关（ingress geteway）时istis的重要资源之一，时用于管理网格边缘入站的流量</li><li>通过入口网关可以很轻松的将网格内部的服务暴漏到外部提供访问</li><li>*<em>网关配置应用在网格边缘独立运行的envoy代理，而不是与服务工作负载一起运行的sidecar envoy代理</em></li><li>所以我们配置的gateway资源指代的时下图中的2istio-ingressgateway</li></ul><p><img src="/1668222997922.png" alt="1668222997922"></p><h2 id="nginx-gateway-yaml"><a href="#nginx-gateway-yaml" class="headerlink" title="nginx-gateway.yaml"></a>nginx-gateway.yaml</h2><blockquote><p>通过命令访问 curl -H “Host: nginx.gateway.com” <a href="http://ingressgateway:nodeport/">http://ingressgateway:nodeport/</a> </p></blockquote><ul><li>istio-ingressgateway 就是小区的大门（唯一的大门），所有进入的流量都需要经过 </li><li>ingressgateway 相当于路标引导去到A B C D的一栋建筑里面，分开域名去导流，</li><li>virtualservice 就像到建筑里的电梯一样，按照不同的楼层进行管理路由的作用</li><li>destinationrule 到达具体的楼层后按照不同的门房号 1 2 3 4 进入到真正的屋里去</li></ul><blockquote><p>istio安装后会有下面三个服务</p><p><code>istio-egressgateway</code> : 管理进入的流量</p><p><code>istio-ingressgateway</code> : 管理出去的流量</p><p>istiod</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">piVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> Gateway  <span class="token comment"># ② nginx-gw 是 ingressgateway</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>gw <span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> istio<span class="token punctuation">-</span>ingressgateway  <span class="token comment"># ① istio-ingressgateway 是默认已经创建好的istio网关控制器</span>                               <span class="token comment"># 将 ingressgateway（nginx-gw）关联到 网关 istio-ingressgateway</span>  <span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span>      <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> HTTP    <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> nginx.test.com<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.istio.io/v1alpha3<span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService  <span class="token comment"># ③ virtualservice </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>vs<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> nginx.test.com  <span class="token key atrule">gateways</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> nginx<span class="token punctuation">-</span>gw  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>svc<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 25%      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 25%    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'nginx:latest'</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio实现金丝雀发布</title>
      <link href="/posts/51490.html"/>
      <url>/posts/51490.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-istio实现灰度发布"><a href="#1-istio实现灰度发布" class="headerlink" title="1 istio实现灰度发布"></a>1 istio实现灰度发布</h1><h2 id="1-1-什么是灰度发布"><a href="#1-1-什么是灰度发布" class="headerlink" title="1.1 什么是灰度发布"></a>1.1 什么是灰度发布</h2><ul><li>灰度发布也叫金丝雀部署 ，是指通过控制流量的比例，实现新老版本的逐步更替。<br>比如对于服务 A 有 version1、 version2 两个版本 ， 当前两个版本同时部署，但是 version1 比例<br>90% ，version2 比例 10% ，看运行效果，如果效果好逐步调整流量占比 80～20 ，70～<br>30 ·····10～90 ，0，100 ，最终 version1 版本下线。</li></ul><h2 id="1-2-灰度发布的特点"><a href="#1-2-灰度发布的特点" class="headerlink" title="1.2 灰度发布的特点"></a>1.2 灰度发布的特点</h2><ul><li><p>新老版本共存</p></li><li><p>可以实时根据反馈动态调整占比</p></li><li><p>理论上不存在服务完全宕机的情况</p></li><li><p>适合于服务的平滑升级与动态更新</p></li></ul><h2 id="1-3-使用istio-实现金丝雀发布"><a href="#1-3-使用istio-实现金丝雀发布" class="headerlink" title="1.3 使用istio 实现金丝雀发布"></a>1.3 使用istio 实现金丝雀发布</h2><pre class="line-numbers language-none"><code class="language-none">docker load -i canary-v2.tar.gzdocker load -i canary-v1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>创建金丝雀服务 </p></li><li><pre><code>cat deployment.yaml，内容如下： <pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;yamlapiVersion: apps&#x2F;v1 kind: Deployment metadata:  name: appv1  labels:  app: v1 spec:  replicas: 1  selector:  matchLabels:  app: v1  apply: canary  template:  metadata:  labels:  app: v1  apply: canary  spec:  containers:  - name: nginx  image: xianchao&#x2F;canary:v1  ports:  - containerPort: 80 --- apiVersion: apps&#x2F;v1 kind: Deployment metadata:  name: appv2  labels:  app: v2 spec:  replicas: 1  selector:  matchLabels:  app: v2  apply: canary  template:  metadata:  labels:  app: v2  apply: canary  spec:  containers:  - name: nginx  image: xianchao&#x2F;canary:v2  ports:  - containerPort: 80    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>更新： </p></li><li><pre><code class="sh">kubectl apply -f deployment.yaml <pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;sh  # 创建 service   cat service.yaml 文件，内容如下： <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="yaml">apiVersion: v1 kind: Service metadata:  name: canary  labels:  apply: canary spec:  selector:  apply: canary  ports:  - protocol: TCP  port: 80  targetPort: 80  <pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;sh  # 更新 service.yaml 文件   kubectl apply -f service.yaml <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="sh"># 创建 gateway cat gateway.yaml 文件，内容如下： <pre class="line-numbers language-none"><code class="language-none">  - &#96;&#96;&#96;yaml  apiVersion: networking.istio.io&#x2F;v1beta1   kind: Gateway   metadata:    name: canary-gateway   spec:    selector:    istio: ingressgateway    servers:    - port:    number: 80    name: http    protocol: HTTP    hosts:   - &quot;*&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="sh"># 更新 gateway.yaml kubectl apply -f gateway.yaml <pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;sh  # 创建 virtualservice   cat virtual.yaml，内容如下： <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="yaml">apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata:  name: canary spec:  hosts:  - &quot;*&quot;  gateways:  - canary-gateway  http:  - route:  - destination:  host: canary.default.svc.cluster.local  subset: v1  weight: 90  - destination:  host: canary.default.svc.cluster.local  subset: v2  weight: 10 --- apiVersion: networking.istio.io/v1beta1 kind: DestinationRule metadata:  name: canary spec:  host: canary.default.svc.cluster.local  subsets:  - name: v1  labels:  app: v1  - name: v2  labels:  app: v2 <pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;sh  # 更新 virtual.yaml 文件   kubectl apply -f virtual.yaml      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="sh"># 获取 Ingress_port: kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;&#123;.spec.ports[?(@.name==&quot;http2&quot;)].nodePort&#125;&#39;  </code></pre></li><li><p>显示结果是 30871<br>验证金丝雀发布效果：<br>for i in <code>seq 1 100</code>; do curl 192.168.40.180:30871;done &gt; 1.txt<br>打开 1.txt 可以看到结果有 90 次出现 v1，10 次出现 canary-v2,符合我们预先设计的流量走向。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio部署微服务</title>
      <link href="/posts/22626.html"/>
      <url>/posts/22626.html</url>
      
        <content type="html"><![CDATA[<h1 id="istio部署微服务"><a href="#istio部署微服务" class="headerlink" title="istio部署微服务"></a>istio部署微服务</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>该项目由四个微服务构成，这个应用模仿在线书店的一个分类，显示一本书的信息</li><li>页面上会显示一本书的描述，书籍的细节，以及关于这本书的评论</li><li>Bookinfo应用分为四个单独的微服务<ul><li>productpage 这个服务会调用detail和reviews两个微服务，用来生成页面</li><li>detail这个微服务中包含了书籍的信息</li><li>reviews这个微服务包含了书籍相关的评论，他还会调用ratings微服务</li><li>ratings这个微服务包含了由书籍组成的评级信息</li></ul></li><li>reviews这个微服务有三个版本<ul><li>v1版本不会调用ratings服务</li><li>v2版本调用ratings服务，并使用1-5个黑色星形来进行评级</li><li>v3版本调用ratings服务，并使用1-5个红色星形来进行评级</li></ul></li></ul><h2 id="注入envoy-sidecar"><a href="#注入envoy-sidecar" class="headerlink" title="注入envoy sidecar"></a>注入envoy sidecar</h2><ol><li><p>架构说明</p><ul><li>要在istio中运行这以应用，无序对自身做出任何改变</li><li>只要简单的在istio环境中对服务进行配置和运行，具体一点就是把envoy sidecar 注入到每个服务中</li><li>所有的微服务都和envoy sidecar集成在一起，被集成服务的所有流量都被envoy sidecar劫持</li><li>这样就为外部控制准备了所需要的hook,然后就可以利用istio控制平面为应用提供服务路由、遥测数据收集以及策略实施功能</li></ul><p><img src="/istio%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1/1668224234009.png" alt="1668224234009"></p></li><li><p>打标签注入</p><ul><li><p>进入istio目录</p></li><li><p>istio默认自动注入sidecar，需要为default命名空间打上标签istio-injection&#x3D;enable</p></li><li><p>打完标签后，default命名空间的所有pod都会自动注入sidecar代理</p></li><li><pre><code>kubectl label namespace default istio-injection=enabled <pre class="line-numbers language-none"><code class="language-none">  -  使用kubectl部署应用- 上面的命令会启动全部的四个服务，其中也包括了reviews服务的三个版本（v1, v2,v3）- &#96;&#96;&#96;sh  cd istio-1.10.1   kubectl apply -f samples&#x2F;bookinfo&#x2F;platform&#x2F;kube&#x2F;bookinfo.yaml   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li><li><p>istio-init和istio-proxy</p><ul><li><p>这个时候再去看下新的pod信息，已经被自动注入了以下两个容器：istio-proxy、istio-init</p></li><li><p>istio-init</p><ul><li>作用是配置iptables规则，将出入站的流量交给istio-proxy代理</li><li>istio-init 容器会在应用容器启动之前运行，并且执行完成后就退出了，通常用来完成一些初始化任务</li></ul></li><li><p>istio-proxy</p><ul><li><p>真正的sidecar, 基于envoy 实现</p></li><li><p>istio-proxy是如何获取应用容器的入站和出站流量的？答案就在istio-init这个容器的iptable中</p></li><li><p>iptable中会将出入流量重定向到istio-proxy容器对应的端口</p></li><li><pre><code class="sh">-p 15001 表示出站流量被 iptable 重定向到 Envoy 的15001 端口-z 15006 表示入站流量被 iptable 重定向到 Envoy 的15006 端口-u 1337 用于排除用户ID 为1337 即 istio-proxy 自身的流量<pre class="line-numbers language-none"><code class="language-none">     ![1668224937623](istio部署微服务&#x2F;1668224937623.png)# 部署服务## bookinfo.yaml&gt; 官方地址：&gt;&gt; - https:&#x2F;&#x2F;istio.io&#x2F;latest&#x2F;docs&#x2F;examples&#x2F;bookinfo&#x2F;&gt; - https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.15&#x2F;samples&#x2F;bookinfo&#x2F;platform&#x2F;kube&#x2F;bookinfo.yaml1. detail书籍信息&#96;&#96;&#96;yaml################################################################################################### Details service##################################################################################################apiVersion: v1kind: Service   # Service本质就是一个LB负载均衡器metadata:  name: details  labels:    app: details    service: detailsspec:  ports:  - port: 9080    name: http  selector:    app: details---apiVersion: v1kind: ServiceAccount  # ServiceAccount给pod里面的进程使用，为pod提供必要的身份认证metadata:  name: bookinfo-details  labels:    account: details---apiVersion: apps&#x2F;v1kind: Deployment     # Deployment控制器管理Pod对象，滚动更新等metadata:  name: details-v1   # 控制器的名字是 “details-v1”  labels:    app: details    version: v1spec:  replicas: 1       # 指定 “details-v1”这个控制器管理的pod是1个  selector:    matchLabels:   # 给pod指定标签      app: details      version: v1  template:        # 上面控制器创建的pod使用的都是这个模板来定义的    metadata:      labels:        app: details   # 指定创建的pod有那些标签        version: v1    spec:      serviceAccountName: bookinfo-details      containers:      - name: details  # 指定容器的名字是 details        image: docker.io&#x2F;istio&#x2F;examples-bookinfo-details-v1:1.17.0  # 使用镜像版本        imagePullPolicy: IfNotPresent        ports:        - containerPort: 9080        securityContext:          runAsUser: 1000---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul></li><li><p>ratings书籍评价</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##################################################################################################</span><span class="token comment"># Ratings service</span><span class="token comment">##################################################################################################</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> ratings    <span class="token key atrule">service</span><span class="token punctuation">:</span> ratings<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9080</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> http  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> ratings<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>ratings  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">account</span><span class="token punctuation">:</span> ratings<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings<span class="token punctuation">-</span>v1  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> ratings    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> ratings      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> ratings        <span class="token key atrule">version</span><span class="token punctuation">:</span> v1    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>ratings      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ratings        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/istio/examples<span class="token punctuation">-</span>bookinfo<span class="token punctuation">-</span>ratings<span class="token punctuation">-</span>v1<span class="token punctuation">:</span>1.17.0        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9080</span>        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>reviews书籍评论v1,v2, v3</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##################################################################################################</span><span class="token comment"># Reviews service</span><span class="token comment">##################################################################################################</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews    <span class="token key atrule">service</span><span class="token punctuation">:</span> reviews<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9080</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> http  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>reviews  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">account</span><span class="token punctuation">:</span> reviews<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token punctuation">-</span>v1  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">version</span><span class="token punctuation">:</span> v1    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>reviews      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/istio/examples<span class="token punctuation">-</span>bookinfo<span class="token punctuation">-</span>reviews<span class="token punctuation">-</span>v1<span class="token punctuation">:</span>1.17.0        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LOG_DIR          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"/tmp/logs"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9080</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /tmp        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wlp<span class="token punctuation">-</span>output          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt/ibm/wlp/output        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wlp<span class="token punctuation">-</span>output        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token punctuation">-</span>v2  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews    <span class="token key atrule">version</span><span class="token punctuation">:</span> v2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews      <span class="token key atrule">version</span><span class="token punctuation">:</span> v2  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">version</span><span class="token punctuation">:</span> v2    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>reviews      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/istio/examples<span class="token punctuation">-</span>bookinfo<span class="token punctuation">-</span>reviews<span class="token punctuation">-</span>v2<span class="token punctuation">:</span>1.17.0        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LOG_DIR          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"/tmp/logs"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9080</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /tmp        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wlp<span class="token punctuation">-</span>output          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt/ibm/wlp/output        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wlp<span class="token punctuation">-</span>output        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews<span class="token punctuation">-</span>v3  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews    <span class="token key atrule">version</span><span class="token punctuation">:</span> v3<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews      <span class="token key atrule">version</span><span class="token punctuation">:</span> v3  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">version</span><span class="token punctuation">:</span> v3    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>reviews      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> reviews        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/istio/examples<span class="token punctuation">-</span>bookinfo<span class="token punctuation">-</span>reviews<span class="token punctuation">-</span>v3<span class="token punctuation">:</span>1.17.0        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LOG_DIR          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"/tmp/logs"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9080</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /tmp        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wlp<span class="token punctuation">-</span>output          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt/ibm/wlp/output        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wlp<span class="token punctuation">-</span>output        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>productpage前端页面</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##################################################################################################</span><span class="token comment"># Productpage services</span><span class="token comment">##################################################################################################</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> productpage  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> productpage    <span class="token key atrule">service</span><span class="token punctuation">:</span> productpage<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9080</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> http  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> productpage<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>productpage  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">account</span><span class="token punctuation">:</span> productpage<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> productpage<span class="token punctuation">-</span>v1  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> productpage    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> productpage      <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> productpage        <span class="token key atrule">version</span><span class="token punctuation">:</span> v1    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> bookinfo<span class="token punctuation">-</span>productpage      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> productpage        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/istio/examples<span class="token punctuation">-</span>bookinfo<span class="token punctuation">-</span>productpage<span class="token punctuation">-</span>v1<span class="token punctuation">:</span>1.17.0        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9080</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /tmp        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">1000</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="bookinfo-gateway-yaml"><a href="#bookinfo-gateway-yaml" class="headerlink" title="bookinfo-gateway.yaml"></a>bookinfo-gateway.yaml</h2><ul><li><p><a href="https://raw.githubusercontent.com/istio/istio/release-1.15/samples/bookinfo/networking/bookinfo-gateway.yaml">https://raw.githubusercontent.com/istio/istio/release-1.15/samples/bookinfo/networking/bookinfo-gateway.yaml</a></p></li><li><p>网关接受到请求后会按照路由配置转发到VirtualService虚拟服务</p></li><li><pre><code>$ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml<pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;  apiVersion: networking.istio.io&#x2F;v1alpha3  kind: Gateway  # istio的网关资源  metadata:    name: bookinfo-gateway  # 网关名字(这个资源是 ingressgateway)  spec:    selector:      istio: ingressgateway  # 使用istio默认控制器(将ingressgateway关联到istio-ingressgateway全局网关)                             # 外网是通过 istio-ingressgateway 网关来代理流量给 ingressgateway 的    servers:    - port:        number: 80  # 网关监听端口        name: http        protocol: HTTP      hosts:      - &quot;*&quot;  ---  apiVersion: networking.istio.io&#x2F;v1alpha3  kind: VirtualService  # VirtualService虚拟服务  metadata:    name: bookinfo  spec:    hosts:    - &quot;*&quot;    gateways:    - bookinfo-gateway  # 将虚拟服务绑定到istio bookinfo-gateway这个网关    http:    - match:  # 定义匹配规则，访问这些url就会转发到 productpage服务      - uri:          exact: &#x2F;productpage      - uri:          prefix: &#x2F;static      - uri:          exact: &#x2F;login      - uri:          exact: &#x2F;logout      - uri:          prefix: &#x2F;api&#x2F;v1&#x2F;products      route:      - destination:          host: productpage  # productpage是服务名字 默认后缀是 .default.svc.cluster.local          port:            number: 9080  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>配置ingressgateway网关</p></li><li><pre><code>kubectl edit svc istio- ingressgateway-n istio-system<pre class="line-numbers language-none"><code class="language-none">- ![1668225417686](istio部署微服务&#x2F;1668225417686.png)- 此时使用http:&#x2F;&#x2F;本机地址&#x2F;productionpage 访问页面## istio核心资源## gateway- 在kubernetes环境中，ingress control用于管理进入集群的流量- 在istio服务网格中，istio ingress gateway承担响应的角色- 他使用新的配置模型（gateway 和virtualservice）完成流量管理功能-  &#96;网关配置应用于在网格边缘运行的独立 Envoy 代理&#96;，&#96;而不是与服务工作负载一起运行的 Sidecar Envoy 代理&#96; - 所以我们配置的 gateway资源指的是 下图中的 ② istio-ingressgateway### 访问流程1. 用户向某端口发出请求2. 负载均衡器监听端口，并将请求转发到集群的某个节点上   1. istio ingress gateway service 会监听集群节点端口请求3. istio ingress gate service将请求交给 istio ingres gateway pod请求   - ingress gateway pod 通过gateway和virtualservice配置规则处理请求   - 其中， gateway用来配置端口，协议和证书；virtualservice用来配置一些路由信息（找到请求对应处理服务app service）4. istio ingress gateway pod 将请求转给app service5. 最终的请求会交给app servie关联的app deployment处理![1668226196017](istio部署微服务&#x2F;1668226196017.png)## gateway.yaml-  网关是一个运行在网格边缘的负载均衡器，用于接收传入或传出的 HTTP&#x2F;TCP 连接 -  主要工作是接受外部请求，把请求转发到内部服务 - 网格边缘的 Ingress 流量，会通过对应的 Istio IngressGateway Controller 进入到集群内部。- 在上面这个 yaml 里我们配置了一个监听 80 端口的入口网关，它会将 80 端口的 http 流量导入到集群内对应的 Virtual Service 上。- **istio gateway告诉k8s istio-ingressgateway可以打开哪些端口**- &#96;&#96;&#96;yaml  apiVersion: networking.istio.io&#x2F;v1beta1  kind: Gateway  metadata:    name: canary-gateway  spec:    selector:      istio: ingressgateway    servers:    - port:        number: 80        name: http        protocol: HTTP      hosts:      - &quot;*&quot;    # *表示通配符，通过任何域名都可以访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><h2 id="VirtualService"><a href="#VirtualService" class="headerlink" title="VirtualService"></a>VirtualService</h2><ul><li>VirtualService 是 Istio 流量治理的一个核心配置，可以说是 Istio 流量治理中最重要、最复杂的。</li><li>VirtualService 在形式上表示一个虚拟服务，将满足条件的流量都转发到对应的服务后端</li><li>这个服务后端可以是一个服务，也可以是在 DestinationRule 中定义的服务的子集。</li></ul><ol><li><h4 id="virtual-yaml"><a href="#virtual-yaml" class="headerlink" title="virtual.yaml"></a>virtual.yaml</h4><ul><li><p>这个虚拟服务会收到上一个 gateway 中所有 80 端口来的 http 流量</p></li><li><pre><code class="yaml">apiVersion: networking.istio.io/v1beta1kind: VirtualServicemetadata:  name: canaryspec:  hosts:  - &quot;*&quot;  # *表示通配符，任何域名都可以，也可以配置具体域名 eg: www.example.com         # 1）hosts：虚拟主机名称，它是客户端向服务发送请求时使用的一个或多个地址         # 通过该字段提供的地址访问 virtual service，进而访问后端服务         # 在集群内部(网格内)使用时通常与 kubernetes 的 Service 同名         # 当需要在集群外部(网格外)访问时，该字段为 gateway 请求的地址，即与 gateway 的 hosts 字段相同  gateways:  - canary-gateway  http:  - route:    - destination:        host: canary.default.svc.cluster.local        subset: v1      weight: 90    - destination:        host: canary.default.svc.cluster.local        subset: v2      weight: 10<pre class="line-numbers language-none"><code class="language-none">   - 2. headers匹配   &#96;&#96;&#96;yaml   apiVersion: networking.istio.io&#x2F;v1alpha3   kind: VirtualService   metadata:     name: reviews   spec:     hosts:     - reviews     http:     - match:       - headers:             end-user:  # 此路由接收来自 ”jason“ 用户的所有请求，把请求发送到 destination 指定的 v2 子集               exact: jason       route:       - destination:           host: reviews           subset: v2     - route:       - destination:  # 不满足第一个路由规则的流量均流向一个默认的目标，第二条规则没有 match 条件，直接将流量导向 v3 子集           host: reviews           subset: v3   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li><li><p>多路由规则</p><pre class="line-numbers language-none"><code class="language-none">路由规则是将特定流量子集路由到指定目标地址的工具。可以在流量端口、header 字段、URI 等内容上设置匹配条件。例如，下面这个虚拟服务让用户发送请求到两个独立的服务：ratings 和 reviews，http:&#x2F;&#x2F;bookinfo.com&#x2F;ratings 请求转发到 ratings 服务http:&#x2F;&#x2F;bookinfo.com&#x2F;reviews 请求转发到 reviews 服务虚拟服务规则根据请求的 URI 把请求路由到特定的目标地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> VirtualService<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bookinfo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> bookinfo.com         <span class="token comment"># 1）hosts：虚拟主机名称，它是客户端向服务发送请求时使用的一个或多个地址</span>         <span class="token comment"># 通过该字段提供的地址访问 virtual service，进而访问后端服务</span>         <span class="token comment"># 在集群内部(网格内)使用时通常与 kubernetes 的 Service 同名</span>         <span class="token comment"># 当需要在集群外部(网格外)访问时，该字段为 gateway 请求的地址，即与 gateway 的 hosts 字段相同</span>  <span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>         <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /reviews    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> reviews  <span class="token comment"># 路由的 destination 字段指定了匹配条件的流量的实际地址</span>                       <span class="token comment"># 与 virtual service 的主机不同，该host 必须是存在于 istio 的服务注册表</span>                       <span class="token comment"># (如 kubernetes services，consul services 等)中的真实目的地或由 ServiceEntries 声明的 hosts</span>                       <span class="token comment"># 否则 Envoy 不知道应该将流量发送到哪里</span>  <span class="token punctuation">-</span> <span class="token key atrule">match</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uri</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /ratings    <span class="token key atrule">route</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">destination</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> ratings        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h3 id="DestinationRule-yaml"><a href="#DestinationRule-yaml" class="headerlink" title="DestinationRule.yaml"></a>DestinationRule.yaml</h3><ul><li>destination rule 是 istio 流量路由功能的重要组成部分。</li><li>一个 virtual service 可以看作是如何将流量分发给特定的目的地，然后调用 destination rule 来配置分发到该目的地的流量。</li><li>destination rule 在 virtual service 的路由规则之后起作用，应用于真实的目的地。<ul><li>(即在 virtual service 的 math-&gt;route-destination 之后起作用，此时流量已经分发到真实的 service 上)</li></ul></li><li>可以使用 destination rule 来指定命名的服务子集，例如根据版本对服务的实例进行分组</li><li>然后通过 virtual service 的路由规则中的服务子集将控制流量分发到不同服务的实例中</li></ul><pre class="line-numbers language-none"><code class="language-none">apiVersion: networking.istio.io&#x2F;v1beta1 kind: DestinationRule metadata:   name: canary spec:   host: canary.default.svc.cluster.local   subsets:   - name: v1     labels:       app: v1   - name: v2     labels:       app: v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构</title>
      <link href="/posts/19213.html"/>
      <url>/posts/19213.html</url>
      
        <content type="html"><![CDATA[<h1 id="微服务架构介绍"><a href="#微服务架构介绍" class="headerlink" title="微服务架构介绍"></a>微服务架构介绍</h1><blockquote><p>微服务架构是一种架构概念</p><p>通过将功能分解到离散的服务中已实现对解决方案的解耦， 降低耦合性</p></blockquote><ul><li>概念：把一个大型的 单个应用程序和服务拆分为数个甚至数十个支持的微服务</li><li>定义：围绕业务领域创建应用，不同应用可以进行独立开发，管理和迭代。在分散的组件中使用云架构和平台式部署、管理和服务功能， 使产品交付变得更加简单</li><li>本质：用一些功能比较明确、业务比较精炼的服务取解决更大更实际的问题</li></ul><h1 id="传统开发模式和微服务的区别"><a href="#传统开发模式和微服务的区别" class="headerlink" title="传统开发模式和微服务的区别"></a>传统开发模式和微服务的区别</h1><p>传统开发：即单体开发，所有的功能在一个tar包里</p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ul><li>开发简单，集中式管理</li><li>基本不会重复开发</li><li>功能都在本地，没有分布式的管理和调用消耗</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>开发效率低：开发都在一个项目改代码，相互等待，冲突不断</li><li>维护难：功能严重耦合，不知如何下手</li><li>不灵活：构建时间长，任何小的问题都可能导致整个应用服务挂掉</li><li>稳定性差：一个微小的问题都可能导致整个应用挂掉</li><li>扩展性差：无法满足高并发下的业务需求</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124234338253.png" alt="image-20221124234338253"></p><h1 id="系统架构遵循的三个标准和业务驱动力"><a href="#系统架构遵循的三个标准和业务驱动力" class="headerlink" title="系统架构遵循的三个标准和业务驱动力"></a><strong>系统架构遵循的三个标准和业务驱动力</strong></h1><ul><li>提高敏捷性</li><li>提升用户体验</li><li>降低成本</li></ul><h1 id="基于微服务的架构"><a href="#基于微服务的架构" class="headerlink" title="基于微服务的架构"></a>基于微服务的架构</h1><blockquote><p>目的：有效的拆分应用，实现敏捷开发和部署</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124234424371.png" alt="image-20221124234424371"></p><h2 id="微服务的具体特征"><a href="#微服务的具体特征" class="headerlink" title="微服务的具体特征"></a>微服务的具体特征</h2><ul><li>独立的服务共同组成系统，实现组件化</li><li>单独部署，跑在自己的进程中</li><li>每个服务为独立的业务开发</li><li>分布式管理</li><li>强调隔离性</li></ul><h2 id="微服务的标准"><a href="#微服务的标准" class="headerlink" title="微服务的标准"></a>微服务的标准</h2><ul><li>分布式组成的系统</li><li>按照业务划分，而不是按照技术划分组织</li><li>做有生命的产品而不是项目</li><li>强服务个体和若通信</li><li>自动化运维</li><li>高度容错性</li><li>快速演化和迭代</li><li>去中心化</li></ul><h1 id="SOA和微服务的区别"><a href="#SOA和微服务的区别" class="headerlink" title="SOA和微服务的区别"></a>SOA和微服务的区别</h1><blockquote><p>soa 架构特点： </p><ol><li>系统集成，将原本网状结构，通过ESB总线，梳理成星形结构 这一步解决的核心问题是【有序】 </li><li>系统的服务化： 把原先固有的业务功能转变为通用 的业务服务，实现业务逻辑的快速复用；这一步解决 的核心问题是【复用】 </li><li>业务的服务化： 以业务驱动把一个业务单元封装成一项服务。这一步解决的核心问题是【高效】</li></ol></blockquote><ul><li>soa 喜欢重用，微服务喜欢重写</li><li>soa 看重水平业务，微服务看重垂直业务</li><li>soa 喜欢自上而下，微服务喜欢自下而上</li></ul><p>主要区别</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124234443285.png" alt="image-20221124234443285"></p><h1 id="微服务实践"><a href="#微服务实践" class="headerlink" title="微服务实践"></a>微服务实践</h1><p>要实际应用微服务，要解决以下四点</p><ul><li>客户端如何访问微服务</li><li>每个微服务之间如何通信</li><li>如此多的微服务，如何实现</li><li>服务挂了如何解决（备份方案，应急机制）</li></ul><h2 id="客户端如何访问这些服务"><a href="#客户端如何访问这些服务" class="headerlink" title="客户端如何访问这些服务"></a>客户端如何访问这些服务</h2><p> 一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway ，他的作用：</p><ol><li>提供统一的服务入口，让微服务对前台透明</li><li>聚合后台服务，节省流量，提上性能</li><li>提供安全，过滤， 限流等API管理功能</li></ol><h2 id="每个服务之间如何通信"><a href="#每个服务之间如何通信" class="headerlink" title="每个服务之间如何通信"></a>每个服务之间如何通信</h2><p> 所有的微服务都是独立进程跑在独立机器上，所以服务间的通信就是IPC（inter process communication） 通常有以下两种方式</p><ul><li><p>同步调用</p><ul><li>REST</li><li>RPC(Thrift, dubbo)</li></ul></li><li><p>异步调用</p><ul><li>kafka</li><li>notify</li><li>metaQ</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124234505712.png" alt="image-20221124234505712"></p></li></ul><blockquote><p>同步调用比较简单，一致性强，但是容易出现调用问题，新能体验上会差点，而异步调用的方式在分布式系统中有广泛的应用，能减服务之间的耦合，又能成为调用之间的缓冲，确保消息积压不会冲垮被调用方，同时保证调用方的服务体验，继续干自己的事情，不至于被后台性能拖慢</p><p>一般rest基于http，更容易实现，更容易被接受，各个语言都能支持，对客户端没有要求，只是分装了h’t’t’p的sdk就能调用</p><p>rpc也有自己的优势，传输效率更高效，安全更可控</p></blockquote><h2 id="如此多的服务如何实现"><a href="#如此多的服务如何实现" class="headerlink" title="如此多的服务如何实现"></a>如此多的服务如何实现</h2><blockquote><p>在微服务架构中，一般每个组件都有多个拷贝用来做负载均衡，一个服务随时可能下线，也可能随时面临访问压力增加新的服务节点，服务之间如何感知，服务如何管理？</p><p>这就是微服务发现问题</p></blockquote><p>微服务发现一般有两类做法</p><p>通过zookkeeper等类似框架做服务注册信息的分布式管理，当服务上线时，服务提供自己的服务信息注册到zookeeper,并且通过心跳维持长链接，调用这通过zk寻址根据定制算法找到一个服务，当服务下线时，zk会发通知给客户端</p><ul><li>通过客户端做， 优点是架构简单，扩展灵活，只对服务注册器依赖，缺点是客户端要维护所有调用服务地址，有技术难度，一般大公司都有成熟的技术框架支持比如dubbo</li><li>通过服务端做，优点是简单所有服务对前台调用方透明</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124234524482.png" alt="image-20221124234524482"></p><h1 id="服务挂了，如何解决"><a href="#服务挂了，如何解决" class="headerlink" title="服务挂了，如何解决"></a>服务挂了，如何解决</h1><ul><li>重试</li><li>限流</li><li>熔断</li><li>负载均衡</li><li>降级（本地缓存）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/posts/44296.html"/>
      <url>/posts/44296.html</url>
      
        <content type="html"><![CDATA[<h1 id="reids-基础"><a href="#reids-基础" class="headerlink" title="reids 基础"></a>reids 基础</h1><p>后续补充</p><p>十分士大夫但是</p><p>阿凡达发达发达</p><p>阿迪斯发第三方</p><p>爱上范德萨发大水</p><p>阿萨范德萨发</p><p>啊发撒打发</p><p>阿飞倒萨啊发</p><p>啊发撒打发</p><p>阿凡达是否</p><p>阿凡达的放大</p><p>安抚打发打发</p><p>安抚大使法大师傅</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题I</title>
      <link href="/posts/46634.html"/>
      <url>/posts/46634.html</url>
      
        <content type="html"><![CDATA[<h1 id="常见算法题"><a href="#常见算法题" class="headerlink" title="常见算法题"></a>常见算法题</h1><h2 id="求两数之和"><a href="#求两数之和" class="headerlink" title="求两数之和"></a>求两数之和</h2><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># class Solution:</span><span class="token comment">#     def twoSum(self, nums: List[int], target: int) -> List[int]:</span><span class="token comment">#         #for num in nums:</span><span class="token comment">#         #    other = target - num</span><span class="token comment">#         for i in range(len(nums)):</span><span class="token comment">#             other = target - nums[i]</span><span class="token comment">#             for j in range(i+1, len(nums)):</span><span class="token comment">#                 if nums[j] == other:</span><span class="token comment">#                     return [i, j]</span><span class="token comment">#         return None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            other <span class="token operator">=</span> target<span class="token operator">-</span>val            <span class="token keyword">if</span> other <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>                <span class="token keyword">return</span> tmp<span class="token punctuation">[</span>other<span class="token punctuation">]</span><span class="token punctuation">,</span> index            tmp<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> index        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无重复最长字串"><a href="#无重复最长字串" class="headerlink" title="无重复最长字串"></a>无重复最长字串</h2><blockquote><p> 给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 滑动窗口法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> r <span class="token operator">=</span> <span class="token number">0</span>        tmp <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        max_num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 重复后要去除重复元素以及重复元素之前的，同时l + 1</span>            <span class="token keyword">if</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> r<span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span> <span class="token comment"># 不重复加入</span>                tmp<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>                r<span class="token operator">+=</span><span class="token number">1</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            max_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">,</span> max_num<span class="token punctuation">)</span>        <span class="token keyword">return</span> max_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="z字形变换"><a href="#z字形变换" class="headerlink" title="z字形变换"></a>z字形变换</h2><blockquote><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p><p>P   A   H   N<br>A P L S I I G<br>Y   I   R<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    模拟二维矩阵    矩阵如何初始化    如何模拟    向上取整通用做法 int((a+b -1) /b)        每个周期为 2r -2, 每个周期内的列数为r-1    """</span>    n<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> numRows    <span class="token keyword">if</span> r <span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    t <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span> r<span class="token operator">-</span><span class="token number">2</span>    <span class="token comment"># 根据周期求列数  ，每个周期内的列数为r-1列</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span>t <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>t<span class="token punctuation">)</span>    <span class="token comment"># 初始化数组</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token operator">*</span>c <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> index_<span class="token punctuation">,</span> ss <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> ss        <span class="token keyword">if</span> index_<span class="token operator">%</span>t <span class="token operator">&lt;</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            x<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">1</span>                y <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">return</span>   <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>ch <span class="token keyword">for</span> list1 <span class="token keyword">in</span> dp <span class="token keyword">for</span> ch <span class="token keyword">in</span> list1 <span class="token keyword">if</span> ch <span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字反转"><a href="#数字反转" class="headerlink" title="数字反转"></a>数字反转</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        除10每次取证，直到被除数&lt;10为止        """</span>        <span class="token comment"># if x&lt; -(2&lt;&lt;31) or x >(2&lt;&lt;31 - 1):</span>        <span class="token comment">#     return 0</span>        y<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> y <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token keyword">if</span> res <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span> <span class="token keyword">or</span> res<span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> y<span class="token operator">%</span><span class="token number">10</span>            y <span class="token operator">//=</span><span class="token number">10</span>        <span class="token keyword">return</span> res <span class="token keyword">if</span> x<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token operator">-</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整数转罗马数组"><a href="#整数转罗马数组" class="headerlink" title="整数转罗马数组"></a>整数转罗马数组</h2><blockquote><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给你一个整数，将其转为罗马数字。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>                list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token string">'CM'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">'CD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">'XC'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'XL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'IX'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'IV'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        str1 <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> index_<span class="token punctuation">,</span>  <span class="token punctuation">(</span>n<span class="token punctuation">,</span> ch<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> num <span class="token operator">>=</span> n<span class="token punctuation">:</span>                v <span class="token operator">=</span> num <span class="token operator">//</span> n                str1 <span class="token operator">+=</span> v<span class="token operator">*</span>ch                num <span class="token operator">=</span> num <span class="token operator">%</span> n        <span class="token keyword">return</span> str1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字转罗马数字"><a href="#数字转罗马数字" class="headerlink" title="数字转罗马数字"></a>数字转罗马数字</h2><blockquote><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p></blockquote><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'CM'</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'CD'</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'XC'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'XL'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'IX'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'IV'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> _<span class="token punctuation">,</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">:</span>                num <span class="token operator">+=</span> n                s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        first_ch <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        j <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>first_ch<span class="token punctuation">)</span><span class="token punctuation">:</span>            ch <span class="token operator">=</span> first_ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            tag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">for</span> s <span class="token keyword">in</span> strs<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;=</span> j <span class="token keyword">or</span> ch <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    tag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> tag<span class="token punctuation">:</span>                res <span class="token operator">+=</span> ch            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            j <span class="token operator">+=</span><span class="token number">1</span>         <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><blockquote><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请</p><p>你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p></blockquote><p><strong>排序+双指针+剪枝</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 排序， 防止重复</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                        first <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> i <span class="token operator">></span><span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            target <span class="token operator">=</span> <span class="token operator">-</span>first            <span class="token comment"># 前后双指针</span>            left <span class="token operator">=</span> i <span class="token operator">+</span><span class="token number">1</span>            right <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                <span class="token comment"># 如果有重复的则忽略</span>                second <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                third <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                <span class="token keyword">if</span> second <span class="token operator">+</span> third <span class="token operator">==</span> target<span class="token punctuation">:</span>                    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment">#判断是否有相同的元素，</span>                    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        left <span class="token operator">+=</span><span class="token number">1</span>                    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> second <span class="token operator">+</span>third <span class="token operator">></span> target<span class="token punctuation">:</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> second <span class="token operator">+</span> third <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">continue</span>                left <span class="token operator">+=</span> <span class="token number">1</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最接近的三数之和-leetcode-16"><a href="#最接近的三数之和-leetcode-16" class="headerlink" title="最接近的三数之和-leetcode 16"></a>最接近的三数之和-leetcode 16</h2><blockquote><p>给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。</p><p>返回这三个数的和。</p><p>假定每组输入只存在恰好一个解</p></blockquote><p><strong>排序+双指针</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        min_num <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">5</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>                        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                cur_target <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>target<span class="token operator">-</span>cur_target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>target<span class="token operator">-</span>min_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                    min_num <span class="token operator">=</span> cur_target                <span class="token keyword">if</span> cur_target <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> cur_target                                <span class="token keyword">elif</span> cur_target <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> min_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两数相除"><a href="#两数相除" class="headerlink" title="两数相除"></a>两数相除</h2><blockquote><p>定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p>返回被除数 dividend 除以除数 divisor 得到的商。</p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) &#x3D; 8 以及 truncate(-2.7335) &#x3D; -2</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># 此方法会超时</span>    <span class="token comment"># def divide(self, dividend: int, divisor: int) -> int:</span>    <span class="token comment">#     # 由于取值范围是[−2**31,  2**31 − 1] 所以同一使用负数来处理溢出问题</span>    <span class="token comment">#     flag = False  # 是否需要加负号</span>    <span class="token comment">#     if (dividend >0 and divisor &lt; 0) or (dividend &lt;0 and divisor >0):</span>    <span class="token comment">#         flag = True</span>    <span class="token comment">#     dividend = abs(dividend)</span>    <span class="token comment">#     divisor = abs(divisor)</span>    <span class="token comment">#     num = 0</span>    <span class="token comment">#     while divisor  &lt;= dividend:</span>    <span class="token comment">#         dividend -= divisor</span>    <span class="token comment">#         num -=1</span>    <span class="token comment">#     if num == (-2)**31:</span>    <span class="token comment">#         return 2**31-1</span>    <span class="token comment">#     else:</span>    <span class="token comment">#         return num if flag else -num</span>    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dividend<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> divisor<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment">#     # x &lt;&lt; i, 左移相当于 x* 2^i</span>    <span class="token comment">#     # x >> i, 右移相当于 x/ 2^i</span>        flag <span class="token operator">=</span> <span class="token punctuation">(</span>dividend <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>divisor<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        limit <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span>        dividend <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>dividend<span class="token punctuation">)</span>        divisor <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>divisor<span class="token punctuation">)</span>        res<span class="token punctuation">,</span>  div <span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> divisor<span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">while</span> dividend <span class="token operator">>=</span>divisor<span class="token punctuation">:</span>            <span class="token keyword">while</span> dividend <span class="token operator">></span> <span class="token punctuation">(</span>div<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                div <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>                tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>            dividend <span class="token operator">-=</span> div            div <span class="token operator">=</span> divisor            res <span class="token operator">+=</span>tmp            tmp <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token operator">-</span>res        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"res"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> res <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&lt;=</span>res <span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> res        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> limit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索螺旋排序数组"><a href="#搜索螺旋排序数组" class="headerlink" title="搜索螺旋排序数组"></a>搜索螺旋排序数组</h2><blockquote><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p><p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p></blockquote><p><code> 每一次二分查找后，数组都被分为一个有序的和一个无序的， 两种情况分别按照二分查找的方式处理就可以解决此问题</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将数组一分为二，其中一定有一个是有序的，另一个可能是有序，也能是部分有序。此时有序部分用二分法查找。无      序部分再一分为二，其中一个一定有序，另一个可能有序，可能无序。就这样循环.        """</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>                        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 前半部分有序,</span>                                <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 判断target是否在上升序列中，如果在，需要移动右指针</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment"># 如果不在上升序列中，则舍弃该序列</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment">#  类无序的一部分</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target  <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># </span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在排序数组中查找元素的第一个和最后一个位置-leetcode-34"><a href="#在排序数组中查找元素的第一个和最后一个位置-leetcode-34" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置-leetcode 34"></a>在排序数组中查找元素的第一个和最后一个位置-leetcode 34</h2><blockquote><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        二分查找寻找左右边界        """</span>        <span class="token keyword">def</span> <span class="token function">search_left</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span><span class="token number">2</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token string">"mid"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    right <span class="token operator">=</span> right <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> left            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">search_right</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span>target<span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> right            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums <span class="token keyword">or</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token keyword">or</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        l <span class="token operator">=</span> search_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        r <span class="token operator">=</span> search_right<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>l <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>l<span class="token punctuation">,</span> r<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有效的数组-–leetcode-36"><a href="#有效的数组-–leetcode-36" class="headerlink" title="有效的数组 –leetcode 36"></a>有效的数组 –leetcode 36</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        row<span class="token punctuation">,</span> col <span class="token punctuation">,</span> sqrt <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 行</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 列</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token comment">## 推导i, j 是在哪个盒子</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> sqrt<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span> j<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                sqrt<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span>j<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串相乘-leetcode-43"><a href="#字符串相乘-leetcode-43" class="headerlink" title="字符串相乘-leetcode 43"></a>字符串相乘-leetcode 43</h2><blockquote><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><p>注意：不能使用任何内置的 BigInteger 库或直接将输入转换为整数</p></blockquote><p><strong>模拟乘法运算过程，最后统一处理进位， 注意每次相乘结果对象要加到列表的i+j+1处</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num1 <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token keyword">or</span> num2 <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"0"</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                temp<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num        falg_num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        this_num <span class="token operator">=</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>            falg_num <span class="token operator">=</span> temp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">//</span> <span class="token number">10</span>            temp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> this_num            temp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> falg_num        index <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>        ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳跃游戏-leetcode-45"><a href="#跳跃游戏-leetcode-45" class="headerlink" title="跳跃游戏-leetcode 45"></a>跳跃游戏-leetcode 45</h2><blockquote><p>给你一个非负整数数组 nums ，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>假设你总是可以到达数组的最后一个位置。</p></blockquote><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h2><blockquote><p> 给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    可以使用双指针，也可以使用贪心算法，这里使用贪心算法        贪心算法： 要想使字串最长，那么，每个重复字母之间的距离最大，最后的最大距离就是最长字串的长度     s = "abcabcbb"    """</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>                max_len <span class="token operator">=</span> <span class="token number">0</span>        start <span class="token operator">=</span> <span class="token number">0</span>        char_index <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span>  i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 任何字串都不能有重复的，如果获取到的下标小于start 则不更新start， 如果大于等于，则更新start</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> char_index <span class="token keyword">and</span> char_index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>start<span class="token punctuation">:</span>                max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>i<span class="token operator">-</span>start<span class="token punctuation">,</span> max_len<span class="token punctuation">)</span>                start <span class="token operator">=</span> char_index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">if</span> char_index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> start <span class="token keyword">else</span> start            char_index<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">print</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span> start<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Power-x-n-leetcode-50"><a href="#Power-x-n-leetcode-50" class="headerlink" title="Power(x, n)-leetcode 50"></a>Power(x, n)-leetcode 50</h2><blockquote><p> 实现 <a href="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a> ，即计算 <code>x</code> 的整数 <code>n</code> 次幂函数（即，<code>x**n</code> ）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    x ** 89       89//2  +1    x ** 88 88/2    """</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">quick_mul</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1.0</span>            y <span class="token operator">=</span> quick_mul<span class="token punctuation">(</span>N<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> y <span class="token operator">*</span>y <span class="token keyword">if</span> N <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> y<span class="token operator">*</span>y <span class="token operator">*</span>x        <span class="token keyword">return</span> quick_mul<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> n<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token operator">/</span>quick_mul<span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字母异味词分组-leetcode-49"><a href="#字母异味词分组-leetcode-49" class="headerlink" title="字母异味词分组-leetcode 49"></a>字母异味词分组-leetcode 49</h2><blockquote><p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p><p>字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dict1 <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            key <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            dict1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="螺旋矩阵-leetcode-54"><a href="#螺旋矩阵-leetcode-54" class="headerlink" title="螺旋矩阵-leetcode 54"></a>螺旋矩阵-leetcode 54</h2><blockquote><p> 给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于 (top,left)，右下角位于 (bottom,right)，按照如下顺序遍历当前层的元素。从左到右遍历上侧元素，依次为 (top,left) 到(top,right)。从上到下遍历右侧元素，依次为 (top+1,right) 到 (\textit&#123;bottom&#125;, (bottom,right)。如果 left&lt;right 且 top&lt;bottom，则从右到左遍历下侧元素，依次为 (bottom,right−1) 到 )(bottom,left+1)，以及从下到上遍历左侧元素，依次为(top+1,left)。遍历完当前层的元素之后，将 left 和top 分别增加 1，将 right 和 bottom 分别减少 11，进入下一层继续遍历，直到遍历完所有元素为止。'''</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ret <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">:</span>            <span class="token keyword">for</span> column <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bottom<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">:</span>                <span class="token keyword">for</span> column <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>            top <span class="token operator">+=</span><span class="token number">1</span>            bottom <span class="token operator">-=</span> <span class="token number">1</span>            left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h2><blockquote><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] &#x3D; [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        intervals <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            pre_start <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            pre_end <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            nex_start <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            nex_end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> nex_start <span class="token operator">&lt;=</span> pre_end<span class="token punctuation">:</span>                ret<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>pre_start<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>pre_end<span class="token punctuation">,</span> nex_end<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入区间-leetcode-57"><a href="#插入区间-leetcode-57" class="headerlink" title="插入区间-leetcode 57"></a>插入区间-leetcode 57</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newInterval<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        start_new<span class="token punctuation">,</span> end_new <span class="token operator">=</span> newInterval        tag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> start<span class="token punctuation">,</span> end <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>                        <span class="token comment"># 无相交， 可以直接加入这个元素的左侧</span>            <span class="token keyword">if</span> start <span class="token operator">></span> end_new<span class="token punctuation">:</span>                 <span class="token keyword">if</span> <span class="token keyword">not</span> tag<span class="token punctuation">:</span>                    ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>start_new<span class="token punctuation">,</span> end_new<span class="token punctuation">]</span><span class="token punctuation">)</span>                    tag <span class="token operator">=</span> <span class="token boolean">True</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token comment"># 有相交，将最小的作为插入的起始，最大的作为插入的结尾</span>            <span class="token keyword">elif</span> end <span class="token operator">&lt;</span> start_new<span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 有相交</span>                <span class="token comment"># 不能直接插入////</span>                start_new <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start_new<span class="token punctuation">)</span>                end_new <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> end_new<span class="token punctuation">)</span>                                    <span class="token keyword">if</span> <span class="token keyword">not</span> tag<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>start_new<span class="token punctuation">,</span> end_new<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最后一个单词的长度-leetcode-51"><a href="#最后一个单词的长度-leetcode-51" class="headerlink" title="最后一个单词的长度-leetcode 51"></a>最后一个单词的长度-leetcode 51</h2><blockquote><p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。</p><p>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLastWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># s = s.rstrip(" ")</span>        <span class="token comment"># num = 0</span>        <span class="token comment"># if len(s) == 1:</span>        <span class="token comment">#     return 1</span>        <span class="token comment"># for i in range(-1, -len(s)-1, -1):</span>        <span class="token comment">#     if s[i] == " ":</span>        <span class="token comment">#         break</span>        <span class="token comment">#     num += 1</span>        <span class="token comment"># return num</span>                <span class="token comment"># 用内置方法</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="螺旋矩阵II-leetcode"><a href="#螺旋矩阵II-leetcode" class="headerlink" title="螺旋矩阵II -leetcode"></a>螺旋矩阵II -leetcode</h2><blockquote><p> 给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n**2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""     模拟方向， 按照顺序填入数字     [[1,2,3],       [9,10,4],      [8,7,6]]    """</span>    <span class="token keyword">def</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> n <span class="token operator">-</span><span class="token number">1</span>        top <span class="token operator">=</span> <span class="token number">0</span>        bottom <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span>        board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"-"</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        start <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> top <span class="token operator">&lt;=</span> bottom <span class="token keyword">and</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                start <span class="token operator">+=</span> <span class="token number">1</span>                board<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> start            <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bottom <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                start <span class="token operator">+=</span> <span class="token number">1</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> start                        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">:</span>                <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    start <span class="token operator">+=</span> <span class="token number">1</span>                                        board<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> start                     <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    start<span class="token operator">+=</span> <span class="token number">1</span>                    board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> start                        top <span class="token operator">+=</span> <span class="token number">1</span>            bottom <span class="token operator">-=</span> <span class="token number">1</span>            left <span class="token operator">+=</span> <span class="token number">1</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> board<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序序列-leetcode-60"><a href="#排序序列-leetcode-60" class="headerlink" title="排序序列-leetcode-60"></a>排序序列-leetcode-60</h2><blockquote><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n &#x3D; 3 时, 所有排列如下：</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>给定 n 和 k，返回第 k 个排列</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#会超时</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    适用回溯法    """</span>    <span class="token keyword">def</span> <span class="token function">getPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        sums <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sums<span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> path<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> depth <span class="token operator">==</span> n<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                backtracing<span class="token punctuation">(</span>startindex <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">,</span> path<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        backtracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span> <span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h2><blockquote><p> 给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""    1. 计算链表的长度    2. 找出倒数第k+1 个节点     (len(head) - k) % len(head)        3. 转为循环链表    4. 在第k+1 个节点处断开        """</span>    <span class="token keyword">def</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        n <span class="token operator">=</span> <span class="token number">1</span>        cur <span class="token operator">=</span> head                <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 最后一个节点</span>            n <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 寻找新链表的结尾位置</span>        end <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">%</span>n  <span class="token comment"># 余数即为倒数第k+1个位置</span>        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head   <span class="token comment"># 使链表收尾相连</span>        <span class="token keyword">if</span> end <span class="token operator">==</span> n<span class="token punctuation">:</span>            <span class="token keyword">return</span> end<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> end <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            end <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment"># 结束循环，此时cur处于循环链表的结尾位置</span>        ret <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 将链表断开</span>        <span class="token keyword">return</span> ret        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同路径-leetcode-62"><a href="#不同路径-leetcode-62" class="headerlink" title="不同路径-leetcode 62"></a>不同路径-leetcode 62</h2><blockquote><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># dp[i][j] 在ij位置处的所有路径</span>        <span class="token comment"># 递推方程 dp[i][j] =dp[i][j] + dp[i-1][j] + dp[i][j-1]</span>        <span class="token comment"># 生成dp   初始化， 只有一行，或者只有一列 只有一种走法</span>                dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同路径II"><a href="#不同路径II" class="headerlink" title="不同路径II"></a>不同路径II</h2><blockquote><p> 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obstacleGrid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        1. dp[i][j]到达(i)(j)的路径数        2. 递推公式: dp[i][j] = dp[i][j] + dp[i-1][j] + dp[i][j-1]                    dp[i][j] = 0  # (i, j) 处有障碍物体        3. 初始化         """</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最小路径和-leetcode-64"><a href="#最小路径和-leetcode-64" class="headerlink" title="最小路径和 - leetcode 64"></a>最小路径和 - leetcode 64</h2><blockquote><p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        dp[i][j] 在（i，j） 处最小数字总和        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]        """</span>        <span class="token keyword">for</span>  i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span>  grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">return</span> grid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加一-leetcode-66"><a href="#加一-leetcode-66" class="headerlink" title="加一 -leetcode 66"></a>加一 -leetcode 66</h2><blockquote><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> digits<span class="token punctuation">:</span>            <span class="token keyword">return</span> digits        digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> digits        digits<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        num <span class="token operator">=</span> <span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>            flag <span class="token operator">=</span> <span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>            digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num        <span class="token keyword">return</span> digits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> digits               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二进制求和"><a href="#二进制求和" class="headerlink" title="二进制求和"></a>二进制求和</h2><blockquote><p> 给你两个二进制字符串 <code>a</code> 和 <code>b</code> ，以二进制字符串的形式返回它们的和。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addBinary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>        a <span class="token operator">=</span>  <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">"0"</span> <span class="token operator">+</span> a        b <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">"0"</span> <span class="token operator">+</span> b        flag <span class="token operator">=</span> <span class="token number">0</span>        ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> flag            cur <span class="token operator">=</span> num <span class="token operator">%</span><span class="token number">2</span>             flag <span class="token operator">=</span> num<span class="token operator">//</span><span class="token number">2</span>            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>        ret <span class="token operator">=</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token keyword">else</span> ret        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x的平方根-leetcode-69"><a href="#x的平方根-leetcode-69" class="headerlink" title="x的平方根 - leetcode 69"></a>x的平方根 - leetcode 69</h2><blockquote><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    结果向下取整    """</span>    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">if</span> x <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;=</span> x <span class="token keyword">and</span> <span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span>x<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;</span>x<span class="token punctuation">:</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h2><blockquote><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        x <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">while</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>            dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            x <span class="token operator">+=</span><span class="token number">1</span>         <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简化路径-leetcode-71"><a href="#简化路径-leetcode-71" class="headerlink" title="简化路径 -leetcode 71"></a>简化路径 -leetcode 71</h2><blockquote><p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘&#x2F;‘ 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’&#x2F;&#x2F;‘）都被视为单个斜杠 ‘&#x2F;‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件&#x2F;目录名称。</p><p>请注意，返回的 规范路径 必须遵循下述格式：</p><p>始终以斜杠 ‘&#x2F;‘ 开头。<br>两个目录名之间必须只有一个斜杠 ‘&#x2F;‘ 。<br>最后一个目录名（如果存在）不能 以 ‘&#x2F;‘ 结尾。<br>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。<br>返回简化后得到的 规范路径 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    ./  当前    ../ 上一级    /c 能返回    """</span>    <span class="token keyword">def</span> <span class="token function">simplifyPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>        paths <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> cha <span class="token keyword">in</span> paths<span class="token punctuation">:</span>            <span class="token keyword">if</span> cha <span class="token operator">==</span> <span class="token string">".."</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> stack<span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> cha <span class="token keyword">and</span> cha <span class="token operator">!=</span> <span class="token string">"."</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cha<span class="token punctuation">)</span>        <span class="token keyword">return</span>  <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="矩阵置零-leetcode-73"><a href="#矩阵置零-leetcode-73" class="headerlink" title="矩阵置零 - leetcode 73"></a>矩阵置零 - leetcode 73</h2><blockquote><p> 给定一个 <code>*m* x *n*</code> 的矩阵，如果一个元素为 <strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong> 。请使用 <strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 算法<strong>。</strong> </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify matrix in-place instead.        """</span>        cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索二维矩阵"><a href="#搜索二维矩阵" class="headerlink" title="搜索二维矩阵"></a>搜索二维矩阵</h2><blockquote><p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><p>每行中的整数从左到右按升序排列。<br>每行的第一个整数大于前一行的最后一个整数。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span>right <span class="token keyword">and</span> left <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">></span> target<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token string">"right"</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 二分查找matrix[mid]</span>                l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">while</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">:</span>                    mid_mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>                    <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>mid_mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>                                        <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>mid_mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                        r <span class="token operator">=</span> mid_mid <span class="token operator">-</span><span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        l <span class="token operator">=</span> mid_mid <span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">break</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="颜色分类-leetcode-75"><a href="#颜色分类-leetcode-75" class="headerlink" title="颜色分类 -leetcode 75"></a>颜色分类 -leetcode 75</h2><blockquote><p>给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><p>必须在不使用库的sort函数的情况下解决这个问题。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums in-place instead.        """</span>                <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>                quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>            <span class="token keyword">return</span> nums        <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">:</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>                data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">:</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>                data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp            <span class="token keyword">return</span> left        <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合-leetcde-77"><a href="#组合-leetcde-77" class="headerlink" title="组合 -leetcde 77"></a>组合 -leetcde 77</h2><blockquote><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> n <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                backtracing<span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracing<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子集-leetcode-78"><a href="#子集-leetcode-78" class="headerlink" title="子集 - leetcode 78"></a>子集 - leetcode 78</h2><blockquote><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                                backtracing<span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单词搜索-leetcode-79"><a href="#单词搜索-leetcode-79" class="headerlink" title="单词搜索 leetcode -79"></a>单词搜索 leetcode -79</h2><blockquote><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        used <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 对应左右上下四个方向</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span>  word<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment"># 如果board[i][j] = word[k]:</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> di<span class="token punctuation">,</span> dj <span class="token keyword">in</span> directions<span class="token punctuation">:</span>                newi<span class="token punctuation">,</span> newj <span class="token operator">=</span> i<span class="token operator">+</span>di<span class="token punctuation">,</span> j <span class="token operator">+</span> dj                <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span>newi<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>newj<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newi<span class="token punctuation">,</span> newj<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                        <span class="token keyword">if</span> backtracing<span class="token punctuation">(</span>newi<span class="token punctuation">,</span> newj<span class="token punctuation">,</span> k <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            result <span class="token operator">=</span> <span class="token boolean">True</span>                            <span class="token keyword">break</span>            visited<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result        visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> backtracing<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除有序数组中的重复项-leetcode-80"><a href="#删除有序数组中的重复项-leetcode-80" class="headerlink" title="删除有序数组中的重复项 leetcode 80"></a>删除有序数组中的重复项 leetcode 80</h2><blockquote><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> end <span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span>  <span class="token keyword">and</span> end <span class="token operator">-</span> start <span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token comment">#if end - start >= 2:</span>                <span class="token keyword">del</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>                end <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token comment">#start += 1</span>            <span class="token comment"># 此时两者之间的距离必小于二， 如果不相同， 则说明有了新元素，需要移动起始指针</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">:</span>                start <span class="token operator">=</span> end                end <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># 如果相同， 起始不变，end + 1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                end <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索旋转排列数组II-leetcode-81"><a href="#搜索旋转排列数组II-leetcode-81" class="headerlink" title="搜索旋转排列数组II -leetcode 81"></a>搜索旋转排列数组II -leetcode 81</h2><blockquote><p>已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转 ，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为 [4,5,6,6,7,0,1,2,4,4] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums 中存在这个目标值 target ，则返回 true ，否则返回 false 。</p><p>你必须尽可能减少整个操作步骤。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    1. 将数组分为两边    2. 旋转之前末尾所在的一边，如果最后一个元素不是最大值， 则这一半部分有序，有序的分割点为最大的一个数    3. 旋转之前末尾不在的一边， 完全有序，可以按照二分查找    """</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 将数组按照下标分为两边</span>        left <span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 这半部分有序 处于上升序列中</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 一半有序，一半部分有序</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 处在有序部分</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除排序链表中的重复元素-leecode-81"><a href="#删除排序链表中的重复元素-leecode-81" class="headerlink" title="删除排序链表中的重复元素-leecode 81"></a>删除排序链表中的重复元素-leecode 81</h2><p>​</p><blockquote><p> 给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除排序链表中的重复元素II-leetcode-82"><a href="#删除排序链表中的重复元素II-leetcode-82" class="headerlink" title="删除排序链表中的重复元素II-leetcode 82"></a>删除排序链表中的重复元素II-leetcode 82</h2><blockquote><p> 给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    有可能头部节点也会删除    删除条件 head.val = head.next.val 直到找到不相等的进行连接    """</span>    <span class="token keyword">def</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>        cur <span class="token operator">=</span> dummy        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>                repeat <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val                <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> repeat<span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并两个有序数组-leetcode-88"><a href="#合并两个有序数组-leetcode-88" class="headerlink" title="合并两个有序数组 - leetcode 88"></a>合并两个有序数组 - leetcode 88</h2><blockquote><p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums1 in-place instead.        """</span>        l <span class="token operator">=</span> <span class="token number">0</span>        r <span class="token operator">=</span> <span class="token number">0</span>        ret <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span>m <span class="token keyword">and</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>                r <span class="token operator">+=</span> <span class="token number">1</span>        ret <span class="token operator">=</span> ret <span class="token operator">+</span> nums1<span class="token punctuation">[</span>l<span class="token punctuation">:</span>m<span class="token punctuation">]</span>        ret <span class="token operator">=</span> ret <span class="token operator">+</span> nums2<span class="token punctuation">[</span>r<span class="token punctuation">:</span><span class="token punctuation">]</span>        nums1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子集II-leetcode-90"><a href="#子集II-leetcode-90" class="headerlink" title="子集II -leetcode 90"></a>子集II -leetcode 90</h2><blockquote><p>给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> start_index<span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">></span> start_index <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtracing<span class="token punctuation">(</span>path<span class="token punctuation">,</span> i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracing<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解码方法-leetcode-91"><a href="#解码方法-leetcode-91" class="headerlink" title="解码方法 - leetcode 91"></a>解码方法 - leetcode 91</h2><blockquote><p>一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：</p><p>‘A’ -&gt; “1”<br>‘B’ -&gt; “2”<br>…<br>‘Z’ -&gt; “26”<br>要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，”11106” 可以映射为：</p><p>“AAJF” ，将消息分组为 (1 1 10 6)<br>“KJF” ，将消息分组为 (11 10 6)<br>注意，消息不能分组为  (1 11 06) ，因为 “06” 不能映射为 “F” ，这是由于 “6” 和 “06” 在映射中并不等价。</p><p>给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。</p><p>题目数据保证答案肯定是一个 32 位 的整数。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span> <span class="token keyword">and</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转链表II-leetcode-92"><a href="#反转链表II-leetcode-92" class="headerlink" title="反转链表II -leetcode 92"></a>反转链表II -leetcode 92</h2><blockquote><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None): </span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">deverse_node</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token comment"># 原地逆置法反转链表</span>            <span class="token comment"># bag = head</span>            <span class="token comment"># end = bag.next</span>            <span class="token comment"># while end:</span>            <span class="token comment">#     bag.next = end.next</span>            <span class="token comment">#     end.next = head</span>            <span class="token comment">#     head = end</span>            <span class="token comment">#     end = bag.next</span>            <span class="token comment"># print(head, 999)</span>                                    <span class="token comment"># 头插法</span>            pre <span class="token operator">=</span> <span class="token boolean">None</span>            cur <span class="token operator">=</span> head            <span class="token keyword">while</span> cur<span class="token punctuation">:</span>                <span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 指针指向下一个节点</span>                <span class="token comment"># 在pre的头部插入cur节点</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> <span class="token builtin">next</span>            <span class="token comment"># 反转后头节点是right_node, 尾节点是left_node</span>        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        pre <span class="token operator">=</span> dummy        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># left 的前一个节点</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>        right_node <span class="token operator">=</span> pre        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 来到right 节点</span>            right_node <span class="token operator">=</span> right_node<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token comment"># 切断出一个子链表（截取链表）</span>        left_node <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>        curr <span class="token operator">=</span> right_node<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token comment"># 切断连接</span>        pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        right_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token comment"># 逆置</span>        deverse_node<span class="token punctuation">(</span>left_node<span class="token punctuation">)</span>                <span class="token comment"># 拼接</span>        pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right_node        left_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> curr        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复原ip地址-leetcode93"><a href="#复原ip地址-leetcode93" class="headerlink" title="复原ip地址 - leetcode93"></a>复原ip地址 - leetcode93</h2><blockquote><p>有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。</p><p>例如：”0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、”192.168.1.312” 和 “<a href="mailto:&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#64;&#x31;&#x2e;&#49;">&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#64;&#x31;&#x2e;&#49;</a>“ 是 无效 IP 地址。<br>给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> startindx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> startindx <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> startindx <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>startindx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>                backtracing<span class="token punctuation">(</span>path<span class="token punctuation">,</span> startindx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                                        path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span>startindx<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                end <span class="token operator">=</span> i <span class="token operator">+</span><span class="token number">1</span>                temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>startindx<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> temp <span class="token keyword">and</span> temp  <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>                    backtracing<span class="token punctuation">(</span>path<span class="token punctuation">,</span> end<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        backtracing<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树的中序遍历-leetcode-94"><a href="#二叉树的中序遍历-leetcode-94" class="headerlink" title="二叉树的中序遍历 - leetcode 94"></a>二叉树的中序遍历 - leetcode 94</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for a binary tree node.</span><span class="token comment"># class TreeNode:</span><span class="token comment">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.left = left</span><span class="token comment">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">mid_order</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> ret<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            mid_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>            ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            mid_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>            <span class="token keyword">return</span> ret        <span class="token keyword">return</span> mid_order<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同的二叉搜索树-leetcode-92"><a href="#不同的二叉搜索树-leetcode-92" class="headerlink" title="不同的二叉搜索树 -leetcode 92"></a>不同的二叉搜索树 -leetcode 92</h2><blockquote><p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token comment"># 会超时</span>    <span class="token comment"># def numTrees(self, n: int) -> int:</span>    <span class="token comment">#     def trees(start, end):</span>            <span class="token comment">#         if start > end:</span>    <span class="token comment">#             return [None, ]</span>    <span class="token comment">#         all_tress = list()  </span>    <span class="token comment">#         for i in range(start, end+1):</span>    <span class="token comment">#             left_trees = trees(start, i-1)</span>    <span class="token comment">#             right_trees = trees(i+1, end)</span>    <span class="token comment">#             for l in left_trees:</span>    <span class="token comment">#                 for r in right_trees:</span>    <span class="token comment">#                     all_tress.append("_")</span>    <span class="token comment">#         return all_tress</span>    <span class="token comment">#     return len(trees(1, n))</span>    <span class="token keyword">def</span> <span class="token function">numTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        dp[i] 表示在i处互不相同的二叉树个数        G(n) 表示长度为N 的序列组成二叉树的总个数        F(i, n) 表示以第i个元素为为根， 长度为n的元素组成二叉树的个数        G(n) = F(1, N) + F(2, n) + .... F(n,n)                F(i, n) = G(i-1)G(n-i)        G(i) += G(i-1)G(n-i)        """</span>        G <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 长度为i 以j 为根的个数的总个数</span>                G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> G<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>G<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> G<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同的二叉搜索树II-leetcode-95"><a href="#不同的二叉搜索树II-leetcode-95" class="headerlink" title="不同的二叉搜索树II - leetcode 95"></a>不同的二叉搜索树II - leetcode 95</h2><blockquote><p>给你一个整数 <code>n</code> ，请你生成并返回所有由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的不同 <strong>二叉搜索树</strong> 。可以按 <strong>任意顺序</strong> 返回答案。 </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for a binary tree node.</span><span class="token comment"># class TreeNode:</span><span class="token comment">#     def __init__(self, val=0, left=None, right=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.left = left</span><span class="token comment">#         self.right = right</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    回溯法    """</span>    <span class="token keyword">def</span> <span class="token function">generateTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">trees</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">]</span>            allTress <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token comment"># 所有的左子树</span>                left_trees <span class="token operator">=</span> trees<span class="token punctuation">(</span>start<span class="token punctuation">,</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># 所有的右子树</span>                                right_tree <span class="token operator">=</span> trees<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>                <span class="token keyword">for</span> l <span class="token keyword">in</span> left_trees<span class="token punctuation">:</span>                    <span class="token keyword">for</span> r <span class="token keyword">in</span> right_tree<span class="token punctuation">:</span>                        curr_tree <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                        curr_tree<span class="token punctuation">.</span>left <span class="token operator">=</span> l                        curr_tree<span class="token punctuation">.</span>right <span class="token operator">=</span> r                        allTress<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr_tree<span class="token punctuation">)</span>            <span class="token keyword">return</span> allTress        <span class="token keyword">return</span> trees<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交错字符串-leetcode-97"><a href="#交错字符串-leetcode-97" class="headerlink" title="交错字符串 - leetcode 97"></a>交错字符串 - leetcode 97</h2><blockquote><p>给定三个字符串 s1、s2、s3，请你帮忙验证 s3 是否是由 s1 和 s2 交错 组成的。</p><p>两个字符串 s 和 t 交错 的定义与过程如下，其中每个字符串都会被分割成若干 非空 子字符串：</p><p>s &#x3D; s1 + s2 + … + sn<br>t &#x3D; t1 + t2 + … + tm<br>|n - m| &lt;&#x3D; 1<br>交错 是 s1 + t1 + s2 + t2 + s3 + t3 + … 或者 t1 + s1 + t2 + s2 + t3 + s3 + …<br>注意：a + b 意味着字符串 a 和 b 连接。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    如果在i 位置是交错则    s1[0] + s2[0] + s1[1] +  s2[1] + .... s1[i] + s2[i] = s[2i]  or    s1[0] + s2[0] + s1[1] +  s2[1] + .... s1[i] = s[2i-1]  # 或者先s2再s1    动态规划：    1. dp[i][j] = 在s1[0:i] s2[0:j] 处交错组成的字符串是否存在s3的字串 s3[0:i+j]    2.推导公式        len(s1[i]) + len(s2[j]) = len(s[3])    判断是否在是s1[i] 处是相交需要看是dp[i-1][j]处是否相交且s[i-1] == s3[i+j-1]    s2[j]  dp[i][j-1] 且s2[j-1] = s3[i+j-1]         dp[0][0] = True 表示取空 可以生成s3中的空    2. 递推公式：     """</span>    <span class="token keyword">def</span> <span class="token function">isInterleave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s3<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>                        <span class="token comment">#dp = [[False] * (len(s2)+1) for _ in range(len(s1)+1)]</span>        len1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>        len2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>        len3 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>        <span class="token keyword">if</span> len1 <span class="token operator">+</span> len2 <span class="token operator">!=</span> len3<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>                    dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>len1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># 初始化行列</span>        <span class="token comment"># print(dp)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第一行</span>            <span class="token keyword">if</span> s2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># print(dp, "初始化第一行")</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第一列</span>            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> s2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s3<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">or</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="动态规划问题"><a href="#动态规划问题" class="headerlink" title="动态规划问题"></a>动态规划问题</h1><ul><li><p>dp 数组的定义以及下标的含义dp[i][j]</p></li><li><p>递推公式</p></li><li><p>dp数组如何初始化</p></li><li><p>遍历顺序</p></li><li><p>打印dp数组</p></li></ul><h2 id="动态规划解决斐波那契数"><a href="#动态规划解决斐波那契数" class="headerlink" title="动态规划解决斐波那契数"></a>动态规划解决斐波那契数</h2><ol><li><p>dp数组下标以及含义dp[i]， 第i个斐波那契数，dp[i]表示第i个斐波那契数值</p></li><li><p>递推公式dp[i] &#x3D; dp[i-1]  +  dp[i-1]</p></li><li><p>初始化：dp[0] &#x3D; 1 dp[1] &#x3D; 1</p></li><li><p>遍历顺序：从前向后</p></li><li><p>打印dp数组</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment">#dp[0], dp[1] = 1, 1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">or</span> n <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    i <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">:</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>fibonc<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划解决上楼梯问题"><a href="#动态规划解决上楼梯问题" class="headerlink" title="动态规划解决上楼梯问题"></a>动态规划解决上楼梯问题</h2><blockquote><p>n阶台阶，一次可以上一阶或者两阶，到达第n阶有几种方法</p></blockquote><p>1阶   1</p><p>2阶  2</p><p>3阶 3</p><p>4阶 5</p><p>动归五部曲</p><ol><li>dp[i]  表示上到第i阶的所有方法</li><li>递推公式： dp[i]  &#x3D; dp[i-1]  + dp[i-2] </li><li>初始化：dp[0] &#x3D; 0, dp[1]&#x3D;1,  dp[2] &#x3D; 2</li><li>确定遍历顺序： 从头向后</li><li>打印dp数组</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> n <span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">2</span>    i <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">:</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态规划上楼梯进阶版</p><blockquote><p>n阶台阶，一次可以上1, ,2, 5 ，到达第n阶有几种方法</p></blockquote><p><code>此时状态方程为dp[i]=dp[i-</code>1] + dp[i-2] + dp[i-5] , 进一步转换dp[i] &#x3D; dp[i] + dp[j], j in [1, 2, 5]&#96;</p><p>dp[i] &#x3D; dp[i] + dp[j] 由来是因为初始化的时候dp[i] 都为0 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>steps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            step <span class="token operator">=</span> steps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="零钱兑换II-leetcode-518"><a href="#零钱兑换II-leetcode-518" class="headerlink" title="零钱兑换II-leetcode 518"></a>零钱兑换II-leetcode 518</h2><blockquote><p>给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。</p><p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。</p><p>假设每一种面额的硬币有无限个。</p></blockquote><p><strong>由于题目要求时求组合数，所以要先遍历物品，再遍历背包， 如果先遍历背包再遍历物品是排列问题</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        dp 当第个时的组合数        dp[i] = dp[i] + dp[i-1]        类似于上n 阶台阶， 每次能上[1, 3, 4, 5,]阶，由此推导过来               """</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> conin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>conin<span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>conin<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="零钱兑换-leetcode-322"><a href="#零钱兑换-leetcode-322" class="headerlink" title="零钱兑换-leetcode 322"></a>零钱兑换-leetcode 322</h2><pre class="line-numbers language-none"><code class="language-none">后续补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="不同路径问题-leetcode-62"><a href="#不同路径问题-leetcode-62" class="headerlink" title="不同路径问题 - leetcode 62"></a>不同路径问题 - leetcode 62</h2><blockquote><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124163848466.png" alt="路径问题"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># dp[i][j] 在ij位置处的所有路径</span>        <span class="token comment"># dp[i][j] = dp[i-1][j] + dp[i][j-1]</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span> n <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># m行 n 列</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                 dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划解决-0-1背包问题"><a href="#动态规划解决-0-1背包问题" class="headerlink" title="动态规划解决 0-1背包问题"></a>动态规划解决 0-1背包问题</h2><p>0-1背包， n种物品，每种物品只有一个</p><p>完全背包，n种物品，每种物品有无限个</p><p>多重背包，n种物品，每种物品个数各不相同</p><blockquote><p>01背包</p><p>背包问题含义是N个物品，容量V背包，每件物品仅用一次</p><p>有 N件物品和一个容量是 V的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 vi，价值是wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20221124163942139.png" alt="0-1背包"></p><p>动归五部曲：</p><ol><li><p>定义dp数组以及含义dp[i][j]   0-i之间的物品任取， 放进容量为j的背包里</p></li><li><p>递推公式： 不放物品i   dp[i-1][j]  放物品i dp[i-1][j-weigh(i)]+ value[i]</p></li><li><p>初始化dp数组，</p></li></ol><table><thead><tr><th></th><th>重量</th><th>价值</th></tr></thead><tbody><tr><td>物品0</td><td></td><td></td></tr><tr><td>物品1</td><td></td><td></td></tr><tr><td>物品2</td><td></td><td></td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    设定dp数组： dp[i][j] 第i个物品放入容量为j的背包中的最大价值    推导公式： 当v[i]>j 不放 的dp[i][j] = dp[i-1][j]                当v[i]&lt;j, 放入，max(dp[i][j] = dp[i-1][j-v[i]] + w[i], dp[i][j]=dp[i-1][j])    初始化dp数组：当容量为0时，不论物品，最大价值为0                 当物品为0时，不论背包容量，最大价值为0    """</span>    c <span class="token operator">=</span> <span class="token number">10</span>    w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>    v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>    <span class="token comment"># 初始化dp数组， n * c 的数组</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    w<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    v<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 物体编号</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 背包容量</span>            <span class="token keyword">if</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    solution<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划解决矩阵最小路径之和"><a href="#动态规划解决矩阵最小路径之和" class="headerlink" title="动态规划解决矩阵最小路径之和"></a>动态规划解决矩阵最小路径之和</h2><blockquote><p> 给定一个矩阵m，从左上角开始每次只能向右走或者向下走，最后达到右下角的位置，路径中所有数字累加起来就是路径和，返回所有路径的最小路径和，如果给定的m如下，那么路径1,3,1,0,6,1,0就是最小路径和，返回12. </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>in_matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    定义dp数组； dp[i][j] 表示从出发点（0，0） 到（i, j）的最短路径为dp[i][j]    推到公式： 向下走 dp[i][j] = min(dp[i-1][j] + , dp[i][j-11]) + p[i][j]    初始化dp数组: 当上面为边界时， 值只能从左边来， 当做为边界时，值只能从上边来    循环方向： 从小到大    """</span>    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>in_matrix<span class="token punctuation">)</span>   <span class="token comment"># 行数</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>in_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 列数</span>    <span class="token keyword">for</span> mm <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 上边界</span>        in_matrix<span class="token punctuation">[</span>mm<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">+=</span> in_matrix<span class="token punctuation">[</span>mm<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> nn <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 右边界</span>        in_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">+=</span> in_matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nn<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            in_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>in_matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> in_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> in_matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> in_matrix<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划解决最小路径和经过的路径"><a href="#动态规划解决最小路径和经过的路径" class="headerlink" title="动态规划解决最小路径和经过的路径"></a>动态规划解决最小路径和经过的路径</h2><pre class="line-numbers language-none"><code class="language-none">后续补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="动态规划解决最长回文字串问题"><a href="#动态规划解决最长回文字串问题" class="headerlink" title="动态规划解决最长回文字串问题"></a>动态规划解决最长回文字串问题</h2><blockquote><p> 给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串 </p></blockquote><ul><li>回文串，去除头尾依旧是回文串</li></ul><p>动归五步曲</p><ol><li>d[i][j]    表示下标为i, 和下标为j 是否为回文字串</li><li>递推公式 d[i][j] &#x3D; True , 则d[i+1][j-1] &#x3D;True &amp; s[i] &#x3D; s[j]</li><li>初始化对角线元素（即元素相同时，一定事回文串）</li><li>遍历顺序，由i+1 是下一行，j-1是上一列，所以i,j 的状态转移依赖做下，所以填表要按照列填</li><li>打印dp</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    推到公式：dp[i][j] = True  &lt;====> s[j] == s[j]  and (dp[i+1][j-1]= True or j-i &lt;3)                                         初始化dp数组: 全部初始化为false， 对角线初始化为true    循环方向：因为dp[i][j] 依赖于左下的元素，所以循环方向 从小到大， 从列到行    """</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    begin <span class="token operator">=</span> <span class="token number">0</span>    max_len <span class="token operator">=</span> <span class="token number">0</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>    <span class="token comment"># 循环属  </span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j<span class="token operator">-</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>                   dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>            current <span class="token operator">=</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">and</span> current <span class="token operator">></span> max_len<span class="token punctuation">:</span>                max_len <span class="token operator">=</span> current                begin <span class="token operator">=</span> i    <span class="token keyword">return</span> s<span class="token punctuation">[</span>begin<span class="token punctuation">:</span> begin<span class="token operator">+</span>max_len<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">"babab"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"结果"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划解决分割数组问题"><a href="#动态规划解决分割数组问题" class="headerlink" title="动态规划解决分割数组问题"></a>动态规划解决分割数组问题</h2><blockquote><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。 </p></blockquote><p>​</p><p>该题等价于， 给你len(nums) 物品，每次从nums中取一个数，是否恰好存在取到的数字和恰好等于数组和的一一半。0-1背包问题</p><p>动归五步曲：</p><ol><li>定义dp数组  dp[i][j], 表示从数组的0-ii下标中选取若干个数，是否存在一种选取方案，使得被选取数之和恰好等于j</li></ol><p>初始时，dp中的所有元素都为false</p><ol start="2"><li><p>递推公式： 对于nums[i]      如果选取  dp[i, j] &#x3D; dp[i-1][j]， 如果不选去 dp[i][j] &#x3D; dp[i-1][j-nums[i]]</p></li><li><p>初始化 寻找边界 考虑，如果不取任何数，则被选取的正整数&#x3D;0， 所以对于所有的d[i][0] &#x3D; True, 当i &#x3D;&#x3D; 0时， 只有nums[0]被选取，dp[0][nums[0]] &#x3D;  true</p></li><li><p>确定打印顺序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">待补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><h2 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h2><h3 id="回溯解决组合问题-leetcode77"><a href="#回溯解决组合问题-leetcode77" class="headerlink" title="回溯解决组合问题-leetcode77"></a>回溯解决组合问题-leetcode77</h3><blockquote><p> 给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合 </p></blockquote><p><strong>改变起始点剪枝</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> startindex<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> depth <span class="token operator">==</span> k<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 同层之间为[1, n]， 起始点每次加1 所以同层肯定不会重复</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> depth <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># 数[1, n]为不重复的数字，所以 i+1 坑定不会重复</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回溯解决组合总和I（无重复元素，同一元素可以多次选取）leetcode-39"><a href="#回溯解决组合总和I（无重复元素，同一元素可以多次选取）leetcode-39" class="headerlink" title="回溯解决组合总和I（无重复元素，同一元素可以多次选取）leetcode 39"></a>回溯解决组合总和I（无重复元素，同一元素可以多次选取）leetcode 39</h3><blockquote><p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。</p><p>candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 target 的不同组合数少于 150 个。</p></blockquote><p><strong>改变起始点剪枝， 同一元素多次拿取， 剪枝时需要包含自身</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    注意： 每次向后取，所以要记住上一次的起始位置，所以有startindex    backtracking(path, depath +1, i, total_num) , 应为可以重复放置元素，所以此时startindex为i， 不需要+1    """</span>    <span class="token keyword">def</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> depath<span class="token punctuation">,</span> startindex<span class="token punctuation">,</span> total_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> total_num <span class="token operator">></span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span>                        <span class="token keyword">if</span> total_num <span class="token operator">==</span> target<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>                         <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                total_num <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> depath <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> total_num<span class="token punctuation">)</span>                 path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                total_num <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回溯法解决组合总和II-（有重复元素，-同一元素不可多次选取）-letcode-40"><a href="#回溯法解决组合总和II-（有重复元素，-同一元素不可多次选取）-letcode-40" class="headerlink" title="回溯法解决组合总和II （有重复元素， 同一元素不可多次选取）-letcode 40"></a>回溯法解决组合总和II （有重复元素， 同一元素不可多次选取）-letcode 40</h3><blockquote><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用 一次 。</p><p>注意：解集不能包含重复的组合。 </p></blockquote><p><strong>改变起始点， 同层重复元素剪枝</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    注意： 1. 给定的candidates 有重复的元素， 题目要求解集不能包好重复的元素，此时需要对原来的数组排序，然后通过判断i-1 进行剪枝，防止重复        """</span>    <span class="token keyword">def</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> total_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> total_num<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> total_num <span class="token operator">></span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">></span> startindex <span class="token keyword">and</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                total_num <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                backtracking<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> total_num<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                total_num <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        backtracking<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回溯法解决组合总和III（无重复，-每个元素不可多次选取）-leetcode-216"><a href="#回溯法解决组合总和III（无重复，-每个元素不可多次选取）-leetcode-216" class="headerlink" title="回溯法解决组合总和III（无重复， 每个元素不可多次选取）-leetcode 216"></a>回溯法解决组合总和III（无重复， 每个元素不可多次选取）-leetcode 216</h3><blockquote><p>找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：</p><p>只使用数字1到9<br>每个数字 最多使用一次<br>返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p></blockquote><p><strong>改变起始位置进行剪枝</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> total_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> total_num <span class="token operator">></span> n <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">elif</span> total_num <span class="token operator">==</span> n <span class="token keyword">and</span>  <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                total_num <span class="token operator">+=</span> i                backtracking<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> total_num<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                total_num <span class="token operator">-=</span> i        backtracking<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分割问题"><a href="#分割问题" class="headerlink" title="分割问题"></a>分割问题</h2><h3 id="回溯法解决分割回文串-for-循环里切分字符串-leetcode-131"><a href="#回溯法解决分割回文串-for-循环里切分字符串-leetcode-131" class="headerlink" title="回溯法解决分割回文串(for 循环里切分字符串)-leetcode 131"></a>回溯法解决分割回文串(for 循环里切分字符串)-leetcode 131</h3><blockquote><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p></blockquote><p><strong>改变起始位置，依据回文串的特点剪枝，注意需要切割</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> startindex <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> s<span class="token punctuation">[</span>startindex<span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> ch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>startindex<span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    backtracking<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>        backtracking<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">return</span> result                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拆分字符串使唯一子字符串的数目最大-leetcode-1593"><a href="#拆分字符串使唯一子字符串的数目最大-leetcode-1593" class="headerlink" title="拆分字符串使唯一子字符串的数目最大 - leetcode 1593"></a>拆分字符串使唯一子字符串的数目最大 - leetcode 1593</h3><blockquote><p>给你一个字符串 s ，请你拆分该字符串，并返回拆分后唯一子字符串的最大数目。</p><p>字符串 s 拆分后可以得到若干 非空子字符串 ，这些子字符串连接后应当能够还原为原字符串。但是拆分出来的每个子字符串都必须是 唯一的 。</p><p>注意：子字符串 是字符串中的一个连续字符序列。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    max_num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">maxUniqueSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> startindex <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>max_num <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>max_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                    <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ch <span class="token operator">=</span> s<span class="token punctuation">[</span>startindex<span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> ch <span class="token keyword">in</span> path<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token comment"># if i + 1 == len(s) -1 and len(path) + 1 &lt; max_len:</span>                <span class="token comment">#     continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                backtracking<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracking<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>max_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单词拆分（困难leetcode140）"><a href="#单词拆分（困难leetcode140）" class="headerlink" title="单词拆分（困难leetcode140）"></a>单词拆分（困难leetcode140）</h3><pre class="line-numbers language-none"><code class="language-none">后续补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="子集问题"><a href="#子集问题" class="headerlink" title="子集问题"></a>子集问题</h2><h3 id="子集-leetcode-78-1"><a href="#子集-leetcode-78-1" class="headerlink" title="子集-leetcode 78"></a>子集-leetcode 78</h3><blockquote><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtracing<span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子集II-leetcode-90-同层通过排序后和前一个对比进行剪枝"><a href="#子集II-leetcode-90-同层通过排序后和前一个对比进行剪枝" class="headerlink" title="子集II-leetcode 90 (同层通过排序后和前一个对比进行剪枝)"></a>子集II-leetcode 90 (同层通过排序后和前一个对比进行剪枝)</h3><blockquote><p>给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>startindex<span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">></span>startindex <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtracking<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracking<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递增子序列-同层通过set剪枝-leetcode-491"><a href="#递增子序列-同层通过set剪枝-leetcode-491" class="headerlink" title="递增子序列 (同层通过set剪枝)-leetcode 491"></a>递增子序列 (同层通过set剪枝)-leetcode 491</h3><blockquote><p>给你一个整数数组 nums ，找出并返回所有该数组中不同的递增子序列，递增子序列中 至少有两个元素 。你可以按 任意顺序 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findSubsequences</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            repeat <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> repeat<span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    repeat<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    backtracing<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># repeat.remove(nums[i])</span>        backtracing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h2><h3 id="全排列-回溯法吧标准模板-leetcode-46"><a href="#全排列-回溯法吧标准模板-leetcode-46" class="headerlink" title="全排列(回溯法吧标准模板)-leetcode 46"></a>全排列(回溯法吧标准模板)-leetcode 46</h3><blockquote><p> 给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案 </p></blockquote><p><strong>全排列问题，循环从0开始到len(nums)结束， 通过维护在每一层每个元素的使用情况来进行剪枝</strong></p><p><strong>不包含重复元素</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> depth <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> depth <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>index_<span class="token punctuation">:</span> <span class="token boolean">False</span> <span class="token keyword">for</span> index_<span class="token punctuation">,</span> _ <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全排列II-leetcode-47"><a href="#全排列II-leetcode-47" class="headerlink" title="全排列II-leetcode 47"></a>全排列II-leetcode 47</h3><blockquote><p> 给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。 </p></blockquote><p><strong>通过维护每个元素使用情况，对同层元素进行剪枝，避免同层多次选取，由于给定的元素有可能有重复，需要通过排序和下标状态进行剪枝</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> used<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> used<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> k<span class="token punctuation">:</span> <span class="token boolean">False</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的排列-剑指offer38"><a href="#字符串的排列-剑指offer38" class="headerlink" title="字符串的排列-剑指offer38"></a>字符串的排列-剑指offer38</h3><blockquote><p>输入一个字符串，打印出该字符串中字符的所有排列。</p><p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span>ss <span class="token keyword">for</span> ss <span class="token keyword">in</span> s<span class="token punctuation">]</span>        tmp<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>startindex<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">></span><span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                backtracing<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        backtracing<span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>index_<span class="token punctuation">:</span> <span class="token boolean">False</span> <span class="token keyword">for</span> index_<span class="token punctuation">,</span> _ <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优美的排列-leetcode-526"><a href="#优美的排列-leetcode-526" class="headerlink" title="优美的排列-leetcode 526"></a>优美的排列-leetcode 526</h3><blockquote><p>假设有从 1 到 n 的 n 个整数。用这些整数构造一个数组 perm（下标从 1 开始），只要满足下述条件 之一 ，该数组就是一个 优美的排列 ：</p><p>perm[i] 能够被 i 整除<br>i 能够被 perm[i] 整除<br>给你一个整数 n ，返回可以构造的 优美排列 的 数量 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countArrangement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">if</span> path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">%</span> path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                    backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> used<span class="token punctuation">)</span>                                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        backtracking<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="棋盘问题"><a href="#棋盘问题" class="headerlink" title="棋盘问题"></a>棋盘问题</h2><h3 id="N皇后I-leetcode-51"><a href="#N皇后I-leetcode-51" class="headerlink" title="N皇后I -leetcode 51"></a>N皇后I -leetcode 51</h3><blockquote><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">isVaild</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#判断同一列是否冲突</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment"># 判断左上角是否冲突</span>            i <span class="token operator">=</span> row <span class="token operator">-</span><span class="token number">1</span>            j <span class="token operator">=</span> col <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token comment"># 判断右上角是否冲突</span>            i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span>            j <span class="token operator">=</span> col <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 如果走到最后一行，说明已经找到一个解</span>            <span class="token keyword">if</span> row <span class="token operator">==</span> n<span class="token punctuation">:</span>                temp_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> temp <span class="token keyword">in</span> board<span class="token punctuation">:</span>                    temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>                    temp_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_res<span class="token punctuation">)</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> isVaild<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span>                backtracking<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>        backtracking<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span> res        <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">#初始化棋盘</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 判断该点是否可以放置Q</span>        <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 判断同一列是否满足</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment"># 判断左上角是否满足</span>            i <span class="token operator">=</span> row <span class="token operator">-</span><span class="token number">1</span>            j <span class="token operator">=</span> col <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token comment"># 判断右上是否满足</span>            i <span class="token operator">=</span> row <span class="token operator">-</span><span class="token number">1</span>            j <span class="token operator">=</span> col <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> row <span class="token operator">==</span> n<span class="token punctuation">:</span>                tmp_res <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> temp <span class="token keyword">in</span> board<span class="token punctuation">:</span>                    tmp_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp_res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> isValid<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Q"</span>                backtracing<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"."</span>        backtracing<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">return</span>  res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="N皇后II-leetcode-52"><a href="#N皇后II-leetcode-52" class="headerlink" title="N皇后II-leetcode 52"></a>N皇后II-leetcode 52</h3><blockquote><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n × n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。</p></blockquote><p><strong>本质和N皇后I一样，只不过这个时需要求个数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">totalNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>num             board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            判断该点是否可以放置            """</span>            <span class="token comment"># 判断每一列</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                      <span class="token comment"># 判断左上</span>            i<span class="token punctuation">,</span> j <span class="token operator">=</span> row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token comment"># 判断右上</span>            i<span class="token punctuation">,</span> j <span class="token operator">=</span> row <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span>n<span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">backtracing</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span>  row <span class="token operator">==</span> n<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> isValid<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Q"</span>                backtracing<span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token string">"."</span>        backtracing<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>          <span class="token keyword">return</span> self<span class="token punctuation">.</span>num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="剪枝技巧总结"><a href="#剪枝技巧总结" class="headerlink" title="剪枝技巧总结"></a>剪枝技巧总结</h2><p>总结不完整，后续重新总结</p><ul><li><p>一般对数组有要求，必须是有序数组，这点需要保证 </p></li><li><p>标志位 子集II是个例子， 使用标志位used[i]&#x3D; True or Fasle 进行同层剪枝，使得用过的元素不会重复使用</p></li><li><p>规定起始点</p><ul><li>可以重复选择同一个元素，只需要更新起始点就可以了，使得起始点&gt; 上一次使用的索引就可以了。例如leetcode 39</li><li>不可以使用重复元素，需要不断更新起始点才可以完成剪枝，例如leetcode 子集</li></ul></li><li><p>跨层剪枝： 全排列ii， 必须传递标志位</p></li></ul><h1 id="贪心问题"><a href="#贪心问题" class="headerlink" title="贪心问题"></a>贪心问题</h1><h2 id="分发饼干-leetcode-455"><a href="#分发饼干-leetcode-455" class="headerlink" title="分发饼干-leetcode 455"></a>分发饼干-leetcode 455</h2><blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;&#x3D; g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p></blockquote><p><strong>这里的贪心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        给胃口值为g[i]的孩子分配大小为s[j]的饼干，如果饼干过小，那么寻找下一块饼干，直到找到为止        """</span>        g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token number">0</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分发糖果-leetcode-135"><a href="#分发糖果-leetcode-135" class="headerlink" title="分发糖果-leetcode 135"></a>分发糖果-leetcode 135</h2><blockquote><p>n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><p>每个孩子至少分配到 1 个糖果。<br>相邻两个孩子评分更高的孩子会获得更多的糖果。<br>请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">candy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ratings<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        相邻分为左相邻和有相邻        左相邻规则, 如果i &lt; i+1, 则grade[i+1] = grade[i] +1, 否则， 分配一颗糖果        右相邻规则：        """</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ratings<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ratings<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ratings<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>ratings<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ratings<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无重叠区间-leetcode-435"><a href="#无重叠区间-leetcode-435" class="headerlink" title="无重叠区间-leetcode 435"></a>无重叠区间-leetcode 435</h2><blockquote><p>给定一个区间的集合 intervals ，其中 intervals[i] &#x3D; [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其他区间的空间就越大，就能保留更多的区间。因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间        """</span>        intervals <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span>        i <span class="token operator">=</span> del_num <span class="token operator">=</span> <span class="token number">0</span>        temp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span>  i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                pre_end <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            nex_start<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> nex_start <span class="token operator">&lt;</span> pre_end<span class="token punctuation">:</span>                del_num <span class="token operator">+=</span><span class="token number">1</span>                i <span class="token operator">+</span> <span class="token number">1</span>             <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> del_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳跃游戏-leetcode-55"><a href="#跳跃游戏-leetcode-55" class="headerlink" title="跳跃游戏-leetcode 55"></a>跳跃游戏-leetcode 55</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        由于每层最多可以跳A[i]步，也可以跳0步或1步，因此如果能到达最高层，则说明每一层都可以到达。有了这个条件，说明可以用贪心算法        正向，从0出发，一层一层往上跳，看到最后能不能超过最高层，能超过则说明能到达，否则不能到达        """</span>        <span class="token triple-quoted-string string">"""          0  1  2  3  4        [ 2, 3, 1, 1, 4]        """</span>        <span class="token comment"># 维护最远下标</span>        last_index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> last_index<span class="token punctuation">:</span>                last_index <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>last_index<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> last_index <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳跃游戏II-leetcode-45"><a href="#跳跃游戏II-leetcode-45" class="headerlink" title="跳跃游戏II-leetcode 45"></a>跳跃游戏II-leetcode 45</h2><blockquote><p>给你一个非负整数数组 nums ，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>假设你总是可以到达数组的最后一个位置。</p></blockquote><p>**我们维护当前能够到达的最大下标位置，记为边界。我们从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加 1 **</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span><span class="token comment">#     def jump(self, nums: List[int]) -> int:</span><span class="token comment">#         """</span><span class="token comment">#         定义dp数组 dp[i] 表示在i 位置处的最小跳跃次数</span><span class="token comment">#         递推公式： dp[i]= min(dp[i], dp[j] +1)</span><span class="token comment">#         动态规划会超时</span><span class="token comment">#         """</span><span class="token comment">#         size = len(nums)</span><span class="token comment">#         dp = [float("inf") for _ in range(size)]</span><span class="token comment">#         dp[0] = 0</span><span class="token comment">#         for i in range(1, size):</span><span class="token comment">#             for j in range(i):</span><span class="token comment">#                 if j + nums[j] >= i:</span><span class="token comment">#                     dp[i] = min(dp[i], dp[j] + 1)</span><span class="token comment">#         return dp[size - 1]</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        维护跳至每个下标的最小次数，则，跳至最后一个位置的次数就为最小        """</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        max_pos <span class="token operator">=</span> <span class="token number">0</span>        step <span class="token operator">=</span> <span class="token number">0</span>        end <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;=</span>max_pos<span class="token punctuation">:</span>                max_pos <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_pos<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> end<span class="token punctuation">:</span>                step <span class="token operator">+=</span> <span class="token number">1</span>                end <span class="token operator">=</span> max_pos        <span class="token keyword">return</span> step<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="股票买卖的最佳时机-leetcode-121"><a href="#股票买卖的最佳时机-leetcode-121" class="headerlink" title="股票买卖的最佳时机-leetcode 121"></a>股票买卖的最佳时机-leetcode 121</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        假设当天为最高点卖出，只要直到前面的最低点，就可以算法当前的最大利润        """</span>        min_p <span class="token operator">=</span> <span class="token number">0</span>        max_val <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                min_p <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">continue</span>            max_val <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_val<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min_p<span class="token punctuation">)</span>            min_p <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_p<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max_val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="股票买卖的最佳时机II-leetcode-122"><a href="#股票买卖的最佳时机II-leetcode-122" class="headerlink" title="股票买卖的最佳时机II-leetcode 122"></a>股票买卖的最佳时机II-leetcode 122</h2><blockquote><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p><p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p><p>返回 你能获得的 最大 利润 。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        找到每一个上坡，相加就是最终的结果        """</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i  <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                ans <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法与二分查找</title>
      <link href="/posts/17141.html"/>
      <url>/posts/17141.html</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><blockquote><p>原理： 拿每次循环出来的元素与该元素后面的进行比较，如果上面一个比自己小，就将自己和上面的元素交换位置，一次比较</p><p>第一轮结束后，最后的元素一定是最大的</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort2</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">return</span> li<span class="token comment"># 优化版</span>ef bubble_sort2<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exchange <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                exchange <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> exchange<span class="token punctuation">:</span>  <span class="token comment"># 没有交换说明有序了</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">return</span> li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><ul><li>设定第一个元素为最小记录此时的最小下标，然后用这个最小下标对应的元素一次和无序列表中的元素比较，找出此时的最小下标</li><li>每一轮循环，都会将最小下标对应的元素交换至有序部分的末尾</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_loc <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_loc <span class="token operator">=</span> j        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">return</span> li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><ul><li>在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">return</span> li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">return</span> li<span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    <span class="token keyword">return</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> li    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>li<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> r <span class="token operator">=</span> <span class="token number">0</span>    tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> l <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> r <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            l<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            r<span class="token operator">+=</span><span class="token number">1</span>    tmp <span class="token operator">+=</span> left<span class="token punctuation">[</span>l<span class="token punctuation">:</span><span class="token punctuation">]</span>    tmp <span class="token operator">+=</span> right<span class="token punctuation">[</span>r<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排"><a href="#堆排" class="headerlink" title="堆排"></a>堆排</h2><p> 待补充</p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                <span class="token keyword">if</span> left <span class="token operator">&lt;</span> ri<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/46563.html"/>
      <url>/posts/46563.html</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li>正则表达式是匹配类符号</li><li>正则表达式是一种可以让一些复杂字符串问题变得简单的工具</li></ul><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><ul><li>fullmatch(正则表达式， 字符串) - 判断整个字符串是否满足正则表达式描述的规则</li><li>python提供正则表达式的方法：提供一个字符串，字符串的内容是一个正则表达式，这个字符串的最前面需要加r</li><li>python的正则表达式：r’正则‘</li></ul><h2 id="正则语法内容"><a href="#正则语法内容" class="headerlink" title="正则语法内容"></a>正则语法内容</h2><ul><li>包括：匹配类符号、控制次数符号、分组符号、分支、检测类符号</li></ul><h2 id="匹配类符号"><a href="#匹配类符号" class="headerlink" title="匹配类符号"></a>匹配类符号</h2><h3 id="普通符号（字符）"><a href="#普通符号（字符）" class="headerlink" title="普通符号（字符）"></a>普通符号（字符）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> re <span class="token keyword">import</span> fullmatchresult <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'abc'</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="匹配任意一个字符"><a href="#匹配任意一个字符" class="headerlink" title=". 匹配任意一个字符"></a>. 匹配任意一个字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> fulllmtch<span class="token punctuation">(</span><span class="token string">r".bc"</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="d匹配任意一个数字字符"><a href="#d匹配任意一个数字字符" class="headerlink" title="\d匹配任意一个数字字符"></a>\d匹配任意一个数字字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'x\dy'</span><span class="token punctuation">,</span> <span class="token string">'x7y'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="s匹配任意一个空白字符"><a href="#s匹配任意一个空白字符" class="headerlink" title="\s匹配任意一个空白字符"></a>\s匹配任意一个空白字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'x\s\y'</span><span class="token punctuation">,</span> x\ny<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="D匹配任意一个非数字"><a href="#D匹配任意一个非数字" class="headerlink" title="\D匹配任意一个非数字"></a>\D匹配任意一个非数字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'x\Dy'</span><span class="token punctuation">,</span> <span class="token string">'xmy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="S匹配任意一个非空白字符"><a href="#S匹配任意一个非空白字符" class="headerlink" title="\S匹配任意一个非空白字符"></a>\S匹配任意一个非空白字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'x\Sy'</span><span class="token punctuation">,</span> <span class="token string">'xmy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符集-匹配字符集中的任意字符"><a href="#字符集-匹配字符集中的任意字符" class="headerlink" title="字符集-匹配字符集中的任意字符"></a>字符集-匹配字符集中的任意字符</h3><ul><li>v[mnab] - 匹配m或者n或者a或者b</li><li>[\dmn]、[m\dn] - 匹配任意数字或者m或者n</li><li>[\d\s] - 匹配任意数字或者任意空白</li><li>[1-9] - 匹配1到9中任意数字</li><li>[0-9] - 和\d效果一样</li><li>[a-z] - 匹配任意一个小写字母</li><li>[1-5a-z] - 匹配数字1到5或者任意小写字母</li><li>[A-Za-z] - 匹配任意一个字母</li><li>[\u4e00-\u9fa5] - 匹配任意一个中文</li><li>[\u4e00-\u9fa5wp] - 匹配任意一个中文或者w或者p</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'x[Mn3+]y'</span><span class="token punctuation">,</span> <span class="token string">'xMy'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> fullmatch<span class="token punctuation">(</span><span class="token string">r'x[\u4e00-\u9fa5\dwp]y'</span><span class="token punctuation">,</span> <span class="token string">'x3y'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符集-匹配不在字符集中的任意字符"><a href="#字符集-匹配不在字符集中的任意字符" class="headerlink" title="[^字符集]-匹配不在字符集中的任意字符"></a>[^字符集]-匹配不在字符集中的任意字符</h3><pre class="line-numbers language-none"><code class="language-none">result &#x3D; fullmatch(r&#39;x[^mn]y&#39;, &#39;x-y&#39;)print(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="控制次数符号"><a href="#控制次数符号" class="headerlink" title="控制次数符号"></a>控制次数符号</h3><h4 id="0次或者无数次"><a href="#0次或者无数次" class="headerlink" title="* 0次或者无数次"></a>* 0次或者无数次</h4><ul><li>* 任意次数 a* 出现0次或者多次a</li><li>\d* 任意数字出现0次或者多次</li><li>[abc]* [abc]出现0次或者多次</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'xa*y'</span><span class="token punctuation">,</span> <span class="token string">'xy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'xa*y'</span><span class="token punctuation">,</span> <span class="token string">'xay'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'xa*y'</span><span class="token punctuation">,</span> <span class="token string">'xaaaay'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'x\d*y'</span><span class="token punctuation">,</span> <span class="token string">'xy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'x\d*y'</span><span class="token punctuation">,</span> <span class="token string">'x323232312y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1次或者多次（至少一次）"><a href="#1次或者多次（至少一次）" class="headerlink" title="+  1次或者多次（至少一次）"></a>+  1次或者多次（至少一次）</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'xa+y'</span><span class="token punctuation">,</span> <span class="token string">'xy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'xa+y'</span><span class="token punctuation">,</span> <span class="token string">'xay'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'xa+y'</span><span class="token punctuation">,</span> <span class="token string">'xaaaay'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="0次或者1次"><a href="#0次或者1次" class="headerlink" title="?0次或者1次"></a>?0次或者1次</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'[+-]?[1-9]\d\d'</span><span class="token punctuation">,</span> <span class="token string">'810'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'9?xy'</span><span class="token punctuation">,</span> <span class="token string">'9xy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="n-次"><a href="#n-次" class="headerlink" title="{n}次"></a>{n}次</h4><ul><li>{n} n次</li><li>{m, n} m-n次</li><li>{m, } 至少m次</li><li>{，n} 至多n次</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'1[3-9]\d&#123;9&#125;'</span><span class="token punctuation">,</span> <span class="token string">'13123456789'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'1[3-9]\d&#123;1,2&#125;'</span><span class="token punctuation">,</span> <span class="token string">'1345'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'1[3-9]\d&#123;5,&#125;'</span><span class="token punctuation">,</span> <span class="token string">'131234567'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'1[3-9\d&#123;, 3&#125;]'</span><span class="token punctuation">,</span> <span class="token string">'13123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul><li>整体操作： 将正则的一部分用（）包裹起来表示一个分组，然后整体控制次数</li><li>重复匹配结果： 在正则中用（）添加分组，然后在正则用\M来重复他前面第M分分组的匹配结果</li><li>捕获：findall函数在正则表达式中有分组的时候，值获取分组匹配到的结果</li></ul><h4 id="贪婪匹配和非贪婪匹配"><a href="#贪婪匹配和非贪婪匹配" class="headerlink" title="贪婪匹配和非贪婪匹配"></a>贪婪匹配和非贪婪匹配</h4><ul><li><p>在匹配次数不确定的时候，匹配次数有贪婪和非贪婪两种模式</p></li><li><p>贪婪模式：如果多种匹配次数都可以匹配成功，最后取最大的次数进行匹配 </p></li><li><p>默认贪婪模式：*、 + 、{m, n}、 {m, }, {, n}</p></li><li><p>非贪婪模式： 如果多种匹配次数都可以匹配成功，最后取最小的次数进行匹配 </p><ul><li>*?、+?、{M,N}?、{M,}?、{,N}?</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 贪婪</span>print<span class="token punctuation">(</span>search<span class="token punctuation">(</span><span class="token string">'a.+b'</span>, <span class="token string">'上访户大富豪amnbxybmnhjb按实际符合sdf'</span><span class="token punctuation">))</span>      <span class="token comment"># 'amnbxyb'</span><span class="token comment"># 非贪婪</span>print<span class="token punctuation">(</span>search<span class="token punctuation">(</span><span class="token string">'a.+?b'</span>, <span class="token string">'上访户大富豪amnbxybmnhjb按实际符合sdf'</span><span class="token punctuation">))</span>     <span class="token comment"># 'amnb'</span>print<span class="token punctuation">(</span>search<span class="token punctuation">(</span><span class="token string">'a.+b'</span>, <span class="token string">'上访户大富豪axyb按实际符合sdf'</span><span class="token punctuation">))</span>print<span class="token punctuation">(</span>search<span class="token punctuation">(</span><span class="token string">'a.+?b'</span>, <span class="token string">'上访户大富豪axyb按实际符合sdf'</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h3><ul><li><p>整体操作：将正则的一部分用()括起来表示一个分组，然后整体控制次数</p></li><li><p>重复匹配结果: 在正则中用()添加分组，然后在正则用 \M 来重复它前面第M个分组的匹配结果</p></li><li><p>捕获：findall函数在正则表达式中有分组的时候，只获取分组匹配到的结果</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1） 整体操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'([a-z]&#123;2&#125;\d&#123;2&#125;)+'</span><span class="token punctuation">,</span> <span class="token string">'an23an23km78an23an23'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'(ab)&#123;3&#125;'</span><span class="token punctuation">,</span> <span class="token string">'ababab'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2)重复匹配结果</span><span class="token comment"># abc263mn263、abc009mn009</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'abc(\d&#123;3&#125;)mn\1'</span><span class="token punctuation">,</span> <span class="token string">'abc800mn800'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'abc(\d&#123;3&#125;)mn\1'</span><span class="token punctuation">,</span> <span class="token string">'abc800mn801'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># None</span><span class="token comment"># am622-622am、mk293-293mk</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'([a-z]&#123;2&#125;)(\d&#123;3&#125;)-\2\1'</span><span class="token punctuation">,</span> <span class="token string">'mk293-293mk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3)捕获</span>str1 <span class="token operator">=</span> <span class="token string">'大姐夫237收到w82hjjk===23sjs923.s,数据ssd282'</span>result <span class="token operator">=</span> findall<span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># ['237', '82', '23', '923', '282']</span>result <span class="token operator">=</span> findall<span class="token punctuation">(</span><span class="token string">r'[a-zA-Z]\d+'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># ['w82', 's923', 'd282']</span>result <span class="token operator">=</span> findall<span class="token punctuation">(</span><span class="token string">r'[a-zA-Z](\d+)'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># ['82', '923', '282']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li>正则1|正则2|正则3</li><li>注意：如果是正则的部分要进行分支选择，需要将部分分支地方加()</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># abc12、abcMK、abc29、abcTY</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'abc\d&#123;2&#125;|abc[A-Z]&#123;2&#125;'</span><span class="token punctuation">,</span> <span class="token string">'abc89'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'abc(\d&#123;2&#125;|[A-Z]&#123;2&#125;)'</span><span class="token punctuation">,</span> <span class="token string">'abcKS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检测类符号"><a href="#检测类符号" class="headerlink" title="检测类符号"></a>检测类符号</h3><h4 id="单词边界-b"><a href="#单词边界-b" class="headerlink" title="单词边界\b"></a>单词边界\b</h4><h4 id="字符串开头"><a href="#字符串开头" class="headerlink" title="字符串开头^"></a>字符串开头^</h4><h4 id="字符串结尾"><a href="#字符串结尾" class="headerlink" title="字符串结尾$"></a>字符串结尾$</h4><h1 id="re模块-1"><a href="#re模块-1" class="headerlink" title="re模块"></a>re模块</h1><ul><li>fullmatch(正则, 字符串) - 完全匹配；判断整个字符串是否正则描述的规则，如果不满足结果是None，满足返回匹配对象</li><li>match(正则, 字符串) - 匹配字符串开头;如果不匹配返回None，否则返回匹配对象</li><li>search(正则, 字符串) - 在整个字符串中查找第一个满足正则表达式的子串,如果找不到返回None,否则返回匹配对象</li><li>findall(正则, 字符串) - 获取整个字符串中所有满足正则的子串，返回一个列表 (注意分组问题)</li><li>finditer(正则， 字符串) - 获取整个字符串中所有满足正则的子串，返回一个迭代器，迭代器中的元素是匹配对象</li><li>sub(正则, 字符串1， 字符串2) - 将字符串2中所有满足正则的字串全部替换成字符串1</li><li>split(正则, 字符串) - 将字符串中所有满足正则的子串作为切割点对字符串进行切割</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'\d&#123;3&#125;'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'\d&#123;3&#125;'</span><span class="token punctuation">,</span> <span class="token string">'123阿萨德发234234asfas'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;3&#125;'</span><span class="token punctuation">,</span> <span class="token string">'阿萨892德发208asf1023as'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>findall<span class="token punctuation">(</span><span class="token string">r'\d&#123;3&#125;'</span><span class="token punctuation">,</span> <span class="token string">'阿萨892德发208asf1023as'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>findall<span class="token punctuation">(</span><span class="token string">r'[a-z](\d&#123;3&#125;)'</span><span class="token punctuation">,</span> <span class="token string">'阿萨892德发208asf1023as'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token string">'how are you? i am fine! thank you! and you?'</span>result <span class="token operator">=</span> str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">,</span> <span class="token string">'me'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> sub<span class="token punctuation">(</span><span class="token string">r'you|i'</span><span class="token punctuation">,</span> <span class="token string">'me'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token string">'阿萨892德发208asf1023as'</span>result <span class="token operator">=</span> sub<span class="token punctuation">(</span><span class="token string">r'\d'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token string">'how are you? i am fine! thank you! and you?'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>split<span class="token punctuation">(</span><span class="token string">r'you'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token string">'hsj+23g-shdf-ahsf-水电费+234'</span><span class="token keyword">print</span><span class="token punctuation">(</span>split<span class="token punctuation">(</span><span class="token string">r'[+-]'</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="用户名匹配"><a href="#用户名匹配" class="headerlink" title="用户名匹配"></a>用户名匹配</h2><ul><li>要求： 用户名只能包好数字字母下划线</li><li>不能以数字开头</li><li>长度在6-16位</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">fullmatch<span class="token punctuation">(</span><span class="token string">r'[a-zA-Z_][\da-zA-Z_]&#123;5, 15&#125;'</span><span class="token punctuation">,</span><span class="token string">''</span>we_are_family9339<span class="token string">')'</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="密码匹配"><a href="#密码匹配" class="headerlink" title="密码匹配"></a>密码匹配</h2><ul><li>不能包含!@#¥%^&amp;*这些特殊符号 </li><li>必须以字母开头 </li><li>⻓度在 6 到 12 位范围内</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">fullmatch<span class="token punctuation">(</span><span class="token string">r'[a-zA-Z][^!@#¥%^&amp;*]&#123;5, 11&#125;'</span><span class="token punctuation">,</span> <span class="token string">'s123!56'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ipv4-格式的-ip-地址匹配"><a href="#ipv4-格式的-ip-地址匹配" class="headerlink" title="ipv4 格式的 ip 地址匹配"></a>ipv4 格式的 ip 地址匹配</h2><ul><li>IP地址的范围是 0.0.0.0 - 255.255.255.255</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">fullmatch<span class="token punctuation">(</span><span class="token string">r'(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]\.)&#123;3&#125;\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提取用户输入数据中的数值"><a href="#提取用户输入数据中的数值" class="headerlink" title="提取用户输入数据中的数值"></a>提取用户输入数据中的数值</h2><ul><li>数值包括正负数 还包括整数和小数在内 </li><li>求和</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'-3.14good87nice19bye'</span>result <span class="token operator">=</span> findall<span class="token punctuation">(</span><span class="token string">r'[+-\d]\d*[.]\d*?'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> ret <span class="token keyword">in</span> result<span class="token punctuation">:</span> num <span class="token operator">+=</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证输入内容只能是汉字"><a href="#验证输入内容只能是汉字" class="headerlink" title="验证输入内容只能是汉字"></a>验证输入内容只能是汉字</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">fullmatch<span class="token punctuation">(</span><span class="token string">r'[\u4e00-\u9fa5]+'</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="匹配整数或者小数"><a href="#匹配整数或者小数" class="headerlink" title="匹配整数或者小数"></a>匹配整数或者小数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">fullmatch<span class="token punctuation">(</span><span class="token string">r'[+-]?\d*[.]?\d*'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="验证用户名和qq号是否有效，并给出对应的提示"><a href="#验证用户名和qq号是否有效，并给出对应的提示" class="headerlink" title="验证用户名和qq号是否有效，并给出对应的提示"></a>验证用户名和qq号是否有效，并给出对应的提示</h2><ul><li>用户名必须由字母、数字或下划线构成且长度在6~20个字符之间</li><li>QQ号是5~12的数字且首位不能为0</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span>qq <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入qq号码'</span><span class="token punctuation">)</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'[a-zA-Z\d_]&#123;6, 20&#125;'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>fullmatch<span class="token punctuation">(</span><span class="token string">r'[1-9]\d&#123;4, 11&#125;'</span><span class="token punctuation">,</span> qq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提取一首诗中的每一句话"><a href="#提取一首诗中的每一句话" class="headerlink" title="提取一首诗中的每一句话"></a>提取一首诗中的每一句话</h2><pre class="line-numbers language-none"><code class="language-none">poem &#x3D; &#39;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#39;result &#x3D; split(r&#39;[,。]&#39;,poem)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="d，-W，-s，-B，-，-，-，-分别是什么"><a href="#d，-W，-s，-B，-，-，-，-分别是什么" class="headerlink" title="\d，\W，\s，\B，.，*，+，?分别是什么"></a>\d，\W，\s，\B，.，*，+，?分别是什么</h2><ul><li><p>\d 表示匹配数字</p></li><li><p>\w 用于匹配字母，数字或下划线字符 </p></li><li><p>\W 用于匹配所有与\w不匹配的字符 </p></li><li><p>\s 匹配空格符</p></li><li><p>\B 表示在开头结尾之间</p></li><li><p>. 表示匹配任意一个字符</p></li><li><p>*表示出现任意多次</p></li><li><p>+表示至少出现一次</p></li><li><p>？表示最多出现一次</p></li></ul><h2 id="x3D-a-，-lt-a-，-lt-x3D-a-，-a-分别是什么"><a href="#x3D-a-，-lt-a-，-lt-x3D-a-，-a-分别是什么" class="headerlink" title="(?&#x3D;a)，(?&lt;!a)，(?&lt;&#x3D;a)，(?!a)分别是什么"></a>(?&#x3D;a)，(?&lt;!a)，(?&lt;&#x3D;a)，(?!a)分别是什么</h2><ul><li>(?&#x3D;a) 零宽正向先行断言    该正则匹配某字符前面的位置。 </li><li>(?!a)零宽负向先行断言     与上面的(?!a)相反，这个表达式匹配后面没有a字符的位置 </li><li>(?&lt;&#x3D;a)零宽正向后行断言   与(?&#x3D;a)位置相反，匹配a字符后面的位置 </li><li>(?&lt;!a)零宽负向后行断言    与(?!a)位置相反，匹配前面没有a字符的位置</li></ul><h2 id="什么是贪婪匹配和懒惰匹配"><a href="#什么是贪婪匹配和懒惰匹配" class="headerlink" title="什么是贪婪匹配和懒惰匹配"></a>什么是贪婪匹配和懒惰匹配</h2><ul><li>贪婪匹配  如果多种匹配次数都可以匹配成功，最后取最大的次数进行匹配</li><li>懒惰匹配  如果多种匹配次数都可以匹配成功，最后取最小的次数进行匹配</li></ul><h2 id="d-1-2-这样的写法对吗？请说明理由"><a href="#d-1-2-这样的写法对吗？请说明理由" class="headerlink" title="\d{1,2}*这样的写法对吗？请说明理由"></a>\d{1,2}*这样的写法对吗？请说明理由</h2><p> <code>不正确，这是因为所有限定类元字符后只能紧跟?这个限定类元字符，如果``紧跟其他限定类元字符则会报错。正确的写法是(\d&#123;1,2&#125;)*</code> </p><h2 id="写出验证用户名的正则表达式，用户名只能输入英文、数字和下划线。"><a href="#写出验证用户名的正则表达式，用户名只能输入英文、数字和下划线。" class="headerlink" title="写出验证用户名的正则表达式，用户名只能输入英文、数字和下划线。"></a>写出验证用户名的正则表达式，用户名只能输入英文、数字和下划线。</h2><pre class="line-numbers language-none"><code class="language-none">[a-zA-Z\d_]+*     ^\w+$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="验证用户密码，长度在6-18-之间，只能包含英文和数字"><a href="#验证用户密码，长度在6-18-之间，只能包含英文和数字" class="headerlink" title="验证用户密码，长度在6~18 之间，只能包含英文和数字"></a>验证用户密码，长度在6~18 之间，只能包含英文和数字</h2><pre class="line-numbers language-none"><code class="language-none">^[a-zA-Z\d_]&#123;6, 18&#125;$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="验证用户密码强度，最少6位，至少包括1个大写字母、1个小写字母、1个数字和1个特殊字符"><a href="#验证用户密码强度，最少6位，至少包括1个大写字母、1个小写字母、1个数字和1个特殊字符" class="headerlink" title="验证用户密码强度，最少6位，至少包括1个大写字母、1个小写字母、1个数字和1个特殊字符"></a>验证用户密码强度，最少6位，至少包括1个大写字母、1个小写字母、1个数字和1个特殊字符</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">^</span><span class="token punctuation">(</span>?<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>\d<span class="token punctuation">)</span><span class="token punctuation">(</span>?<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">[</span>A<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>?<span class="token operator">=</span>a<span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">(</span>?<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">[</span><span class="token operator">^</span>  `!@<span class="token comment">#\$%\^&amp;\*\(\)\_\+\-\=\&#123;\&#125;\[\]\\\|\/?\.,>&lt;;:'" ]).&#123;6,&#125;$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="匹配Email地址"><a href="#匹配Email地址" class="headerlink" title="匹配Email地址"></a>匹配Email地址</h2><pre class="line-numbers language-none"><code class="language-none"># zhangsan-001@gmail.com[\w-]+@[\w]+\.[\w-]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="匹配yyyy-mm-dd格式的日期"><a href="#匹配yyyy-mm-dd格式的日期" class="headerlink" title="匹配yyyy-mm-dd格式的日期"></a>匹配yyyy-mm-dd格式的日期</h2><pre class="line-numbers language-none"><code class="language-none">^[\d]&#123;4&#125;-(0[1-9]|1[1-2)-(0[1-9]|1[0-9]|2[0-9]|3[0-1]$)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="用正则表达式匹配出身份证号中的出生日期"><a href="#用正则表达式匹配出身份证号中的出生日期" class="headerlink" title="用正则表达式匹配出身份证号中的出生日期"></a>用正则表达式匹配出身份证号中的出生日期</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reresult <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;6&#125;(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;4&#125;'</span><span class="token punctuation">,</span> <span class="token string">'640521199307212518'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="匹配-lt-a-lt-123-gt-lt-456-gt-a-gt-中的数字"><a href="#匹配-lt-a-lt-123-gt-lt-456-gt-a-gt-中的数字" class="headerlink" title="匹配&lt;a &lt;123&gt; &lt;456&gt; a&gt;中的数字"></a>匹配&lt;a &lt;123&gt; &lt;456&gt; a&gt;中的数字</h2><pre class="line-numbers language-none"><code class="language-none">str1 &#x3D; &#39;&lt;a &lt;123&gt; &lt;456&gt; a&gt;&#39;result &#x3D; re.findall(r&#39;(?&lt;&#x3D;&lt;)\d+(?&#x3D;&gt;)&#39;, str1)print(result)             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="匹配以下HTML中的URL"><a href="#匹配以下HTML中的URL" class="headerlink" title="匹配以下HTML中的URL"></a>匹配以下HTML中的URL</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> restr1  <span class="token operator">=</span> <span class="token string">"&lt;link rel=“search” href=“https://www.baidu.com” />(?&lt;=href=\s?“).*?(?=”\s?/>)"</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(?&lt;=href=“).*(?=” />)'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="匹配以-com结尾的web域名"><a href="#匹配以-com结尾的web域名" class="headerlink" title="匹配以.com结尾的web域名"></a>匹配以.com结尾的web域名</h2><p>·</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go基础</title>
      <link href="/posts/65207.html"/>
      <url>/posts/65207.html</url>
      
        <content type="html"><![CDATA[<h1 id="go语言安装和介绍"><a href="#go语言安装和介绍" class="headerlink" title="go语言安装和介绍"></a>go语言安装和介绍</h1><h2 id="go语言介绍"><a href="#go语言介绍" class="headerlink" title="go语言介绍"></a>go语言介绍</h2><blockquote><p>go语言是googe在2009年正式对外发布的一门编程语言</p><p>根据go开发者自述，近10多年，计算机从单机c语言时代到现在互联网时代的java，都没有出现特别令人满意的语言。c++给人的感觉是， 花了100%的精力，却只有60%的开发效率，产能比太低，java和c#又来源于c++</p><p>随着硬件的不断升级，这些语言不能充分的利用硬件以及cpu</p><p>因此，一门高效、简洁、开源的语言诞生了</p><p>go语言不仅拥有静态编译语言的安全和高性能，而又达到了动态语言的开发速度和易维护性</p><p>有人形容：go &#x3D; c + python</p><p>go非常有潜力，目前几个火爆的场景下都有应用，比如web开发、区块链、游戏服务端开发、分布式&#x2F;云计算</p></blockquote><h2 id="go语言解决的问题"><a href="#go语言解决的问题" class="headerlink" title="go语言解决的问题"></a>go语言解决的问题</h2><ul><li>多核硬件下的资源利用问题</li><li>超大规模分布式计算集群</li><li>web开发模式导致的前所未有的开发规模和更新速度</li></ul><h2 id="win安装go语言"><a href="#win安装go语言" class="headerlink" title="win安装go语言"></a>win安装go语言</h2><h3 id="下载go"><a href="#下载go" class="headerlink" title="下载go"></a>下载go</h3><ul><li><p><a href="https://golang.org/dl/">go官网下载</a></p></li><li><p><a href="https://golang.google.cn/dl/">go镜像站下载</a></p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1667039669273.png" alt="1667039669273"></p></li></ul><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><ul><li><p>go 1.11后无需手动配置环境变量，使用go mod 管理项目</p></li><li><p>也不需要必须把项目放在gopath 目录下，可以再任何目录下新建项目</p></li><li><p>go1.13以后彻底不需要gopath了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version   <span class="token comment"># 查看版本</span>go <span class="token function">env</span>       <span class="token comment"># 查看环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><ul><li><p>这里的更新不是指版本的更新,而是指引入新依赖，不使用 go get ,我怎么在项目中加新包呢?</p></li><li><p>直接项目中 import 这个包,之后更新依赖即可依赖更新请从检测依赖部分一直执行即可,即</p></li><li><p>参考：<a href="https://blog.csdn.net/weixin_41519463/article/details/103501485">https://blog.csdn.net/weixin_41519463/article/details/103501485</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go mod init      <span class="token comment"># 初始化go.mod</span>go mod tidy      <span class="token comment"># 更新依赖文件</span>go mod download    <span class="token comment"># 下载依赖文件</span>go mod vendor     <span class="token comment"># 将依赖转移至本地的vendor文件</span>go mod edit      <span class="token comment"># 手动修改依赖文件</span>go mod graph      <span class="token comment"># 打印依赖图</span>go mod verify     <span class="token comment"># 校验依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h1><h2 id="下载vscode"><a href="#下载vscode" class="headerlink" title="下载vscode"></a>下载vscode</h2><ul><li><a href="https://code.visualstudio.com/">官网</a></li></ul><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p> <img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20210513210124050.a52b64f4.png" alt="image-20210513210124050.a52b64f4"></p><h2 id="安装go语言插件"><a href="#安装go语言插件" class="headerlink" title="安装go语言插件"></a>安装go语言插件</h2><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20210513210342871.8ce13397.png" alt="image-20210513210342871.8ce13397"></p><h2 id="运行一个示例程序"><a href="#运行一个示例程序" class="headerlink" title="运行一个示例程序"></a>运行一个示例程序</h2><ul><li>进入项目目录新建文件main.go</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// 导入语句</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 程序的入口</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打开终端选择cmd或者powershell</li><li>执行命令<strong>go build hello.go</strong></li><li>目录下会生成 hello.exe 然后运行命令<strong>hello.exe</strong>会看到命令行输出hello world</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>go run</p><ul><li>像执行脚本文件一样执行go代码</li></ul></li><li><p>go install</p><ul><li><p>分为两步：</p><ol><li><p>执行go build命令，然</p></li><li><p>后将exe 拷贝到go path路径下，这样在环境变量里就可以用了</p></li></ol></li></ul></li></ul><h2 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">CGO_ENABLED&#x3D;0 GOOS&#x3D;linuxGOARCH&#x3D;amd64go build main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vscode-切换默认终端"><a href="#vscode-切换默认终端" class="headerlink" title="vscode 切换默认终端"></a>vscode 切换默认终端</h2><ul><li><p>选择默认配置文件</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230316101919989.png" alt="image-20230316101919989"></p></li><li><p>选择cmd配置文件</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230316102038271.png" alt="image-20230316102038271"></p></li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="go语言文件的基本结构"><a href="#go语言文件的基本结构" class="headerlink" title="go语言文件的基本结构"></a>go语言文件的基本结构</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// 导入语句</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 函数的外部只能是标识符（变量、常量、函数、类型）的声明</span><span class="token comment">// 函数的入口</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量的定义方式"><a href="#变量的定义方式" class="headerlink" title="变量的定义方式"></a>变量的定义方式</h2><h3 id="var-声明单个变量"><a href="#var-声明单个变量" class="headerlink" title="var 声明单个变量"></a>var 声明单个变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">int</span><span class="token keyword">var</span> isOk <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="var-批量声明变量"><a href="#var-批量声明变量" class="headerlink" title="var 批量声明变量"></a>var 批量声明变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span>name strigage <span class="token builtin">int</span>isOk <span class="token builtin">bool</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> S1 <span class="token builtin">string</span><span class="token operator">=</span><span class="token string">"张三"</span>  <span class="token comment">// 声明变量同时赋值</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> <span class="token string">"张三"</span>    age <span class="token operator">=</span> <span class="token number">16</span>    isOk <span class="token operator">=</span> <span class="token boolean">true</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span> <span class="token comment">// 在终端中打印内容</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%s"</span>，name<span class="token punctuation">)</span> <span class="token comment">// %s占位符，使用name这个变量的值替换占位符</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 打印完指定的内容之后会在后面加一个换行符</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明变量同时赋值"><a href="#声明变量同时赋值" class="headerlink" title="声明变量同时赋值"></a>声明变量同时赋值</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span>name strigage <span class="token builtin">int</span>isOk <span class="token builtin">bool</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> S1 <span class="token builtin">string</span><span class="token operator">=</span><span class="token string">"张三"</span>  <span class="token comment">// 声明变量同时赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表推导式声明变量"><a href="#列表推导式声明变量" class="headerlink" title="列表推导式声明变量"></a>列表推导式声明变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="函数内使用简短变量"><a href="#函数内使用简短变量" class="headerlink" title="函数内使用简短变量"></a>函数内使用简短变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 只能在函数里使用</span><span class="token keyword">func</span> main<span class="token punctuation">&#123;</span>age <span class="token operator">:=</span> <span class="token number">18</span>name <span class="token operator">:=</span> <span class="token string">"张三"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简短变量"><a href="#简短变量" class="headerlink" title="简短变量"></a>简短变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"匿名变量"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>content<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>go语言中声明的局部变量必须使用，不使用编译不过去</strong></p><p><strong>go语言中变量的命名建议使用小驼峰</strong></p><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 函数外面只能防止标识符（函数/变量/常数/类型）的申明</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">int</span><span class="token keyword">var</span> isOk <span class="token builtin">bool</span><span class="token comment">// 批量申明， 推荐使用小驼峰方式</span><span class="token keyword">var</span> <span class="token punctuation">(</span>name1 <span class="token builtin">string</span>age2  <span class="token builtin">int</span>isOk3 <span class="token builtin">bool</span><span class="token comment">//</span><span class="token punctuation">)</span><span class="token keyword">var</span><span class="token punctuation">(</span>nums <span class="token builtin">int</span>goods <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">// 常量：常量是恒定不变的量</span><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"匿名变量"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> username<span class="token punctuation">,</span> gender <span class="token builtin">string</span>username <span class="token operator">=</span> <span class="token string">"张三"</span>gender <span class="token operator">=</span> <span class="token string">"男"</span>name <span class="token operator">=</span> <span class="token string">"理想"</span>age <span class="token operator">=</span> <span class="token number">16</span>isOk <span class="token operator">=</span> <span class="token boolean">true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token comment">// go语言中申明的非全局变量必须使用，不使用编译不过去</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment">// 打印一句话，默认打印换行</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%s\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// 使用printf %s占位符</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>  <span class="token comment">// 不会换行</span><span class="token comment">// 简短变量申明  </span>s3 <span class="token operator">:=</span> <span class="token string">"go语言真是太好了"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"print: %v\n"</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token comment">// 匿名变量</span><span class="token boolean">_</span><span class="token punctuation">,</span> content <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment">// 同一个作用域中不能申明同名的变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h3><ul><li>常量： 定义了之后不能修改， 在程序运行期间不会改变的值</li></ul><h3 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span><span class="token punctuation">(</span>statusOk <span class="token operator">=</span> <span class="token number">200</span>notFound <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量声明变量"><a href="#批量声明变量" class="headerlink" title="批量声明变量"></a>批量声明变量</h3><ul><li>批量声明变量时，如果某一行声明后没有赋值，默认和上一行的值相同</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span><span class="token punctuation">(</span>n1 <span class="token operator">=</span> <span class="token number">100</span>n2n3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><h4 id="iota的定义"><a href="#iota的定义" class="headerlink" title="iota的定义"></a>iota的定义</h4><ul><li><p>iota : go语言里的常量计数器，只能在常量的表达式中使用</p></li><li><p>在const 关键字出现时将被重置为0， </p></li><li><p>const每新增一行常量声明，将使iota的值+1</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  a1 <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment">// 0</span>  a2 <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment">// 1</span>  <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">// 2</span>  a3     <span class="token comment">// 3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iota的使用"><a href="#iota的使用" class="headerlink" title="iota的使用"></a>iota的使用</h4><ul><li>插队</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  b1 <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment">// 0</span>  b2 <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// 100</span>  b3 <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment">// 2</span>  b4 <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment">// 3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多个变量声明在一行, 不会iota不会增加，只有换行才会增加</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span>  <span class="token comment">// 1， 2</span>  d3<span class="token punctuation">,</span> d4 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span>  <span class="token comment">// 2， 3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义数量级</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token boolean">iota</span>  KB <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span>  MB <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span>  GB <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span>  TB <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span>  PB <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token boolean">iota</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fmt-包"><a href="#fmt-包" class="headerlink" title="fmt 包"></a>fmt 包</h2><h3 id="输出方式比较"><a href="#输出方式比较" class="headerlink" title="输出方式比较"></a>输出方式比较</h3><ul><li><p>Print</p><ul><li><p>一次输入多个值的时候中间没有空格</p></li><li><p>Print 不会自动换行</p></li></ul></li><li><p>Printf</p><ul><li>格式化输出</li></ul></li><li><p>Println</p><ul><li>一次输入多个值的时候中间有空格</li><li>Pritln会自动给换行</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">// 查看类型</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">// 查看变量的值</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">// </span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">// 十进制</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%o\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment">// </span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"hello world"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>  <span class="token comment">// 字符串会显示引号</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>整形是所有编程语言里面的基础数据类型，在<code>go</code>语言当中，同时支持<code>int</code>和<code>uint</code>两种类型。但是具体的长度还要取决于不同的编译器实现。<code>go</code>里面同样有直接定义好位数的类型。<br>全部的类型如下:</p></blockquote><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230320211244687.png" alt="image-20230320211244687"></p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 整形</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">101</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n"</span><span class="token punctuation">,</span> i1<span class="token punctuation">)</span> <span class="token comment">// 十进制转二进制</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%o\n"</span><span class="token punctuation">,</span> i1<span class="token punctuation">)</span>  <span class="token comment">// 十进制转八进制</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> i1<span class="token punctuation">)</span>  <span class="token comment">// 十进制转十六进制</span><span class="token comment">// 八进制</span>i2 <span class="token operator">:=</span> <span class="token number">077</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token comment">// 十六进制</span>i3 <span class="token operator">:=</span> <span class="token number">0xff</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i3<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> i3<span class="token punctuation">)</span><span class="token comment">// 声明int类型</span>i4 <span class="token operator">:=</span> <span class="token function">int8</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> i4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><blockquote><p>go语言拥有两种浮点类型，一种是float64，每个64位的浮点数需要占用8字节，另一种是float32,占用4字节。</p></blockquote><p><strong>go语言中默认的浮点类型位float64位， float32位不能直接赋值给float64位</strong></p><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>略</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><blockquote><p>go语言的bool 用来声明布尔变量，布尔类型只有true和false两个值</p></blockquote><p><strong>注意</strong></p><ul><li>布尔变量的默认值位false</li><li>go语言中不允许将整形强制转化位布尔类型</li><li>布尔类型无法参与运算x，也无法与其他类型进行转化</li></ul><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul><li>Go 语言里的字符串的内部实现使用 UTF-8 编码。</li></ul><h3 id="字符串的表示"><a href="#字符串的表示" class="headerlink" title="字符串的表示"></a>字符串的表示</h3><ul><li>字符串的值为双引号(“)中的内容，可以在 Go 语言的源码中直接添加非 ASCII 码字符串</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">"沙河"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><ul><li><p>字符： 单引号表示，单独的字母数字符号表示一个字符</p></li><li><p>go 语言字符有两类: byte类型  rune类型， 代表utf8字符</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">c1 <span class="token operator">:=</span> <span class="token char">'沙'</span>c2 <span class="token operator">:=</span> <span class="token char">'s'</span>c3 <span class="token operator">:=</span> <span class="token char">'h'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><ul><li><p>一个字节&#x3D;8Bit(8个二进制位)</p></li><li><p>一个’a’ 字符占一个字节</p></li><li><p>一个utf8编码的汉字’沙’ 一般占3个字节</p></li></ul><h3 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h3><table><thead><tr><th>转义符</th><th>含义</th></tr></thead><tbody><tr><td>\r</td><td>回车符号</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\&#39;</td><td>单引号</td></tr><tr><td>\&quot;</td><td>双引号</td></tr><tr><td>\\</td><td>反斜杠</td></tr></tbody></table><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 输出路径E:\【物语终焉】老男孩带你21周搞定Go语言【全 242】\01-50\01-50</span>path1 <span class="token operator">:=</span> <span class="token string">"E:\\【物语终焉】老男孩带你21周搞定Go语言【全 242】\\01-50\\01-50"</span>    <span class="token comment">// \ 本来就是具有特殊意义，需要告诉系统\ 就表示单纯的\，此时需要转义符</span>        <span class="token comment">// 让结果中带有双引号</span>    path2 <span class="token operator">:=</span> <span class="token string">"\"E:\\【物语终焉】老男孩带你21周搞定Go语言【全 242】\\01-50\\01-50\""</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span>        <span class="token comment">// 让结果中带有单引号</span>    path3 <span class="token operator">:=</span> <span class="token string">"'E:\\【物语终焉】老男孩带你21周搞定Go语言【全 242】\\01-50\\01-50'"</span>        <span class="token comment">// 多行字符串 使用反引号，原样输出</span>    s <span class="token operator">:=</span> <span class="token string">`李白杜甫`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">   name <span class="token operator">:=</span> <span class="token string">"我是"</span>content <span class="token operator">:=</span> <span class="token string">"程序猿"</span>ss <span class="token operator">:=</span> name <span class="token operator">+</span> contentfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">path1 <span class="token operator">:=</span> <span class="token string">"E:\\【物语终焉】老男孩带你21周搞定Go语言【全 242】\\01-50\\01-50"</span>ret <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> <span class="token string">"\\"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前后缀匹配"><a href="#前后缀匹配" class="headerlink" title="前后缀匹配"></a>前后缀匹配</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">ss2 <span class="token operator">:=</span> <span class="token string">"我是中国人"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>ss2<span class="token punctuation">,</span> <span class="token string">"我是"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 前缀匹配</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>ss2<span class="token punctuation">,</span> <span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 后缀匹配</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>ss2<span class="token punctuation">,</span> <span class="token string">"r人"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strings-Index"><a href="#strings-Index" class="headerlink" title="strings.Index()"></a>strings.Index()</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"this is golang"</span><span class="token keyword">var</span> index <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"go"</span><span class="token punctuation">)</span> <span class="token comment">//从前往后</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>   <span class="token comment">// 8 （判断字符串 go 出现的位置）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join拼接"><a href="#join拼接" class="headerlink" title="join拼接"></a>join拼接</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"123-456-789"</span><span class="token keyword">var</span> arr <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span>    <span class="token comment">// [123 456 789]</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token comment">// 123*456*789</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的修改-rune"><a href="#字符串的修改-rune" class="headerlink" title="字符串的修改(rune)"></a>字符串的修改(rune)</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 字符串修改 ： 字符串不能直接修改</span>s2 <span class="token operator">:=</span> <span class="token string">"白萝卜"</span>s3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment">// ['白', '萝', '萝']  转换后是单个字符</span>s3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'红'</span>  <span class="token comment">// 替换时需要用字符</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// string 将rune 强制转换为字符</span>c1 <span class="token operator">:=</span> <span class="token string">"红"</span>c2 <span class="token operator">:=</span> <span class="token char">'红'</span>  <span class="token comment">// rune 类型 int32</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1: %T, c2:%T"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>c3 <span class="token operator">:=</span> <span class="token string">"h"</span>  <span class="token comment">// string</span>c4 <span class="token operator">:=</span> <span class="token char">'h'</span>  <span class="token comment">// int32</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3: %T, c4:%T\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取每一个字符"><a href="#获取每一个字符" class="headerlink" title="获取每一个字符"></a>获取每一个字符</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token string">"hello,沙河"</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">&#123;</span> <span class="token comment">// 从字符中取出每个字符</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">//%c : 字符</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>age <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">18</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"饭店今天开业啦"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"改写作业了"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">35</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"中年"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">18</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成年"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"未成年"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> age <span class="token operator">:=</span> <span class="token number">19</span><span class="token punctuation">;</span> age <span class="token operator">></span><span class="token number">18</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"今天要开学了"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"今天天气不错"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 基本格式</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 变种1</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">for</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 变种2</span>j <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> j<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token comment">// for range 返回字字符串的索引和值</span>s <span class="token operator">:=</span> <span class="token string">"hello沙河"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印99乘法表</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> j<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">&#123;</span><span class="token keyword">if</span> i <span class="token operator">*</span> j <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d     "</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d    "</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> j <span class="token operator">==</span> i<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 借助制表符</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d \t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// func main() &#123;</span><span class="token comment">// for i := 0; i &lt; 10; i++ &#123;</span><span class="token comment">// if i == 5 &#123;</span><span class="token comment">// continue</span><span class="token comment">// &#125;</span><span class="token comment">// fmt.Println(i)</span><span class="token comment">// &#125;</span><span class="token comment">// &#125;</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">5</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>name <span class="token operator">=</span> <span class="token string">"张三李四王麻子"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> name<span class="token punctuation">&#123;</span><span class="token comment">// fmt.Println(string(i), string(c))</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i: %d, c:%c\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">5</span>        <span class="token keyword">switch</span> n <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"大拇指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"食指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"中指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无名指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"小拇指"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"脚趾头"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 变种</span><span class="token keyword">switch</span> n <span class="token operator">:=</span><span class="token number">3</span><span class="token punctuation">;</span>n <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"食指"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"中指"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"大拇指"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不是指头"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// 跳出循环</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">break</span>  <span class="token comment">// 跳出内层循环</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span>  <span class="token comment">// 跳出外层循环</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用goto 跳出循环</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">goto</span> xx   <span class="token comment">// 跳转到xx标签</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>xx<span class="token punctuation">:</span>  <span class="token comment">// label标签</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h3><ul><li><p>GOPATH: go语言的工作区， 代码存放路径</p></li><li><p>go env: 命令行输入，列出和go相关的环境变量</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230401112155016.png" alt="image-20230401112155016"></p></li></ul><ul><li>GOPATH&#x2F;bin添加到环境变量： go install命令会把生成的二进制可执行文件拷贝到GOPATH&#x2F;bin路径下</li></ul><ul><li>GOROOT: 安装go语言的路径</li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>go build  编译go 程序</li><li>go build -o “xxxx.exe”  编译成xxx.exe可执行文件</li><li>go run main.go 像执行脚本一样执行main.go 文件</li><li>go install  先编译后拷贝</li></ul><h3 id="go-语言文件基础语法"><a href="#go-语言文件基础语法" class="headerlink" title="go 语言文件基础语法"></a>go 语言文件基础语法</h3><p>存放go源代码的文件后缀名是.go</p><p>文件第一行： package关键字声明包</p><p>如果要编写一个可执行文件，必须要有main包和mian入口函数</p><p>main 函数外的语句必须以关键字开头</p><p>函数内部定义的变量必须使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// 单行注释</span><span class="token comment">/* 多行注释 */</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h3><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><ul><li><p>三种声明方式</p><ul><li><p>var name string</p></li><li><p>var name &#x3D; “沙河”</p></li><li><p>函数内部专属 name :&#x3D; “沙河”</p></li></ul></li><li><p>匿名变量</p><ul><li>某些变量必须接受但是不使用时 用_</li></ul></li></ul><h4 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h4><ul><li><p>const声明</p><ul><li>const PI&#x3D;3.14</li></ul></li><li><p>iota</p><pre><code>- iota在const关键字出现的时候置为0- const中每新增一行，iota加1</code></pre></li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if-1"><a href="#if-1" class="headerlink" title="if"></a>if</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成年人"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"学成"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-1"><a href="#for-1" class="headerlink" title="for"></a>for</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 方式一</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 方式二</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 方式三</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无线循环"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token string">"沙河有沙又有河"</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>"<span class="token operator">%</span>d <span class="token operator">%</span>c\"<span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><p>整形：</p><ul><li><p>无符号：uint8、uint16、uint32、uint64</p></li><li><p>带符号：int8、int16、int32、int64</p><p><em>int具体是32位还是64位看操作系统</em></p></li><li><p>uintptr: 表示指针</p></li><li></li></ul></li><li><p>浮点型：</p><ul><li>float64、float32</li><li>go语言里浮点数默认ffloat64</li></ul></li><li><p>复数：</p><ul><li>complex128和complex64</li></ul></li><li><p>布尔值：</p><ul><li>true和flase</li><li>不能和其他字符转做转换</li></ul></li><li><p>字符串</p><ul><li>常用方法</li><li>不能被直接修改</li></ul></li><li><p>字符串、字符、字节都是什么？</p><ul><li>字符串：双引号包裹</li><li>字符：单引号包裹的是字符，单个字母，符号，单个文字</li><li>字节：1byte&#x3D;8bit</li><li>go语言中给的字符串都是UTF8编码，UTF8中一个汉字常占用3个字节</li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算数运算符</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230403210843682.png" alt="image-20230403210843682"></p><ul><li>逻辑运算符</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230403210941626.png" alt="image-20230403210941626"></p><ul><li>位运算符</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230403211458044.png" alt="image-20230403211458044"></p><ul><li>赋值运算符</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230403213421601.png" alt="image-20230403213421601"></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 测试运算符</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">5</span>b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">// 算术运算发</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>a <span class="token operator">++</span>   <span class="token comment">// a = a+1</span>b <span class="token operator">--</span>   <span class="token comment">// b = b-1</span><span class="token comment">// 关系运算符</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">></span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">>=</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token comment">// 逻辑运算符</span>age <span class="token operator">:=</span> <span class="token number">22</span><span class="token comment">// and </span><span class="token keyword">if</span> age <span class="token operator">></span><span class="token number">18</span> <span class="token operator">&amp;&amp;</span>age<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"苦逼上班"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不用上班"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// or</span><span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">18</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">60</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不用上班"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"苦逼上班"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 取反 ！</span>is_finished <span class="token operator">:=</span> <span class="token boolean">false</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>is_finished<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">!</span>is_finished<span class="token punctuation">)</span><span class="token comment">// 位运算 针对二进制数</span><span class="token comment">// 5 的二进制 0101</span><span class="token comment">// 2 的二进制 0010</span><span class="token comment">// &amp;： 按位与 全1为1，有0则0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 0000</span><span class="token comment">// |: 按位或 有1为1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 0111</span><span class="token comment">// ^: 按位异或 两位不同则为1</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 0111</span><span class="token comment">// &lt;&lt;: 左移指定位数  0101</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//1010  10\</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">// 10000000000 => 1024</span><span class="token comment">// >> 右移</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">// 0010</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">>></span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token comment">// 0001</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">>></span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment">// 0000</span><span class="token comment">/*var m = int8(1)fmt.Println(m&lt;&lt;10) // 该句会有问题，超出位数*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>存放元素的容器</p></li><li><p>必须指定存放元素的类型和容量（长度）</p></li><li><p>数组的长度是数组类型的一部分</p></li></ul><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><pre class="line-numbers language-none"><code class="language-none">var 数组变量名[元素数量]T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如 var a[5] int, 数组的长度必须是常量，并且长度是数组的一部分，一旦定义，长度不能改变。[5]int 和[10]int是不同的类型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span>a <span class="token operator">=</span> b <span class="token comment">// 不可以这样，因为此时a和b是不同的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>方法一：</p><p>初始化数组是可以使用初始化列表来设置数组元素的值</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> cityArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cityArray<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><p>编译器根据初始值的个数自行推断数组的长度</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> testArray <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> numArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> cityArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"北京"</span>，<span class="token string">"上海"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法三：</p><p>指定索引值的方式初始化数组</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"北京"</span>，<span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> a<span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多维数组的定义"><a href="#多维数组的定义" class="headerlink" title="多维数组的定义"></a>多维数组的定义</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token string">"北京"</span>，<span class="token string">"上海"</span><span class="token punctuation">&#125;</span>，        <span class="token punctuation">&#123;</span><span class="token string">"广州"</span>， <span class="token string">"天津"</span><span class="token punctuation">&#125;</span>，        <span class="token punctuation">&#123;</span><span class="token string">"成都"</span>，<span class="token string">"重庆"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[[北京 上海] [广州 深圳] [成都 重庆]]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//支持索引取值:重庆</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"成都"</span><span class="token punctuation">,</span> <span class="token string">"重庆"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a<span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> vv <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\t"</span><span class="token punctuation">,</span> vv<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 注意：多维数组只有第一层可以使用...来让编译器推到数组长度</div><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//支持的写法</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"成都"</span><span class="token punctuation">,</span> <span class="token string">"重庆"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//不支持多维数组的内层使用...</span>b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"成都"</span><span class="token punctuation">,</span> <span class="token string">"重庆"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h3><p>数组时值类型(每次拷贝都是完全拷贝)， 区别于引用类型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">b1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>b2 <span class="token operator">:=</span> b1b2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li><p>求数组[1, 3, 5, 7, 9]的和</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">totalNum <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> numList <span class="token punctuation">&#123;</span>totalNum <span class="token operator">+=</span> valuefmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>找出数组中和为指定值的两个元素的下标，比如从数组<code>[1, 3, 5, 7, 8]</code>中找出和为8的两个元素的下标分别为<code>(0,3)</code>和<code>(1,2)</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">numArray <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> index1<span class="token punctuation">,</span> value1 <span class="token operator">:=</span> <span class="token keyword">range</span> numArray<span class="token punctuation">&#123;</span>target <span class="token operator">:=</span> <span class="token number">8</span> <span class="token operator">-</span> value1<span class="token keyword">for</span> index2<span class="token punctuation">,</span> value2 <span class="token operator">:=</span> <span class="token keyword">range</span> numArray<span class="token punctuation">&#123;</span><span class="token keyword">if</span> value2 <span class="token operator">==</span> target<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index1<span class="token punctuation">,</span> index2<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>因为数组的长度是固定的并且数组长度属于类型的一部分，所以数组有很多的局限性。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容。</p><p>切片是一个引用类型，它的内部结构包含<code>地址</code>、<code>长度</code>和<code>容量</code>。切片一般用于快速地操作一块数据集合。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token comment">//定义一个存放int类型元素的切片</span><span class="token keyword">var</span> s2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//定义一个存放string类型元素的切片</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"沙河"</span><span class="token punctuation">,</span> <span class="token string">"珠江"</span><span class="token punctuation">,</span> <span class="token string">"平山村"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// false</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片比较"><a href="#切片比较" class="headerlink" title="切片比较"></a>切片比较</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token comment">// fmt.Println(c == d)  // 切片是引用类型不能直接比较，只能和nil进行比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="长度和容量"><a href="#长度和容量" class="headerlink" title="长度和容量"></a>长度和容量</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 切片拥有自己的长度和容量，通常用len求长度，用cap求容量</span><span class="token comment">// 注意len cap的区别, 切片的容量是指底层数组的容量</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len(s1):%d cap(s1): %d\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len(s1):%d cap(s2): %d\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="由数组得到切片"><a href="#由数组得到切片" class="headerlink" title="由数组得到切片"></a>由数组得到切片</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span>s3 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>s4 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span>s5 <span class="token operator">:=</span>a1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>s6 <span class="token operator">:=</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>s7 <span class="token operator">:=</span>a1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s5<span class="token punctuation">,</span> s6<span class="token punctuation">,</span> s7<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片再切片"><a href="#切片再切片" class="headerlink" title="切片再切片"></a>切片再切片</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 切片再切片</span>s8 <span class="token operator">:=</span> s6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len(s8): %d    cap(s8): %d\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 切片是一个引用类型</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s6:"</span><span class="token punctuation">,</span> s6<span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1300</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"s6:"</span><span class="token punctuation">,</span> s6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片的本质"><a href="#切片的本质" class="headerlink" title="切片的本质"></a>切片的本质</h4><ul><li>切片的本质就是对底层数组的封装，它包含了三个信息：底层数组的指针、切片的长度（len）和切片的容量（cap）举个例子，现在有一个数组<code>a := [8]int&#123;0, 1, 2, 3, 4, 5, 6, 7&#125;</code>，切片<code>s1 := a[:5]</code>，相应示意图如下</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230404224746573.png" alt="image-20230404224746573"></p><ul><li>切片<code>s2 := a[3:6]</code>，相应示意图如下：</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230404224824013.png" alt="image-20230404224824013"></p><h4 id="切片判空"><a href="#切片判空" class="headerlink" title="切片判空"></a>切片判空</h4><ul><li>要检查切片是否为空，请始终使用len(s) &#x3D;&#x3D; 0来判断，而不应该使用s &#x3D;&#x3D; nil来判断。</li></ul><h4 id="切片比较-1"><a href="#切片比较-1" class="headerlink" title="切片比较"></a>切片比较</h4><ul><li><p>切片之间是不能比较的，我们不能使用<code>==</code>操作符来判断两个切片是否含有全部相等元素。 切片唯一合法的比较操作是和<code>nil</code>比较。 一个<code>nil</code>值的切片并没有底层数组，一个<code>nil</code>值的切片的长度和容量都是0。但是我们不能说一个长度和容量都是0的切片一定是<code>nil</code>，例如下面的示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>         <span class="token comment">//len(s1)=0;cap(s1)=0;s1==nil</span>s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//len(s2)=0;cap(s2)=0;s2!=nil</span>s3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//len(s3)=0;cap(s3)=0;s3!=nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>所以要判断一个切片是否是空的，要是用<code>len(s) == 0</code>来判断，不应该使用<code>s == nil</code>来判断。</p></li></ul><h4 id="切片赋值拷贝"><a href="#切片赋值拷贝" class="headerlink" title="切片赋值拷贝"></a>切片赋值拷贝</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//[0 0 0]</span>s2 <span class="token operator">:=</span> s1             <span class="token comment">//将s1直接赋值给s2，s1和s2共用一个底层数组</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">//[100 0 0]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//[100 0 0]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="make函数生成切片"><a href="#make函数生成切片" class="headerlink" title="make函数生成切片"></a>make函数生成切片</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//[0 0 0]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="切片的遍历"><a href="#切片的遍历" class="headerlink" title="切片的遍历"></a>切片的遍历</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s2<span class="token operator">...</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">// 通过var 声明的零值切片可以直接append ,不需要初始化后在append</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片的扩容"><a href="#切片的扩容" class="headerlink" title="切片的扩容"></a>切片的扩容</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">></span> doublecap <span class="token punctuation">&#123;</span>newcap <span class="token operator">=</span> <span class="token builtin">cap</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">&#123;</span>newcap <span class="token operator">=</span> doublecap<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Check 0 &lt; newcap to detect overflow</span><span class="token comment">// and prevent an infinite loop.</span><span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">&#123;</span>newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token comment">// Set newcap to the requested cap when</span><span class="token comment">// the newcap calculation overflowed.</span><span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>newcap <span class="token operator">=</span> <span class="token builtin">cap</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）。</li><li>否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap&#x3D;doublecap），</li><li>否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1&#x2F;4，即（newcap&#x3D;old.cap,for {newcap +&#x3D; newcap&#x2F;4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap &gt;&#x3D; cap）</li><li>如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// append 添加元素和扩容</span><span class="token keyword">var</span> numSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>numSlice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>numSlice<span class="token punctuation">,</span>i<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v  len: %d   cap: %d  ptr:%p\n"</span><span class="token punctuation">,</span> numSlice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>numSlice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>numSlice<span class="token punctuation">)</span><span class="token punctuation">,</span> numSlice<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="copy函数"><a href="#copy函数" class="headerlink" title="copy函数"></a>copy函数</h4><p>由于切片是引用类型，所以a和b其实都指向了同一块内存地址。修改b的同时a的值也会发生变化。</p><p>Go语言内建的<code>copy()</code>函数可以迅速地将一个切片的数据复制到另外一个切片空间中，<code>copy()</code>函数的使用格式如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// copy(destSlice, srcSlice []T)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// copy()复制切片</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">)</span>     <span class="token comment">//使用copy()函数将切片a中的元素复制到切片c</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[1 2 3 4 5]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//[1 2 3 4 5]</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[1 2 3 4 5]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//[1000 2 3 4 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li>Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。 代码如下</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 从切片中删除元素</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">&#125;</span><span class="token comment">// 要删除索引为2的元素</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[30 31 33 34 35 36 37]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>总结一下就是：要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></li></ul><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote><p>任何程序数据载入内存后，在内存都有他们的地址，这就是指针。而为了保存一个数据在内存中的地址，我们就需要指针变量。</p></blockquote><ul><li>因此Go语言中的指针操作非常简单，我们只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值)</li></ul><h3 id="指针地址和指针类型"><a href="#指针地址和指针类型" class="headerlink" title="指针地址和指针类型"></a>指针地址和指针类型</h3><ul><li><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用<code>&amp;</code>字符放在变量前面对变量进行“取地址”操作</p></li><li><p>Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：<code>*int</code>、<code>*int64</code>、<code>*string</code>等。</p></li><li><p>取变量指针的语法如下</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>v    <span class="token comment">// v的类型为T</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>v:代表被取地址的变量，类型为<code>T</code></li><li>ptr:用于接收地址的变量，ptr的类型就为<code>*T</code>，称做T的指针类型。*代表指针。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// &amp;: 取地址</span><span class="token comment">// *：根据地址取值</span>n <span class="token operator">:=</span> <span class="token number">18</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span>p <span class="token operator">:=</span> <span class="token operator">&amp;</span>nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment">// *int</span>m <span class="token operator">:=</span> <span class="token operator">*</span>pfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>mm <span class="token operator">:=</span> <span class="token string">"你好"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mm<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mm<span class="token punctuation">)</span>  <span class="token comment">// *string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针取值"><a href="#指针取值" class="headerlink" title="指针取值"></a>指针取值</h3><ul><li>在对普通变量使用&amp;操作符取地址后会获得这个变量的指针，然后可以对指针使用*操作，也就是指针取值，代码如下。</li></ul><pre class="line-numbers language-none"><code class="language-none">func main() &#123;&#x2F;&#x2F;指针取值a :&#x3D; 10b :&#x3D; &amp;a &#x2F;&#x2F; 取变量a的地址，将指针保存到b中fmt.Printf(&quot;type of b:%T\n&quot;, b)c :&#x3D; *b &#x2F;&#x2F; 指针取值（根据指针去内存取值）fmt.Printf(&quot;type of c:%T\n&quot;, c)fmt.Printf(&quot;value of c:%v\n&quot;, c)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针传值"><a href="#指针传值" class="headerlink" title="指针传值"></a>指针传值</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">modify1</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">modify2</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token number">10</span><span class="token function">modify1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token function">modify2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 100</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ul><li>取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</li></ul><h2 id="new和make"><a href="#new和make" class="headerlink" title="new和make"></a>new和make</h2><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>new是一个内置的函数，它的函数签名如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">new</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>Type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，</p><ul><li>Type表示类型，new函数只接受一个参数，这个参数是一个类型</li><li>*Type表示类型指针，new函数返回一个指向该类型内存地址的指针。</li></ul><p>new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>b <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">// *int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// *bool</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span>       <span class="token comment">// 0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span>       <span class="token comment">// false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本节开始的示例代码中<code>var a *int</code>只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的new函数对a进行初始化之后就可以正常对其赋值了：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span>a <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>make也是用于内存分配的，区别于new，它只用于slice、map以及channel的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">make</span><span class="token punctuation">(</span>t Type<span class="token punctuation">,</span> size <span class="token operator">...</span>IntegerType<span class="token punctuation">)</span> Type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>make函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。这个我们在上一章中都有说明，关于channel我们会在后续的章节详细说明。</p><p>本节开始的示例中<code>var b map[string]int</code>只是声明变量b是一个map类型的变量，需要像下面的示例代码一样使用make函数进行初始化操作之后，才能对其进行键值对赋值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>b <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token string">"沙河娜扎"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="new与make的区别"><a href="#new与make的区别" class="headerlink" title="new与make的区别"></a>new与make的区别</h3><ol><li>二者都是用来做内存分配的。</li><li>make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</li><li>而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</li></ol><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数"></a>map 函数</h2><blockquote><p>map 是一种基于key-value的数据结构， go语言中的map是一种引用结构，类型，必须初始化才能使用，其内部使用hash来实现</p></blockquote><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Go语言中 <code>map</code>的定义语法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">map</span><span class="token punctuation">[</span>KeyType<span class="token punctuation">]</span>ValueType<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，</p><ul><li>KeyType:表示键的类型。</li><li>ValueType:表示键对应的值的类型。</li></ul><p>map类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>KeyType<span class="token punctuation">]</span>ValueType<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">cap</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。</p><h3 id="map的基本使用"><a href="#map的基本使用" class="headerlink" title="map的基本使用"></a>map的基本使用</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> m1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m1<span class="token operator">==</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m1 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">// 一定要初始化</span>m1<span class="token punctuation">[</span><span class="token string">"理想"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>m1<span class="token punctuation">[</span><span class="token string">"jiwuming"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">35</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token string">"理想"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 元素类型的为map的切片</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map-判断键值是否存在"><a href="#map-判断键值是否存在" class="headerlink" title="map 判断键值是否存在"></a>map 判断键值是否存在</h3><ul><li>value, ok :&#x3D; map[key] 判断是狗存在某个key</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//value, ok := map[key] 判断是狗存在某个key</span>scoreMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>scoreMap<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span>scoreMap<span class="token punctuation">[</span><span class="token string">"李四"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> scoreMap<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"查无此人"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>scoreMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>scoreMap<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span>scoreMap<span class="token punctuation">[</span><span class="token string">"小明"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>scoreMap<span class="token punctuation">[</span><span class="token string">"娜扎"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> scoreMap <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只是遍历key 可以用如下写法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>scoreMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>scoreMap<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span>scoreMap<span class="token punctuation">[</span><span class="token string">"小明"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>scoreMap<span class="token punctuation">[</span><span class="token string">"娜扎"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> scoreMap <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>delete(map, key)表示从中删除一组键值对</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>scoreMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>scoreMap<span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span>scoreMap<span class="token punctuation">[</span><span class="token string">"小明"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>scoreMap<span class="token punctuation">[</span><span class="token string">"娜扎"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token function">delete</span><span class="token punctuation">(</span>scoreMap<span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token comment">//将小明:100从map中删除</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> scoreMap<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照指定顺序遍历"><a href="#按照指定顺序遍历" class="headerlink" title="按照指定顺序遍历"></a>按照指定顺序遍历</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//初始化随机数种子</span><span class="token keyword">var</span> scoreMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"stu%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">//生成stu开头的字符串</span>value <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>          <span class="token comment">//生成0~99的随机整数</span>scoreMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">&#125;</span><span class="token comment">//取出map中的所有key存入切片keys</span><span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> scoreMap <span class="token punctuation">&#123;</span>keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//对切片进行排序</span>sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token comment">//按照排序后的key遍历map</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> scoreMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ol><li>写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how&#x3D;1 do&#x3D;2 you&#x3D;1</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token string">``</span><span class="token string">`## 函数### 定义- 函数是组织好的可重复使用的、用于执行指定任务的代码模块`</span><span class="token string">``</span><span class="token keyword">go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 函数</span><span class="token comment">// 函数存在的意义</span><span class="token comment">// 函数是一段代码的分装</span><span class="token comment">// 把一段代码的逻辑抽象出来，给他起个名子，每次用到他的时候直接使用函数名调用就看可以了</span><span class="token comment">// 使代码更加简介清晰</span><span class="token comment">// 函数的定义</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token comment">// 没有返回值</span><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 没有参数和返回值</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有返回值值和参数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 没有参数但是由返回值</span><span class="token keyword">func</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有参数但是由返回值"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token comment">//参数可以命名也可以不命名</span><span class="token comment">// 命名的返回值就相当于在函数中声明一个变量</span><span class="token keyword">func</span> <span class="token function">f4</span><span class="token punctuation">(</span> x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ret <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token keyword">return</span>   <span class="token comment">// 此时可以省略return 后面的ret</span><span class="token punctuation">&#125;</span><span class="token comment">// 多个返回值</span><span class="token keyword">func</span> <span class="token function">f5</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"沙河"</span><span class="token punctuation">&#125;</span><span class="token comment">// 参数的类型简写</span><span class="token comment">// 当参数中有连续多个参数的类型一致时，我们可以省略非最后一个的类型</span><span class="token keyword">func</span> <span class="token function">f6</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token comment">// 可变长参数</span><span class="token keyword">func</span> <span class="token function">f7</span><span class="token punctuation">(</span>x <span class="token builtin">string</span><span class="token punctuation">,</span> y<span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment">// y的类型是切片 []int</span><span class="token punctuation">&#125;</span><span class="token comment">// go语言中函数没有默认参数这个概念</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>r <span class="token operator">:=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ul><li>定义了函数之后，我们可以通过<code>函数名()</code>的方式调用函数</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><ul><li><p>全局变量是定义在函数外部的变量，他在程序整个的原型周期内部有效， 在函数内部可以访问全局变量</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> num <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">func</span> <span class="token function">testGlobalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment">// 函数内部访问全局变量</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">testGlobalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// num=10</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><ul><li>局部变量有分为两种： 函数内部的定义的变量违法在该函数外使用</li></ul><p>​</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testLocalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义一个函数局部变量x,仅在该函数内生效</span><span class="token keyword">var</span> x <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">testLocalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 此时无法使用变量x</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果局部变量和全局变量重名，有限访问局部变量</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//定义全局变量num</span><span class="token keyword">var</span> num <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">func</span> <span class="token function">testNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>num <span class="token operator">:=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token comment">// 函数中优先使用局部变量</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">testNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// num=100</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型域变量"><a href="#函数类型域变量" class="headerlink" title="函数类型域变量"></a>函数类型域变量</h3><h4 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h4><ul><li>使用type关键字来定义一个函数类型，具体格式如下</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> calculation <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>上面语句定义了一个calculation类型的函数， 例如下面代码都是calculation的类型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>ruturn x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    reutrn x <span class="token operator">-</span> y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>add 和sub都能赋值给calculation类型的变量</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c calculationc <span class="token operator">=</span> add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数类型变量</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">&#125;</span><span class="token keyword">type</span> calculation <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> c calculation               <span class="token comment">// 声明一个calculation类型的变量c</span>c <span class="token operator">=</span> add                         <span class="token comment">// 把add赋值给c</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of c:%T\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// type of c:main.calculation</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 像调用add一样调用c</span>f <span class="token operator">:=</span> add                        <span class="token comment">// 将函数add赋值给变量f</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of f:%T\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token comment">// type of f:func(int, int) int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// 像调用add一样调用f</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><ul><li><p>函数可以作为参数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> op <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ret2 <span class="token operator">:=</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret2<span class="token punctuation">)</span> <span class="token comment">// 30</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数作为返回值</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">do</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> s <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sub<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>        err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"无法识别的操作法"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token punctuation">,</span> err        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="匿名函数和闭包"><a href="#匿名函数和闭包" class="headerlink" title="匿名函数和闭包"></a>匿名函数和闭包</h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><ul><li><p>函数当然还可以作为返回值，但是在Go语言中函数内部不能再像之前那样定义函数了，只能定义匿名函数。匿名函数就是没有函数名的函数，匿名函数的定义格式如下：</p><pre class="line-numbers language-none"><code class="language-none">func(参数，参数)(返回值， 返回值)&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匿名函数因为没有函数名，所以没办法像普通函数那样调用，所以匿名函数需要保存到某个变量或者作为立即执行函数:</p></li></ul>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 函数内部没有办法声明带名字的函数</span>f1 <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">// 如果只是使用一次的函数，还可以立即执行函数</span><span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x <span class="token operator">+</span>y<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>匿名函数多用于实现回调函数和闭包</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li><p>闭包指的是一个函数和域其他相关的引用环境组合而成的实体，<code>闭包=函数+引用环境</code></p></li><li><p>闭包函数示例一</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> x <span class="token builtin">int</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>x <span class="token operator">+=</span> y<span class="token keyword">return</span> x<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//30</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//60</span>f1 <span class="token operator">:=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//40</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//90</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>闭包函数示例二</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makeSuffixFunc</span><span class="token punctuation">(</span>suffix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name <span class="token operator">+</span> suffix<span class="token punctuation">&#125;</span><span class="token keyword">return</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>jpgFunc <span class="token operator">:=</span> <span class="token function">makeSuffixFunc</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span>txtFunc <span class="token operator">:=</span> <span class="token function">makeSuffixFunc</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">jpgFunc</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//test.jpg</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">txtFunc</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//test.txt</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>闭包示例三</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>add <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>base <span class="token operator">+=</span> i<span class="token keyword">return</span> base<span class="token punctuation">&#125;</span>sub <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>base <span class="token operator">-=</span> i<span class="token keyword">return</span> base<span class="token punctuation">&#125;</span><span class="token keyword">return</span> add<span class="token punctuation">,</span> sub<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>f1<span class="token punctuation">,</span> f2 <span class="token operator">:=</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//11 9</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//12 8</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//13 7</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="defer语句"><a href="#defer语句" class="headerlink" title="defer语句"></a>defer语句</h3><ul><li><p>Go语言中的<code>defer</code>语句会将其后面跟随的语句进行延迟处理。在<code>defer</code>归属的函数即将返回时，将延迟处理的语句按<code>defer</code>定义的逆序进行执行，也就是说，先被<code>defer</code>的语句最后被执行，最后被<code>defer</code>的语句，最先被执行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="defer-执行时机"><a href="#defer-执行时机" class="headerlink" title="defer 执行时机"></a>defer 执行时机</h4><p>在Go语言的函数中<code>return</code>语句在底层并不是原子操作，它分为给返回值赋值和RET指令两步。而<code>defer</code>语句执行的时机就在返回值赋值操作后，RET指令执行前。具体如下图所示：</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419211056900.png" alt="image-20230419211056900"></p><h4 id="defer-案例"><a href="#defer-案例" class="headerlink" title="defer 案例"></a>defer 案例</h4><ul><li>阅读下面代码，写出最后的打印结果</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>x <span class="token operator">:=</span> <span class="token number">5</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> x  <span class="token comment">// 1. 返回值赋值  2. defer 3.RET</span><span class="token punctuation">&#125;</span><span class="token comment">// 答案 5</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">5</span> <span class="token comment">// 1. 返回值赋值 x=5 2.defer x++ 3. RET</span><span class="token punctuation">&#125;</span> <span class="token comment">// 答案 6</span><span class="token keyword">func</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">:=</span> <span class="token number">5</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> x  <span class="token comment">// 1. 返回值赋值 y=x=5, 2. defer x++ 3.RET</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 答案5</span><span class="token keyword">func</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token operator">++</span>  <span class="token comment">// x当作参数传入进去了，所以改变的是x的副本，所以答案还是5</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token comment">// 答案5</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="defer面试题"><a href="#defer面试题" class="headerlink" title="defer面试题"></a>defer面试题</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>ret <span class="token operator">:=</span> a <span class="token operator">+</span> bfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token keyword">return</span> ret<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">:=</span> <span class="token number">1</span>y <span class="token operator">:=</span> <span class="token number">2</span>    <span class="token keyword">defer</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 先计算第二个参数的结果为3, 会输出A 1 2 3 执行defer x相当于执行calc(AA, 1, 3)输出 AA  1, 3, 4</span>    x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">defer</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 先计算第二个参数的结果为12， 输出B 10 2 12  执行defer calc("BB", 10, 12) 输出BB 10 12 22</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的输出结果是多少？</p><p>综合上面分析以及defer的执行顺序得到如下结果</p><ol><li>A 1 2 3</li><li>B 10 2 12</li><li>BB 10 12 22</li><li>AA  1 3 4</li></ol><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> defer注册要延迟执行的函数时该函数所有的参数都需要确定其值</div><h2 id="内置函数介绍"><a href="#内置函数介绍" class="headerlink" title="内置函数介绍"></a>内置函数介绍</h2><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419214805356.png" alt="image-20230419214805356"></p><h3 id="panic-x2F-recover"><a href="#panic-x2F-recover" class="headerlink" title="panic&#x2F;recover"></a>panic&#x2F;recover</h3><p>Go语言中目前（Go1.12）是没有异常机制，但是使用<code>panic/recover</code>模式来处理错误。 <code>panic</code>可以在任何地方引发，但<code>recover</code>只有在<code>defer</code>调用的函数中有效。 首先来看一个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"func A"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"panic in B"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">funcC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"func C"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">funcC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">func Apanic: panic <span class="token keyword">in</span> Bgoroutine <span class="token number">1</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span>:main.funcB<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>        G:/go_project/day03/func_panic/main.go:10main.main<span class="token punctuation">(</span><span class="token punctuation">)</span>        G:/go_project/day03/func_panic/main.go:18 +0x66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析： 程序运行期间<code>funcB</code>中引发了<code>panic</code>导致程序崩溃，异常退出了。这个时候我们就可以通过<code>recover</code>将程序恢复回来，继续往后执行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"func A"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果程序出出现了panic错误,可以通过recover恢复过来</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"recover in B"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"panic in B"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">funcC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"func C"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">funcC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 1. recover()必须要搭配defer使用2. defer一定要定义在可能引发panic的语句之前</div><h2 id="fmt标准库介绍"><a href="#fmt标准库介绍" class="headerlink" title="fmt标准库介绍"></a>fmt标准库介绍</h2><h4 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h4><blockquote><p><code>Print</code>系列函数会将内容输出到系统的标准输出，区别在于<code>Print</code>函数直接输出内容，<code>Printf</code>函数支持格式化输出字符串，<code>Println</code>函数会在输出内容的结尾添加一个换行符。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"在终端打印该信息。"</span><span class="token punctuation">)</span>name <span class="token operator">:=</span> <span class="token string">"沙河小王子"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"我是：%s\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"在终端打印单独一行显示"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在终端打印该信息。我是：沙河小王子在终端打印单独一行显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Fprint"><a href="#Fprint" class="headerlink" title="Fprint"></a>Fprint</h4><blockquote><p><code>Fprint</code>系列函数会将内容输出到一个<code>io.Writer</code>接口类型的变量<code>w</code>中，我们通常用这个函数往文件中写入内容</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Fprint</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Fprintf</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Fprintln</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 将标准输出写入内容</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"像标准输出写入内容"</span><span class="token punctuation">)</span>fileObj<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"./xxx.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打开文件出错，err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>name <span class="token operator">:=</span> <span class="token string">"沙河小王子"</span><span class="token comment">// 向打开的文件句柄中写入内容</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>fileObj<span class="token punctuation">,</span> <span class="token string">"往文件中写如信息：%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h4><blockquote><p><code>Sprint</code>系列函数会把传入的数据生成并返回一个字符串。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sprint</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">Sprintf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">Sprintln</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>简单代码示例</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s1 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token string">"沙河小王子"</span><span class="token punctuation">)</span>name <span class="token operator">:=</span> <span class="token string">"沙河小王子"</span>age <span class="token operator">:=</span> <span class="token number">18</span>s2 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name:%s,age:%d"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>s3 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span><span class="token string">"沙河小王子"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Errorf"><a href="#Errorf" class="headerlink" title="Errorf"></a>Errorf</h4><blockquote><p><code>Errorf</code>函数根据format参数生成格式化字符串并返回一个包含该字符串的错误。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Errorf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常用来自定义错误类型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"这是一个错误"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">e <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"原始错误e"</span><span class="token punctuation">)</span>w <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Wrap了一个错误%w"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="格式化占位符"><a href="#格式化占位符" class="headerlink" title="格式化占位符"></a>格式化占位符</h4><ul><li>通用占位符</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222115673.png" alt="image-20230419222115673"></p><p>示例代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>o <span class="token operator">:=</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span> name <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"小王子"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"100%%\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">100</span><span class="token boolean">false</span><span class="token punctuation">&#123;</span>小王子<span class="token punctuation">&#125;</span>struct <span class="token punctuation">&#123;</span> name string <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>name:<span class="token string">"小王子"</span><span class="token punctuation">&#125;</span>struct <span class="token punctuation">&#123;</span> name string <span class="token punctuation">&#125;</span><span class="token number">100</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>布尔型</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222246501.png" alt="image-20230419222246501"></p><ul><li>整形</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222326482.png" alt="image-20230419222326482"></p><ul><li>浮点数</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222539519.png" alt="image-20230419222539519"></p><p>示例代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">f <span class="token operator">:=</span> <span class="token number">12.34</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%b\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%e\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%E\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%g\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%G\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">6946802425218990p-49<span class="token number">1</span>.234000e+01<span class="token number">1</span>.234000E+01<span class="token number">12.340000</span><span class="token number">12.34</span><span class="token number">12.34</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串和byte</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222617095.png" alt="image-20230419222617095"></p><p>示例代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">"小王子"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">小王子<span class="token string">"小王子"</span>e5b08fe78e8be5ad90E5B08FE78E8BE5AD90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>指针</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222726130.png" alt="image-20230419222726130"></p><p>示例代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0xc000094000c000094000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>宽度标识符</p><blockquote><p>宽度通过一个紧跟在百分号后面的十进制数指定，如果未指定宽度，则表示值时除必需之外不作填充。精度通过（可选的）宽度后跟点号后跟的十进制数指定。如果未指定精度，会使用默认精度；如果点号后没有跟数字，表示精度为0。举例如下</p></blockquote></li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222902057.png" alt="image-20230419222902057"></p><p>示例代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">n <span class="token operator">:=</span> <span class="token number">12.34</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%9f\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%.2f\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%9.2f\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%9.f\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">12.340000</span><span class="token number">12.340000</span><span class="token number">12.34</span>    <span class="token number">12.34</span>       <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他flag</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/image-20230419222944774.png" alt="image-20230419222944774"></p><p>举个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">"小王子"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%5s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%-5s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%5.7s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%-5.7s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%5.2s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%05s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">小王子  小王子小王子    小王子小王子     小王00小王子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fmt-Scan"><a href="#fmt-Scan" class="headerlink" title="fmt.Scan"></a>fmt.Scan</h4><h4 id="fmt-Scanf"><a href="#fmt-Scanf" class="headerlink" title="fmt.Scanf"></a>fmt.Scanf</h4><h4 id="fmt-Scanln"><a href="#fmt-Scanln" class="headerlink" title="fmt.Scanln"></a>fmt.Scanln</h4><h4 id="bufil-NewReader"><a href="#bufil-NewReader" class="headerlink" title="bufil.NewReader"></a>bufil.NewReader</h4><h4 id="Fscan"><a href="#Fscan" class="headerlink" title="Fscan"></a>Fscan</h4><h4 id="Sscan"><a href="#Sscan" class="headerlink" title="Sscan"></a>Sscan</h4><h3 id="类型别名和自定义类型"><a href="#类型别名和自定义类型" class="headerlink" title="类型别名和自定义类型"></a>类型别名和自定义类型</h3><ul><li><p>自定义类型</p><blockquote><p>在Go语言中有一些基本的数据类型，如<code>string</code>、<code>整型</code>、<code>浮点型</code>、<code>布尔</code>等数据类型， Go语言中可以使用<code>type</code>关键字来定义自定义类型。</p><p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//将MyInt定义为int类型</span><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过<code>type</code>关键字的定义，<code>MyInt</code>就是一种新的类型，它具有<code>int</code>的特性。</p></li><li><p>类型别名</p></li></ul><blockquote><p>类型别名是<code>Go1.9</code>版本添加的新功能。</p><p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> TypeAlias <span class="token operator">=</span> Type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们之前见过的<code>rune</code>和<code>byte</code>就是类型别名，他们的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token builtin">uint8</span><span class="token keyword">type</span> <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token builtin">int32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>区别</p><blockquote><p>类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//类型定义</span><span class="token keyword">type</span> NewInt <span class="token builtin">int</span><span class="token comment">//类型别名</span><span class="token keyword">type</span> MyInt <span class="token operator">=</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a NewInt<span class="token keyword">var</span> b MyIntfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of a:%T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment">//type of a:main.NewInt</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of b:%T\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//type of b:int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示a的类型是<code>main.NewInt</code>，表示main包下定义的<code>NewInt</code>类型。b的类型是<code>int</code>。<code>MyInt</code>类型只会在代码中存在，编译完成时并不会有<code>MyInt</code>类型。</p></li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3><blockquote><p>使用<code>type</code>和<code>struct</code>关键字来定义结构体，具体代码格式如下：</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> 类型名 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    字段名 字段类型    字段名 字段类型    …<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>city <span class="token builtin">string</span>age  <span class="token builtin">int8</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样类型的字段也可以写在一行，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> person1 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span>age        <span class="token builtin">int8</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体实例化"><a href="#结构体实例化" class="headerlink" title="结构体实例化"></a>结构体实例化</h3><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p><p>结构体本身也是一种类型，我们可以像声明内置类型一样使用<code>var</code>关键字声明结构体类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> 结构体实例 结构体类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本实例化"><a href="#基本实例化" class="headerlink" title="基本实例化"></a>基本实例化</h3><p>举个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>city <span class="token builtin">string</span>age  <span class="token builtin">int8</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> p1 personp1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"沙河娜扎"</span>p1<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"北京"</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p1=%v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>  <span class="token comment">//p1=&#123;沙河娜扎 北京 18&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p1=%#v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token comment">//p1=main.person&#123;name:"沙河娜扎", city:"北京", age:18&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过<code>.</code>来访问结构体的字段（成员变量）,例如<code>p1.name</code>和<code>p1.age</code>等。</p><h3 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h3><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main     <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span>     <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> user <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span><span class="token punctuation">;</span> Age <span class="token builtin">int</span><span class="token punctuation">&#125;</span>    user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"小王子"</span>    user<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建指针类型结构体"><a href="#创建指针类型结构体" class="headerlink" title="创建指针类型结构体"></a>创建指针类型结构体</h3><p>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>     <span class="token comment">//*main.person</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p2=%#v\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token comment">//p2=&amp;main.person&#123;name:"", city:"", age:0&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是在Go语言中支持对结构体指针直接使用<code>.</code>来访问结构体的成员。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小王子"</span>p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span>p2<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"上海"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p2=%#v\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token comment">//p2=&amp;main.person&#123;name:"小王子", city:"上海", age:28&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体的地址实例化"><a href="#结构体的地址实例化" class="headerlink" title="结构体的地址实例化"></a>结构体的地址实例化</h3><p>使用<code>&amp;</code>对结构体进行取地址操作相当于对该结构体类型进行了一次<code>new</code>实例化操作。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">p3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>person<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span>     <span class="token comment">//*main.person</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p3=%#v\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span> <span class="token comment">//p3=&amp;main.person&#123;name:"", city:"", age:0&#125;</span>p3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"七米"</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span>p3<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"成都"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p3=%#v\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span> <span class="token comment">//p3=&amp;main.person&#123;name:"七米", city:"成都", age:30&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p3.name = &quot;七米&quot;</code>其实在底层是<code>(*p3).name = &quot;七米&quot;</code>，这是Go语言帮我们实现的语法糖。</p><h3 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h3><p>没有初始化的结构体，其成员变量都是对应其类型的零值。</p><pre class="line-numbers language-none"><code class="language-none">type person struct &#123;name stringcity stringage  int8&#125;func main() &#123;var p4 personfmt.Printf(&quot;p4&#x3D;%#v\n&quot;, p4) &#x2F;&#x2F;p4&#x3D;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="使用键值对初始化"><a href="#使用键值对初始化" class="headerlink" title="使用键值对初始化"></a>使用键值对初始化</h3></li></ul><p>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">p5 <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span>city<span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p5=%#v\n"</span><span class="token punctuation">,</span> p5<span class="token punctuation">)</span> <span class="token comment">//p5=main.person&#123;name:"小王子", city:"北京", age:18&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以对结构体指针进行键值对初始化，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">p7 <span class="token operator">:=</span> <span class="token operator">&amp;</span>person<span class="token punctuation">&#123;</span>city<span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p7=%#v\n"</span><span class="token punctuation">,</span> p7<span class="token punctuation">)</span> <span class="token comment">//p7=&amp;main.person&#123;name:"", city:"北京", age:0&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="使用值的列表初始化"><a href="#使用值的列表初始化" class="headerlink" title="使用值的列表初始化"></a>使用值的列表初始化</h3></li></ul><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">p8 <span class="token operator">:=</span> <span class="token operator">&amp;</span>person<span class="token punctuation">&#123;</span><span class="token string">"沙河娜扎"</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"p8=%#v\n"</span><span class="token punctuation">,</span> p8<span class="token punctuation">)</span> <span class="token comment">//p8=&amp;main.person&#123;name:"沙河娜扎", city:"北京", age:28&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这种格式初始化时，需要注意：</p><ol><li>必须初始化结构体的所有字段。</li><li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li><li>该方式不能和键值初始化方式混用。</li></ol><ul><li>结构体内存布局</li></ul><p>结构体占用一块连续的内存。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>a <span class="token builtin">int8</span>b <span class="token builtin">int8</span>c <span class="token builtin">int8</span>d <span class="token builtin">int8</span><span class="token punctuation">&#125;</span>n <span class="token operator">:=</span> test<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.a %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.b %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.c %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>c<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.d %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">n.a 0xc0000a0060n.b 0xc0000a0061n.c 0xc0000a0062n.d 0xc0000a0063<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空结构体"><a href="#空结构体" class="headerlink" title="空结构体"></a>空结构体</h3><p>空结构体是不占用空间的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>请问下面那代码的执行结果是什么？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>student<span class="token punctuation">)</span>stus <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"娜扎"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"大王八"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> stu <span class="token operator">:=</span> <span class="token keyword">range</span> stus <span class="token punctuation">&#123;</span>m<span class="token punctuation">[</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>stu        <span class="token punctuation">&#125;</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个<code>person</code>的构造函数。 因为<code>struct</code>是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">newPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token operator">*</span>person <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用构造函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">p9 <span class="token operator">:=</span> <span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"沙河"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> p9<span class="token punctuation">)</span> <span class="token comment">//&amp;main.person&#123;name:"张三", city:"沙河", age:90&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 注意：</div><blockquote><p> 构造函数通常以new开头</p></blockquote><h3 id="方法和接收者"><a href="#方法和接收者" class="headerlink" title="方法和接收者"></a>方法和接收者</h3><p>Go语言中的<code>方法（Method）</code>是一种作用于特定类型变量的函数。这种特定类型变量叫做<code>接收者（Receiver）</code>。接收者的概念就类似于其他语言中的<code>this</code>或者 <code>self</code>。</p><p>方法的定义格式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>接收者变量 接收者类型<span class="token punctuation">)</span> 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回参数<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    函数体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，</p><ul><li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li><li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li><li>方法名、参数列表、返回参数：具体格式与函数定义相同</li></ul><p>举个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Person 结构体</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>age  <span class="token builtin">int8</span><span class="token punctuation">&#125;</span><span class="token comment">//NewPerson 构造函数</span><span class="token keyword">func</span> <span class="token function">NewPerson</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token operator">*</span>Person <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Dream Person做梦的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">Dream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s的梦想是学好Go语言！\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p1 <span class="token operator">:=</span> <span class="token function">NewPerson</span><span class="token punctuation">(</span><span class="token string">"小王子"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span><span class="token function">Dream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 类似python的类方法</div><h3 id="指针类型的接收者"><a href="#指针类型的接收者" class="headerlink" title="指针类型的接收者"></a>指针类型的接收者</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的<code>this</code>或者<code>self</code>。 例如我们为<code>Person</code>添加一个<code>SetAge</code>方法，来修改实例变量的年龄。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SetAge 设置p的年龄</span><span class="token comment">// 使用指针接收者</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">SetAge</span><span class="token punctuation">(</span>newAge <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> newAge<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p1 <span class="token operator">:=</span> <span class="token function">NewPerson</span><span class="token punctuation">(</span><span class="token string">"小王子"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 25</span>p1<span class="token punctuation">.</span><span class="token function">SetAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 30</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SetAge2 设置p的年龄</span><span class="token comment">// 使用值接收者</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">SetAge2</span><span class="token punctuation">(</span>newAge <span class="token builtin">int8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> newAge<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p1 <span class="token operator">:=</span> <span class="token function">NewPerson</span><span class="token punctuation">(</span><span class="token string">"小王子"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">Dream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 25</span>p1<span class="token punctuation">.</span><span class="token function">SetAge2</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// (*p1).SetAge2(30)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 25</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么时候应该使用指针类型接收者"><a href="#什么时候应该使用指针类型接收者" class="headerlink" title="什么时候应该使用指针类型接收者"></a>什么时候应该使用指针类型接收者</h3><ol><li>需要修改接收者中的值</li><li>接收者是拷贝代价比较大的大对象</li><li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</li></ol><h3 id="任意类型添加方法"><a href="#任意类型添加方法" class="headerlink" title="任意类型添加方法"></a>任意类型添加方法</h3><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的<code>int</code>类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//MyInt 将int定义为自定义MyInt类型</span><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span class="token comment">//SayHello 为MyInt添加一个SayHello的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MyInt<span class="token punctuation">)</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, 我是一个int。"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> m1 MyIntm1<span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Hello, 我是一个int。</span>m1 <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v  %T\n"</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m1<span class="token punctuation">)</span> <span class="token comment">//100  main.MyInt</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i>  **注意事项：** 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</div><h3 id="结构体的匿名字段"><a href="#结构体的匿名字段" class="headerlink" title="结构体的匿名字段"></a>结构体的匿名字段</h3><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Person 结构体Person类型</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token builtin">string</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p1 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"小王子"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>        <span class="token comment">//main.Person&#123;string:"北京", int:18&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//北京 18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 注意：</div><p>这里匿名字段的说法并不代表没有字段名，而是默认会采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p><h3 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h3><p>一个结构体中可以嵌套包含另一个结构体或结构体指针，就像下面的示例代码那样</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Address 地址结构体</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Province <span class="token builtin">string</span>City     <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//User 用户结构体</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name    <span class="token builtin">string</span>Gender  <span class="token builtin">string</span>Address Address<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>user1 <span class="token operator">:=</span> User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span>   <span class="token string">"小王子"</span><span class="token punctuation">,</span>Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>Address<span class="token punctuation">:</span> Address<span class="token punctuation">&#123;</span>Province<span class="token punctuation">:</span> <span class="token string">"山东"</span><span class="token punctuation">,</span>City<span class="token punctuation">:</span>     <span class="token string">"威海"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user1=%#v\n"</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token comment">//user1=main.User&#123;Name:"小王子", Gender:"男", Address:main.Address&#123;Province:"山东", City:"威海"&#125;&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套匿名字段"><a href="#嵌套匿名字段" class="headerlink" title="嵌套匿名字段"></a>嵌套匿名字段</h3><p>上面user结构体中嵌套的<code>Address</code>结构体也可以采用匿名字段的方式，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Address 地址结构体</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Province <span class="token builtin">string</span>City     <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//User 用户结构体</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name    <span class="token builtin">string</span>Gender  <span class="token builtin">string</span>Address <span class="token comment">//匿名字段</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> user2 Useruser2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"小王子"</span>user2<span class="token punctuation">.</span>Gender <span class="token operator">=</span> <span class="token string">"男"</span>user2<span class="token punctuation">.</span>Address<span class="token punctuation">.</span>Province <span class="token operator">=</span> <span class="token string">"山东"</span>    <span class="token comment">// 匿名字段默认使用类型名作为字段名</span>user2<span class="token punctuation">.</span>City <span class="token operator">=</span> <span class="token string">"威海"</span>                <span class="token comment">// 匿名字段可以省略</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user2=%#v\n"</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span> <span class="token comment">//user2=main.User&#123;Name:"小王子", Gender:"男", Address:main.Address&#123;Province:"山东", City:"威海"&#125;&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当访问结构体成员时会先在结构体中查找该字段，找不到再去嵌套的匿名字段中查找。</p><h3 id="嵌套结构体的字段名冲突"><a href="#嵌套结构体的字段名冲突" class="headerlink" title="嵌套结构体的字段名冲突"></a>嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Address 地址结构体</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Province   <span class="token builtin">string</span>City       <span class="token builtin">string</span>CreateTime <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//Email 邮箱结构体</span><span class="token keyword">type</span> Email <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Account    <span class="token builtin">string</span>CreateTime <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//User 用户结构体</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name   <span class="token builtin">string</span>Gender <span class="token builtin">string</span>AddressEmail<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> user3 Useruser3<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"沙河娜扎"</span>user3<span class="token punctuation">.</span>Gender <span class="token operator">=</span> <span class="token string">"男"</span><span class="token comment">// user3.CreateTime = "2019" //ambiguous selector user3.CreateTime</span>user3<span class="token punctuation">.</span>Address<span class="token punctuation">.</span>CreateTime <span class="token operator">=</span> <span class="token string">"2000"</span> <span class="token comment">//指定Address结构体中的CreateTime</span>user3<span class="token punctuation">.</span>Email<span class="token punctuation">.</span>CreateTime <span class="token operator">=</span> <span class="token string">"2000"</span>   <span class="token comment">//指定Email结构体中的CreateTime</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体的继承"><a href="#结构体的继承" class="headerlink" title="结构体的继承"></a>结构体的继承</h3><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Animal 动物</span><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Animal<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s会动！\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//Dog 狗</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Feet    <span class="token builtin">int8</span><span class="token operator">*</span>Animal <span class="token comment">//通过嵌套匿名结构体实现继承</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">wang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s会汪汪汪~\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>d1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">&#123;</span>Feet<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>Animal<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Animal<span class="token punctuation">&#123;</span> <span class="token comment">//注意嵌套的是结构体指针</span>name<span class="token punctuation">:</span> <span class="token string">"乐乐"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>d1<span class="token punctuation">.</span><span class="token function">wang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//乐乐会汪汪汪~</span>d1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//乐乐会动！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体字段的可见性"><a href="#结构体字段的可见性" class="headerlink" title="结构体字段的可见性"></a>结构体字段的可见性</h3><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p><h3 id="结构体与JSON序列化"><a href="#结构体与JSON序列化" class="headerlink" title="结构体与JSON序列化"></a>结构体与JSON序列化</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键&#x2F;值对组合中的键名写在前面并用双引号<code>&quot;&quot;</code>包裹，使用冒号<code>:</code>分隔，然后紧接着值；多个键值之间使用英文<code>,</code>分隔。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Student 学生</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>ID     <span class="token builtin">int</span>Gender <span class="token builtin">string</span>Name   <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//Class 班级</span><span class="token keyword">type</span> Class <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Title    <span class="token builtin">string</span>Students <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">&#123;</span>Title<span class="token punctuation">:</span>    <span class="token string">"101"</span><span class="token punctuation">,</span>Students<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>stu <span class="token operator">:=</span> <span class="token operator">&amp;</span>Student<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"stu%02d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>ID<span class="token punctuation">:</span>     i<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">.</span>Students <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Students<span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//JSON序列化：结构体-->JSON格式的字符串</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json marshal failed"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"json:%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token comment">//JSON反序列化：JSON格式的字符串-->结构体</span>str <span class="token operator">:=</span> <span class="token string">`&#123;"Title":"101","Students":[&#123;"ID":0,"Gender":"男","Name":"stu00"&#125;,&#123;"ID":1,"Gender":"男","Name":"stu01"&#125;,&#123;"ID":2,"Gender":"男","Name":"stu02"&#125;,&#123;"ID":3,"Gender":"男","Name":"stu03"&#125;,&#123;"ID":4,"Gender":"男","Name":"stu04"&#125;,&#123;"ID":5,"Gender":"男","Name":"stu05"&#125;,&#123;"ID":6,"Gender":"男","Name":"stu06"&#125;,&#123;"ID":7,"Gender":"男","Name":"stu07"&#125;,&#123;"ID":8,"Gender":"男","Name":"stu08"&#125;,&#123;"ID":9,"Gender":"男","Name":"stu09"&#125;]&#125;`</span>c1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Class<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json unmarshal failed!"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体标签-Tag"><a href="#结构体标签-Tag" class="headerlink" title="结构体标签(Tag)"></a>结构体标签(Tag)</h3><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对<strong>反引号</strong>包裹起来，具体的格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>key1:<span class="token string">"value1"</span> key2:<span class="token string">"value2"</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。</p><p><strong>注意事项：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p><p>例如我们为<code>Student</code>结构体的每个字段定义json序列化时使用的Tag：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Student 学生</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>ID     <span class="token builtin">int</span>    <span class="token string">`json:"id"`</span> <span class="token comment">//通过指定tag实现json序列化该字段时的key</span>Gender <span class="token builtin">string</span> <span class="token comment">//json序列化是默认使用字段名作为key</span>name   <span class="token builtin">string</span> <span class="token comment">//私有不能被json包访问</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s1 <span class="token operator">:=</span> Student<span class="token punctuation">&#123;</span>ID<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span>   <span class="token string">"沙河娜扎"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"json marshal failed!"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"json str:%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment">//json str:&#123;"id":1,"Gender":"男"&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体和方法补充知识"><a href="#结构体和方法补充知识" class="headerlink" title="结构体和方法补充知识"></a>结构体和方法补充知识</h3><p>因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name   <span class="token builtin">string</span>age    <span class="token builtin">int8</span>dreams <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">SetDreams</span><span class="token punctuation">(</span>dreams <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>dreams <span class="token operator">=</span> dreams<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p1 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"吃饭"</span><span class="token punctuation">,</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span> <span class="token string">"打豆豆"</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">.</span><span class="token function">SetDreams</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">// 你真的想要修改 p1.dreams 吗？</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"不睡觉"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>dreams<span class="token punctuation">)</span>  <span class="token comment">// ?</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">SetDreams</span><span class="token punctuation">(</span>dreams <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>dreams <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>dreams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>dreams<span class="token punctuation">,</span> dreams<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。</p><h2 id="包与依赖管理"><a href="#包与依赖管理" class="headerlink" title="包与依赖管理"></a>包与依赖管理</h2><h3 id="包介绍"><a href="#包介绍" class="headerlink" title="包介绍"></a>包介绍</h3><p>Go语言中支持模块化的开发理念，在Go语言中使用<code>包（package）</code>来支持代码模块化和代码复用。一个包是由一个或多个Go源码文件（.go结尾的文件）组成，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如<code>fmt</code>、<code>os</code>、<code>io</code>等。</p><p>例如，在之前的章节中我们频繁使用了<code>fmt</code>这个内置包。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h3><p>我们可以根据自己的需要创建自定义包。一个包可以简单理解为一个存放<code>.go</code>文件的文件夹。该文件夹下面的所有<code>.go</code>文件都要在非注释的第一行添加如下声明，声明该文件归属的包。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> packagename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>package：声明包的关键字</li><li>packagename：包名，可以不与文件夹的名称一致，不能包含 <code>-</code> 符号，最好与其实现的功能相对应。</li></ul><p>另外需要注意一个文件夹下面直接包含的文件只能归属一个包，同一个包的文件不能在多个文件夹下。包名为<code>main</code>的包是应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含<code>main</code>包的源代码则不会得到可执行文件。</p><h3 id="标识符可见性"><a href="#标识符可见性" class="headerlink" title="标识符可见性"></a>标识符可见性</h3><p>在同一个包内部声明的标识符都位于同一个命名空间下，在不同的包内部声明的标识符就属于不同的命名空间。想要在包的外部使用包内部的标识符就需要添加包名前缀，例如<code>fmt.Println(&quot;Hello world!&quot;)</code>，就是指调用<code>fmt</code>包中的<code>Println</code>函数。</p><p>如果想让一个包中的标识符（如变量、常量、类型、函数等）能被外部的包使用，那么标识符必须是对外可见的（public）。在Go语言中是通过标识符的首字母大&#x2F;小写来控制标识符的对外可见（public）&#x2F;不可见（private）的。在一个包内部只有首字母大写的标识符才是对外可见的。</p><p>例如我们定义一个名为<code>demo</code>的包，在其中定义了若干标识符。在另外一个包中并不是所有的标识符都能通过<code>demo.</code>前缀访问到，因为只有那些首字母是大写的标识符才是对外可见的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// 包级别标识符的可见性</span><span class="token comment">// num 定义一个全局整型变量</span><span class="token comment">// 首字母小写，对外不可见(只能在当前包内使用)</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token comment">// Mode 定义一个常量</span><span class="token comment">// 首字母大写，对外可见(可在其它包中使用)</span><span class="token keyword">const</span> Mode <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">// person 定义一个代表人的结构体</span><span class="token comment">// 首字母小写，对外不可见(只能在当前包内使用)</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>name <span class="token builtin">string</span>Age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token comment">// Add 返回两个整数和的函数</span><span class="token comment">// 首字母大写，对外可见(可在其它包中使用)</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token comment">// sayHi 打招呼的函数</span><span class="token comment">// 首字母小写，对外不可见(只能在当前包内使用)</span><span class="token keyword">func</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">"七米"</span> <span class="token comment">// 函数局部变量，只能在当前函数内使用</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的规则也适用于结构体，结构体中可导出字段的字段名称必须首字母大写。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name  <span class="token builtin">string</span> <span class="token comment">// 可在包外访问的方法</span>class <span class="token builtin">string</span> <span class="token comment">// 仅限包内访问的字段</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包的引入"><a href="#包的引入" class="headerlink" title="包的引入"></a>包的引入</h3><p>要在当前包中使用另外一个包的内容就需要使用<code>import</code>关键字引入这个包，并且import语句通常放在文件的开头，<code>package</code>声明语句的下方。完整的引入声明语句格式如下:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> importname <span class="token string">"path/to/package"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>importname：引入的包名，通常都省略。默认值为引入包的包名。</li><li>path&#x2F;to&#x2F;package：引入包的路径名称，必须使用双引号包裹起来。</li><li>Go语言中禁止循环导入包。</li></ul><p>一个Go源码文件中可以同时引入多个包，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">import</span> <span class="token string">"net/http"</span><span class="token keyword">import</span> <span class="token string">"os"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然可以使用批量引入的方式。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>  <span class="token string">"net/http"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当引入的多个包中存在相同的包名或者想自行为某个引入的包设置一个新包名时，都需要通过<code>importname</code>指定一个在当前文件中使用的新包名。例如，在引入<code>fmt</code>包时为其指定一个新包名<code>f</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> f <span class="token string">"fmt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在当前这个文件中就可以通过使用<code>f</code>来调用<code>fmt</code>包中的函数了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">f<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果引入一个包的时候为其设置了一个特殊<code>_</code>作为包名，那么这个包的引入方式就称为匿名引入。一个包被匿名引入的目的主要是为了加载这个包，从而使得这个包中的资源得以初始化。 被匿名引入的包中的<code>init</code>函数将被执行并且仅执行一遍。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匿名引入的包与其他方式导入的包一样都会被编译到可执行文件中。</p><p>需要注意的是，Go语言中不允许引入包却不在代码中使用这个包的内容，如果引入了未使用的包则会触发编译错误。</p><h3 id="init初始化函数"><a href="#init初始化函数" class="headerlink" title="init初始化函数"></a>init初始化函数</h3><p>在每一个Go源文件中，都可以定义任意个如下格式的特殊函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种特殊的函数不接收任何参数也没有任何返回值，我们也不能在代码中主动调用它。当程序启动的时候，init函数会按照它们声明的顺序自动执行。</p><p>一个包的初始化过程是按照代码中引入的顺序来进行的，所有在该包中声明的<code>init</code>函数都将被串行调用并且仅调用执行一次。每一个包初始化的时候都是先执行依赖的包中声明的<code>init</code>函数再执行当前包中声明的<code>init</code>函数。确保在程序的<code>main</code>函数开始执行时所有的依赖包都已初始化完成。</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/package01.png" alt="包初始化函数执行顺序示意图"></p><p>每一个包的初始化是先从初始化包级别变量开始的。例如从下面的示例中我们就可以看出包级别变量的初始化会先于<code>init</code>初始化函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> x <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x:"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pi:"</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好，世界！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">x: <span class="token number">10</span>pi: <span class="token number">3.14</span>Hello World<span class="token operator">!</span>你好，世界！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们了解了Go语言中包的定义及包的初始化过程，这让我们能够在开发时按照自己的需要定义包。同时我们还学到了如何在我们的代码中引入其它的包，不过在本小节的所有示例中我们都是引入Go内置的包。现代编程语言大多都允许开发者对外发布包&#x2F;库，也支持开发者在自己的代码中引入第三方库。这样的设计能够让广大开发者一起参与到语言的生态环境建设当中，把生态建设的更加完善。</p><h3 id="go-module介绍"><a href="#go-module介绍" class="headerlink" title="go module介绍"></a>go module介绍</h3><p>Go module 是 Go1.11 版本发布的依赖管理方案，从 Go1.14 版本开始推荐在生产环境使用，于Go1.16版本默认开启。Go module 提供了以下命令供我们使用：</p><p>go module相关命令</p><table><thead><tr><th align="center">命令</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">go mod init</td><td align="center">初始化项目依赖，生成go.mod文件</td></tr><tr><td align="center">go mod download</td><td align="center">根据go.mod文件下载依赖</td></tr><tr><td align="center">go mod tidy</td><td align="center">比对项目文件中引入的依赖与go.mod进行比对</td></tr><tr><td align="center">go mod graph</td><td align="center">输出依赖关系图</td></tr><tr><td align="center">go mod edit</td><td align="center">编辑go.mod文件</td></tr><tr><td align="center">go mod vendor</td><td align="center">将项目的所有依赖导出至vendor目录</td></tr><tr><td align="center">go mod verify</td><td align="center">检验一个依赖包是否被篡改过</td></tr><tr><td align="center">go mod why</td><td align="center">解释为什么需要某个依赖</td></tr></tbody></table><p>Go语言在 go module 的过渡阶段提供了 <code>GO111MODULE</code> 这个环境变量来作为是否启用 go module 功能的开关，考虑到 Go1.16 之后 go module 已经默认开启，所以本书不再介绍该配置，对于刚接触Go语言的读者而言完全没有必要了解这个历史包袱。</p><p><strong>GOPROXY</strong></p><p>这个环境变量主要是用于设置 Go 模块代理（Go module proxy），其作用是用于使 Go 在后续拉取模块版本时能够脱离传统的 VCS 方式，直接通过镜像站点来快速拉取。</p><p>GOPROXY 的默认值是：<code>https://proxy.golang.org,direct</code>，由于某些原因国内无法正常访问该地址，所以我们通常需要配置一个可访问的地址。目前社区使用比较多的有两个<code>https://goproxy.cn</code>和<code>https://goproxy.io</code>，当然如果你的公司有提供GOPROXY地址那么就直接使用。设置GOPAROXY的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GOPROXY 允许设置多个代理地址，多个地址之间需使用英文逗号 “,” 分隔。最后的 “direct” 是一个特殊指示符，用于指示 Go 回源到源地址去抓取（比如 GitHub 等）。当配置有多个代理地址时，如果第一个代理地址返回 404 或 410 错误时，Go 会自动尝试下一个代理地址，当遇见 “direct” 时触发回源，也就是回到源地址去抓取。</p><p><strong>GOPRIVATE</strong></p><p>设置了GOPROXY 之后，go 命令就会从配置的代理地址拉取和校验依赖包。当我们在项目中引入了非公开的包（公司内部git仓库或 github 私有仓库等），此时便无法正常从代理拉取到这些非公开的依赖包，这个时候就需要配置 GOPRIVATE 环境变量。GOPRIVATE用来告诉 go 命令哪些仓库属于私有仓库，不必通过代理服务器拉取和校验。</p><p>GOPRIVATE 的值也可以设置多个，多个地址之间使用英文逗号 “,” 分隔。我们通常会把自己公司内部的代码仓库设置到 GOPRIVATE 中，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span><span class="token string">"git.mycompany.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在拉取以<code>git.mycompany.com</code>为路径前缀的依赖包时就能正常拉取了。</p><p>此外，如果公司内部自建了 GOPROXY 服务，那么我们可以通过设置 <code>GONOPROXY=none</code>，允许通内部代理拉取私有仓库的包。</p><h3 id="使用go-module引入包"><a href="#使用go-module引入包" class="headerlink" title="使用go module引入包"></a>使用go module引入包</h3><p>接下来我们将通过一个示例来演示如何在开发项目时使用 go module 拉取和管理项目依赖。</p><p><strong>初始化项目</strong> 我们在本地新建一个名为<code>holiday</code>项目，按如下方式创建一个名为<code>holiday</code>的文件夹并切换到该目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> holiday$ <span class="token builtin class-name">cd</span> holiday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>目前我们位于<code>holiday</code>文件夹下，接下来执行下面的命令初始化项目。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go mod init holidaygo: creating new go.mod: module holiday<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该命令会自动在项目目录下创建一个<code>go.mod</code>文件，其内容如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module holiday<span class="token keyword">go</span> <span class="token number">1.16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>module holiday：定义当前项目的导入路径</li><li>go 1.16：标识当前项目使用的 Go 版本</li></ul><p><code>go.mod</code>文件会记录项目使用的第三方依赖包信息，包括包名和版本，由于我们的<code>holiday</code>项目目前还没有使用到第三方依赖包，所以<code>go.mod</code>文件暂时还没有记录任何依赖包信息，只有当前项目的一些信息。</p><p>接下来，我们在项目目录下新建一个<code>main.go</code>文件，其内容如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// holiday/main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"现在是假期时间..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们的<code>holiday</code>项目现在需要引入一个第三方包<code>github.com/q1mi/hello</code>来实现一些必要的功能。类似这样的场景在我们的日常开发中是很常见的。我们需要先将依赖包下载到本地同时在<code>go.mod</code>中记录依赖信息，然后才能在我们的代码中引入并使用这个包。下载依赖包主要有两种方法。</p><p>第一种方法是在项目目录下执行<code>go get</code>命令手动下载依赖的包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">holiday $ go get <span class="token parameter variable">-u</span> github.com/q1mi/hellogo get: added github.com/q1mi/hello v0.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样默认会下载最新的发布版本，你也可以指定想要下载指定的版本号的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">holiday $ go get <span class="token parameter variable">-u</span> github.com/q1mi/hello@v0.1.0go: downloading github.com/q1mi/hello v0.1.0go get: downgraded github.com/q1mi/hello v0.1.1 <span class="token operator">=</span><span class="token operator">></span> v0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果依赖包没有发布任何版本则会拉取最新的提交，最终<code>go.mod</code>中的依赖信息会变成类似下面这种由默认v0.0.0的版本号和最新一次commit的时间和hash组成的版本格式：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20210218074646</span><span class="token operator">-</span>139b0bcd549d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想指定下载某个commit对应的代码，可以直接指定commit hash，不过没有必要写出完整的commit hash，一般前7位即可。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">holiday $ go get github.com/q1mi/hello@2ccfaddgo: downloading github.com/q1mi/hello v0.1.2-0.20210219092711-2ccfaddad6a3go get: added github.com/q1mi/hello v0.1.2-0.20210219092711-2ccfaddad6a3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时，我们打开<code>go.mod</code>文件就可以看到下载的依赖包及版本信息都已经被记录下来了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module holiday<span class="token keyword">go</span> <span class="token number">1.16</span>require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello v0<span class="token punctuation">.</span><span class="token number">1.0</span> <span class="token comment">// indirect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行尾的<code>indirect</code>表示该依赖包为间接依赖，说明在当前程序中的所有 import 语句中没有发现引入这个包。</p><p>另外在执行<code>go get</code>命令下载一个新的依赖包时一般会额外添加<code>-u</code>参数，强制更新现有依赖。</p><p>第二种方式是我们直接编辑<code>go.mod</code>文件，将依赖包和版本信息写入该文件。例如我们修改<code>holiday/go.mod</code>文件内容如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module holiday<span class="token keyword">go</span> <span class="token number">1.16</span>require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示当前项目需要使用<code>github.com/q1mi/hello</code>库的最新版本，然后在项目目录下执行<code>go mod download</code>下载依赖包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">holiday $ go mod download<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不输出其它提示信息就说明依赖已经下载成功，此时<code>go.mod</code>文件已经变成如下内容。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module holiday<span class="token keyword">go</span> <span class="token number">1.16</span>require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello v0<span class="token punctuation">.</span><span class="token number">1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从中我们可以知道最新的版本号是<code>v0.1.1</code>。如果事先知道依赖包的具体版本号，可以直接在<code>go.mod</code>中指定需要的版本然后再执行<code>go mod download</code>下载。</p><p>这种方法同样支持指定想要下载的commit进行下载，例如直接在<code>go.mod</code>文件中按如下方式指定commit hash，这里只写出来了commit hash的前7位。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello 2ccfadda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行<code>go mod download</code>下载完依赖后，<code>go.mod</code>文件中对应的版本信息会自动更新为类似下面的格式。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module holiday<span class="token keyword">go</span> <span class="token number">1.16</span>require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello v0<span class="token punctuation">.</span><span class="token number">1.2</span><span class="token operator">-</span><span class="token number">0.20210219092711</span><span class="token operator">-</span>2ccfaddad6a3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载好要使用的依赖包之后，我们现在就可以在<code>holiday/main.go</code>文件中使用这个包了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/q1mi/hello"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"现在是假期时间..."</span><span class="token punctuation">)</span>hello<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用hello包的SayHi函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述代码编译执行，就能看到执行结果了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">holiday $ go buildholiday $ ./holiday现在是假期时间<span class="token punctuation">..</span>.你好，我是七米。很高兴认识你。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们的项目功能越做越多，代码越来越多的时候，通常会选择在项目内部按功能或业务划分成多个不同包。Go语言支持在一个项目（project）下定义多个包（package）。</p><p>例如，我们在<code>holiday</code>项目内部创建一个新的package——<code>summer</code>，此时新的项目目录结构如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">holidy├── go.mod├── go.sum├── main.go└── summer    └── summer.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>holiday/summer/summer.go</code>文件内容如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> summer<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// Diving 潜水...</span><span class="token keyword">func</span> <span class="token function">Diving</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"夏天去诗巴丹潜水..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时想要在当前项目目录下的其他包或者<code>main.go</code>中调用这个<code>Diving</code>函数需要如何引入呢？这里以在<code>main.go</code>中演示详细的调用过程为例，在项目内其他包的引入方式类似。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"holiday/summer"</span> <span class="token comment">// 导入当前项目下的包</span><span class="token string">"github.com/q1mi/hello"</span> <span class="token comment">// 导入github上第三方包</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"现在是假期时间..."</span><span class="token punctuation">)</span>hello<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>summer<span class="token punctuation">.</span><span class="token function">Diving</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的示例可以看出，项目中定义的包都会以项目的导入路径为前缀。</p><p>如果你想要导入本地的一个包，并且这个包也没有发布到到其他任何代码仓库，这时候你可以在<code>go.mod</code>文件中使用<code>replace</code>语句将依赖临时替换为本地的代码包。例如在我的电脑上有另外一个名为<code>liwenzhou.com/overtime</code>的项目，它位于<code>holiday</code>项目同级目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── holiday│   ├── go.mod│   ├── go.sum│   ├── main.go│   └── summer│       └── summer.go└── overtime    ├── go.mod    └── overtime.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>liwenzhou.com/overtime</code>包只存在于我本地，并不能通过网络获取到这个代码包，这个时候应该如何在<code>holidy</code>项目中引入它呢？</p><p>我们可以在<code>holidy/go.mod</code>文件中正常引入<code>liwenzhou.com/overtime</code>包，然后像下面的示例那样使用<code>replace</code>语句将这个依赖替换为使用相对路径表示的本地包。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module holiday<span class="token keyword">go</span> <span class="token number">1.16</span>require github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello v0<span class="token punctuation">.</span><span class="token number">1.1</span>require liwenzhou<span class="token punctuation">.</span>com<span class="token operator">/</span>overtime v0<span class="token punctuation">.</span><span class="token number">0.0</span>replace liwenzhou<span class="token punctuation">.</span>com<span class="token operator">/</span>overtime  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>overtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们就可以在<code>holiday/main.go</code>下正常引入并使用<code>overtime</code>包了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"holiday/summer"</span> <span class="token comment">// 导入当前项目下的包</span><span class="token string">"liwenzhou.com/overtime"</span> <span class="token comment">// 通过replace导入的本地包</span><span class="token string">"github.com/q1mi/hello"</span> <span class="token comment">// 导入github上第三方包</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"现在是假期时间..."</span><span class="token punctuation">)</span>hello<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>summer<span class="token punctuation">.</span><span class="token function">Diving</span><span class="token punctuation">(</span><span class="token punctuation">)</span>overtime<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也经常使用<code>replace</code>将项目依赖中的某个包，替换为其他版本的代码包或我们自己修改后的代码包。</p><p><strong>go.mod文件</strong></p><p><code>go.mod</code>文件中记录了当前项目中所有依赖包的相关信息，声明依赖的格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">require module/path v1.2.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>require：声明依赖的关键字</li><li>module&#x2F;path：依赖包的引入路径</li><li>v1.2.3：依赖包的版本号。支持以下几种格式：<ul><li>latest：最新版本</li><li>v1.0.0：详细版本号</li><li>commit hash：指定某次commit hash</li></ul></li></ul><p>引入某些没有发布过<code>tag</code>版本标识的依赖包时，<code>go.mod</code>中记录的依赖版本信息就会出现类似<code>v0.0.0-20210218074646-139b0bcd549d</code>的格式，由版本号、commit时间和commit的hash值组成。</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/module_version_info.png" alt="go module生成的版本信息组成示意图"></p><p><strong>go.sum文件</strong></p><p>使用go module下载了依赖后，项目目录下还会生成一个<code>go.sum</code>文件，这个文件中详细记录了当前项目中引入的依赖包的信息及其hash 值。<code>go.sum</code>文件内容通常是以类似下面的格式出现。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">&lt;</span>module<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod <span class="token operator">&lt;</span>hash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">&lt;</span>module<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span> <span class="token operator">&lt;</span>hash<span class="token operator">></span><span class="token operator">&lt;</span>module<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod <span class="token operator">&lt;</span>hash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不同于其他语言提供的基于中心的包管理机制，例如 npm 和 pypi等，Go并没有提供一个中央仓库来管理所有依赖包，而是采用分布式的方式来管理包。为了防止依赖包被非法篡改，Go module 引入了<code>go.sum</code>机制来对依赖包进行校验。</p><p><strong>依赖保存位置</strong></p><p>Go module 会把下载到本地的依赖包会以类似下面的形式保存在 <code>$GOPATH/pkg/mod</code>目录下，每个依赖包都会带有版本号进行区分，这样就允许在本地存在同一个包的多个不同版本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mod├── cache├── cloud.google.com├── github.com    └──q1mi          ├── hello@v0.0.0-20210218074646-139b0bcd549d          ├── hello@v0.1.1          └── hello@v0.1.0<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想清除所有本地已缓存的依赖包数据，可以执行 <code>go clean -modcache</code> 命令。</p><h3 id="使用go-module发布包"><a href="#使用go-module发布包" class="headerlink" title="使用go module发布包"></a>使用go module发布包</h3><p>在上面的小节中我们学习了如何在项目中引入别人提供的依赖包，那么当我们想要在社区发布一个自己编写的代码包或者在公司内部编写一个供内部使用的公用组件时，我们该怎么做呢？接下来，我们就一起编写一个代码包并将它发布到<code>github.com</code>仓库，让它能够被全球的Go语言开发者使用。</p><p>我们首先在自己的 github 账号下新建一个项目，并把它下载到本地。我这里就以创建和发布一个名为<code>hello</code>的项目为例进行演示。这个<code>hello</code>包将对外提供一个名为<code>SayHi</code>的函数，它的作用非常简单就是向调用者发去问候。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/q1mi/hello$ <span class="token builtin class-name">cd</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们当前位于<code>hello</code>项目目录下，执行下面的命令初始化项目，创建<code>go.mod</code>文件。需要注意的是这里定义项目的引入路径为<code>github.com/q1mi/hello</code>，读者在自行测试时需要将这部分替换为自己的仓库路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hello $ go mod init github.com/q1mi/hellogo: creating new go.mod: module github.com/q1mi/hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们在该项目根目录下创建 <code>hello.go</code> 文件，添加下面的内容：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> hello<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好，我是七米。很高兴认识你。"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将该项目的代码 push 到仓库的远端分支，这样就对外发布了一个Go包。其他的开发者可以通过<code>github.com/q1mi/hello</code>这个引入路径下载并使用这个包了。</p><p>一个设计完善的包应该包含开源许可证及文档等内容，并且我们还应该尽心维护并适时发布适当的版本。github 上发布版本号使用git tag为代码包打上标签即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hello $ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> v0.1.0 <span class="token parameter variable">-m</span> <span class="token string">"release version v0.1.0"</span>hello $ <span class="token function">git</span> push origin v0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>经过上面的操作我们就发布了一个版本号为<code>v0.1.0</code>的版本。</p><p>Go modules中建议使用语义化版本控制，其建议的版本号格式如下：</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/version_number.png" alt="语义化版本号示意图"></p><p>其中：</p><ul><li>主版本号：发布了不兼容的版本迭代时递增（breaking changes）。</li><li>次版本号：发布了功能性更新时递增。</li><li>修订号：发布了bug修复类更新时递增。</li></ul><p><strong>发布新的主版本</strong></p><p>现在我们的<code>hello</code>项目要进行与之前版本不兼容的更新，我们计划让<code>SayHi</code>函数支持向指定人发出问候。更新后的<code>SayHi</code>函数内容如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> hello<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">// SayHi 向指定人打招呼的函数</span><span class="token keyword">func</span> <span class="token function">SayHi</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"你好%s，我是七米。很高兴认识你。\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于这次改动巨大（修改了函数之前的调用规则），对之前使用该包作为依赖的用户影响巨大。因此我们需要发布一个主版本号递增的<code>v2</code>版本。在这种情况下，我们通常会修改当前包的引入路径，像下面的示例一样为引入路径添加版本后缀。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// hello/go.mod</span>module github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello<span class="token operator">/</span>v2<span class="token keyword">go</span> <span class="token number">1.16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把修改后的代码提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hello $ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>hello $ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"feat: SayHi现在支持给指定人打招呼啦"</span>hello $ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打好 tag 推送到远程仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hello $ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> v2.0.0 <span class="token parameter variable">-m</span> <span class="token string">"release version v2.0.0"</span>hello $ <span class="token function">git</span> push origin v2.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样在不影响使用旧版本的用户的前提下，我们新的版本也发布出去了。想要使用<code>v2</code>版本的代码包的用户只需按修改后的引入路径下载即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/q1mi/hello/v2@v2.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在代码中使用的过程与之前类似，只是需要注意引入路径要添加 v2 版本后缀。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/q1mi/hello/v2"</span> <span class="token comment">// 引入v2版本</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"现在是假期时间..."</span><span class="token punctuation">)</span>hello<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span> <span class="token comment">// v2版本的SayHi函数需要传入字符串参数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>废弃已发布版本</strong></p><p>如果某个发布的版本存在致命缺陷不再想让用户使用时，我们可以使用<code>retract</code>声明废弃的版本。例如我们在<code>hello/go.mod</code>文件中按如下方式声明即可对外废弃<code>v0.1.2</code>版本。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">module github<span class="token punctuation">.</span>com<span class="token operator">/</span>q1mi<span class="token operator">/</span>hello<span class="token keyword">go</span> <span class="token number">1.16</span>retract v0<span class="token punctuation">.</span><span class="token number">1.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户使用go get下载<code>v0.1.2</code>版本时就会收到提示，催促其升级到其他版本。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>每个接口类型由任意个方法签名组成，接口的定义格式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> 接口类型名 <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>    方法名<span class="token function">1</span><span class="token punctuation">(</span> 参数列表<span class="token number">1</span> <span class="token punctuation">)</span> 返回值列表<span class="token number">1</span>    方法名<span class="token function">2</span><span class="token punctuation">(</span> 参数列表<span class="token number">2</span> <span class="token punctuation">)</span> 返回值列表<span class="token number">2</span>    …<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><p>接口类型名：Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有关闭操作的接口叫<code>closer</code>等。接口名最好要能突出该接口的类型含义。</p></li><li><p>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</p></li><li><p>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</p></li><li><p>举个例子，定义一个包含<code>Write</code>方法的<code>Writer</code>接口。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Writer <span class="token keyword">interface</span><span class="token punctuation">&#123;</span>    <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当你看到一个<code>Writer</code>接口类型的值时，你不知道它是什么，唯一知道的就是可以通过调用它的<code>Write</code>方法来做一些事情。</p></li></ul><h3 id="实现接口的条件"><a href="#实现接口的条件" class="headerlink" title="实现接口的条件"></a>实现接口的条件</h3><p>接口就是规定了一个<strong>需要实现的方法列表</strong>，在 Go 语言中一个类型只要实现了接口中规定的所有方法，那么我们就称它实现了这个接口。</p><p>我们定义的<code>Singer</code>接口类型，它包含一个<code>Sing</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Singer 接口</span><span class="token keyword">type</span> Singer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们有一个<code>Bird</code>结构体类型如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Bird <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为<code>Singer</code>接口只包含一个<code>Sing</code>方法，所以只需要给<code>Bird</code>结构体添加一个<code>Sing</code>方法就可以满足<code>Singer</code>接口的要求。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Sing Bird类型的Sing方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b Bird<span class="token punctuation">)</span> <span class="token function">Sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就称为<code>Bird</code>实现了<code>Singer</code>接口。</p><h3 id="为什么要使用接口"><a href="#为什么要使用接口" class="headerlink" title="为什么要使用接口"></a>为什么要使用接口</h3><p>现在假设我们有许多小动物，下面的代码定义了猫和狗，他们饿了都会叫</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Cat <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Cat<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"猫在叫"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"狗在叫"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    c <span class="token operator">:=</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个时候，又跑来了一直羊，羊也会叫</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Sheep <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s Sheep<span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"羊在叫"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们接下来定义一个饿肚子的场景</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// MakeCatHungry 猫饿了会喵喵喵~</span><span class="token keyword">func</span> <span class="token function">MakeCatHungry</span><span class="token punctuation">(</span>c Cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// MakeSheepHungry 羊饿了会咩咩咩~</span><span class="token keyword">func</span> <span class="token function">MakeSheepHungry</span><span class="token punctuation">(</span>s Sheep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来会有越来越多的小动物跑过来，我们的代码世界该怎么拓展呢？</p><p>在饿肚子这个场景下，我们可不可以把所有动物都当成一个“会叫的类型”来处理呢？当然可以！使用接口类型就可以实现这个目标。 我们的代码其实并不关心究竟是什么动物在叫，我们只是在代码中调用它的<code>Say()</code>方法，这就足够了。</p><p>我们可以约定一个<code>Sayer</code>类型，它必须实现一个<code>Say()</code>方法，只要饿肚子了，我们就调用<code>Say()</code>方法。</p><p>然后我们定义一个通用的<code>MakeHungry</code>函数，接收<code>Sayer</code>类型的参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// MakeHungry 饿肚子了...</span><span class="token keyword">func</span> <span class="token function">MakeHungry</span><span class="token punctuation">(</span>s Sayer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过使用接口类型，把所有会叫的动物当成<code>Sayer</code>类型来处理，只要实现了<code>Say()</code>方法都能当成<code>Sayer</code>类型的变量来处理。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c cat<span class="token function">MakeHungry</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">var</span> d dog<span class="token function">MakeHungry</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在电商系统中我们允许用户使用多种支付方式（支付宝支付、微信支付、银联支付等），我们的交易流程中可能不太在乎用户究竟使用什么支付方式，只要它能提供一个实现支付功能的<code>Pay</code>方法让调用方调用就可以了。</p><p>再比如我们需要在某个程序中添加一个将某些指标数据向外输出的功能，根据不同的需求可能要将数据输出到终端、写入到文件或者通过网络连接发送出去。在这个场景下我们可以不关注最终输出的目的地是什么，只需要它能提供一个<code>Write</code>方法让我们把内容写入就可以了。</p><p>Go语言中为了解决类似上面的问题引入了接口的概念，接口类型区别于我们之前章节中介绍的那些具体类型，让我们专注于该类型提供的方法，而不是类型本身。使用接口类型通常能够让我们写出更加通用和灵活的代码。</p><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>HP、Java等语言中也有接口的概念，不过在PHP和Java语言中需要显式声明一个类实现了哪些接口，在Go语言中使用隐式声明的方式实现接口。只要一个类型实现了接口中规定的所有方法，那么它就实现了这个接口。</p><p>Go语言中的这种设计符合程序开发中抽象的一般规律，例如在下面的代码示例中，我们的电商系统最开始只设计了支付宝一种支付方式：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ZhiFuBao <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">// 支付宝</span><span class="token punctuation">&#125;</span><span class="token comment">// Pay 支付宝的支付方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>z <span class="token operator">*</span>ZhiFuBao<span class="token punctuation">)</span> <span class="token function">Pay</span><span class="token punctuation">(</span>amount <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"使用支付宝付款：%.2f元。\n"</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>amount<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Checkout 结账</span><span class="token keyword">func</span> <span class="token function">Checkout</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>ZhiFuBao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 支付100元</span>obj<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">Checkout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ZhiFuBao<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随着业务的发展，根据用户需求添加支持微信支付。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> WeChat <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">// 微信</span><span class="token punctuation">&#125;</span><span class="token comment">// Pay 微信的支付方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>WeChat<span class="token punctuation">)</span> <span class="token function">Pay</span><span class="token punctuation">(</span>amount <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"使用微信付款：%.2f元。\n"</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>amount<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际的交易流程中，我们可以根据用户选择的支付方式来决定最终调用支付宝的Pay方法还是微信支付的Pay方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Checkout 支付宝结账</span><span class="token keyword">func</span> <span class="token function">CheckoutWithZFB</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>ZhiFuBao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 支付100元</span>obj<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Checkout 微信支付结账</span><span class="token keyword">func</span> <span class="token function">CheckoutWithWX</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>WeChat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 支付100元</span>obj<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，从上面的代码示例中我们可以看出，我们其实并不怎么关心用户选择的是什么支付方式，我们只关心调用Pay方法时能否正常运行。这就是典型的“不关心它是什么，只关心它能做什么”的场景。</p><p>在这种场景下我们可以将具体的支付方式抽象为一个名为<code>Payer</code>的接口类型，即任何实现了<code>Pay</code>方法的都可以称为<code>Payer</code>类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Payer 包含支付方法的接口类型</span><span class="token keyword">type</span> Payer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Pay</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时只需要修改下原始的<code>Checkout</code>函数，它接收一个<code>Payer</code>类型的参数。这样就能够在不修改既有函数调用的基础上，支持新的支付方式。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Checkout 结账</span><span class="token keyword">func</span> <span class="token function">Checkout</span><span class="token punctuation">(</span>obj Payer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 支付100元</span>obj<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">Checkout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ZhiFuBao<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 之前调用支付宝支付</span><span class="token function">Checkout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>WeChat<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 现在支持使用微信支付</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像类似的例子在我们编程过程中会经常遇到：</p><ul><li>比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？</li><li>比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？</li><li>比如满减券、立减券、打折券都属于电商场景下常见的优惠方式，我们能不能把它们当成“优惠券”来处理呢？</li></ul><p>接口类型是Go语言提供的一种工具，在实际的编码过程中是否使用它由你自己决定，但是通常使用接口类型可以使代码更清晰易读。</p><p>那实现了接口又有什么用呢？一个接口类型的变量能够存储所有实现了该接口的类型变量。</p><p>例如在上面的示例中，<code>Dog</code>和<code>Cat</code>类型均实现了<code>Sayer</code>接口，此时一个<code>Sayer</code>类型的变量就能够接收<code>Cat</code>和<code>Dog</code>类型的变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x Sayer <span class="token comment">// 声明一个Sayer类型的变量x</span>a <span class="token operator">:=</span> Cat<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 声明一个Cat类型变量a</span>b <span class="token operator">:=</span> Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 声明一个Dog类型变量b</span>x <span class="token operator">=</span> a       <span class="token comment">// 可以把Cat类型变量直接赋值给x</span>x<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 喵喵喵</span>x <span class="token operator">=</span> b       <span class="token comment">// 可以把Dog类型变量直接赋值给x</span>x<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 汪汪汪</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="值接收者和指针接收者"><a href="#值接收者和指针接收者" class="headerlink" title="值接收者和指针接收者"></a>值接收者和指针接收者</h3><p>在结构体那一章节中，我们介绍了在定义结构体方法时既可以使用值接收者也可以使用指针接收者。那么对于实现接口来说使用值接收者和使用指针接收者有什么区别呢？接下来我们通过一个例子看一下其中的区别。</p><p>我们定义一个<code>Mover</code>接口，它包含一个<code>Move</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Mover 定义一个接口类型</span><span class="token keyword">type</span> Mover <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="值接收者实现接口"><a href="#值接收者实现接口" class="headerlink" title="值接收者实现接口"></a>值接收者实现接口</h4><p>我们定义一个<code>Dog</code>结构体类型，并使用值接收者为其定义一个<code>Move</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Dog <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span><span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"狗会动"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时实现mover接口的时Dog类型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x Mover  <span class="token comment">//声明mover类型</span><span class="token keyword">var</span> d1 <span class="token operator">=</span> Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> d1 <span class="token comment">//可以将d1 赋值给变量x</span>x<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token operator">*</span>Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> d2    <span class="token comment">// d2是Dog指针类型</span>x<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 也可以将d2赋值给变量x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是结构体类型还是对应的结构体指针类型的变量都可以赋值给该接口变量。</p><h2 id="日志库项目"><a href="#日志库项目" class="headerlink" title="日志库项目"></a>日志库项目</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>向文件中写入日志</li><li>日志分级别<ul><li>debug</li><li>info</li><li>warning</li><li>error</li><li>fatal</li></ul></li><li>日志支持开关控制</li><li>日志要有时间，行号，文件名，日志级别，具体的日志信息</li><li>日志文件需要切割</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy数据类型-正则表达式</title>
      <link href="/posts/2149.html"/>
      <url>/posts/2149.html</url>
      
        <content type="html"><![CDATA[<h1 id="groovy-正则表达式"><a href="#groovy-正则表达式" class="headerlink" title="groovy 正则表达式"></a>groovy 正则表达式</h1><ul><li>添加解析器 @NonCPS</li></ul><h2 id="正则表达式字符串"><a href="#正则表达式字符串" class="headerlink" title="正则表达式字符串"></a>正则表达式字符串</h2><p>首先说说斜杠字符串，主要用于正则表达式。在斜杠字符串中不需要转义反斜杠，只有正斜杠需要转义。这让我们编写正则表达式非常方便，不像Java那样需要双斜杠（<code>\\w+\\s</code>这样的）。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> fooPattern <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">/.*foo.*/</span></span><span class="token keyword">assert</span> fooPattern <span class="token operator">==</span> <span class="token string">'.*foo.*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还有美元斜杠字符串，其中的所有字符都不会被转义。另外斜杠字符串和美元斜杠字符串都可以跨过多行。它主要也是用于编写更复杂的正则表达式。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> dollarSlashy <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$/    Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">,    today we're </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">date</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.    $ dollar sign    $$ escaped dollar sign    \ backslash    / forward slash    $/ escaped forward slash    $/$ escaped dollar slashy string delimiter/$</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式运算符"><a href="#正则表达式运算符" class="headerlink" title="正则表达式运算符"></a>正则表达式运算符</h2><h3 id="模式运算符"><a href="#模式运算符" class="headerlink" title="模式运算符"></a>模式运算符</h3><p>我们可以用<code>~</code>用给定的字符串创建<code>java.util.regex.Pattern</code>对象。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> p <span class="token operator">=</span> <span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/foo/</span></span><span class="token keyword">assert</span> p <span class="token keyword">instanceof</span> <span class="token class-name">Pattern</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查找运算符"><a href="#查找运算符" class="headerlink" title="查找运算符"></a>查找运算符</h3><p>我们可以使用<code>=~</code>运算符创建一个Matcher对象，然后我们可以将结果放到Groovy的任何布尔判断位置。Groovy会调用<code>find</code>方法查找是否存在指定的字符串。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> text <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"some text to match"</span></span><span class="token keyword">def</span> m <span class="token operator">=</span> text <span class="token operator">=~</span> <span class="token interpolation-string"><span class="token string">/match/</span></span>                                           <span class="token keyword">assert</span> m <span class="token keyword">instanceof</span> <span class="token class-name">Matcher</span>                                       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"Oops, text not found!"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匹配运算符"><a href="#匹配运算符" class="headerlink" title="匹配运算符"></a>匹配运算符</h3><p>匹配运算符<code>==~</code>和查找运算符类似，只不过这次直接返回布尔值，判断给定的文本是否和正则表达式匹配。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">m <span class="token operator">=</span> text <span class="token operator">==~</span> <span class="token interpolation-string"><span class="token string">/match/</span></span>                                              <span class="token keyword">assert</span> m <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span>                                       <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"Should not reach that point!"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h1><p>说了这么多，写个小例子验证一下这里的功能。文本截取自BBC某新闻。用前面的说的语法糖来处理一下文本。整个Groovy文件作为脚本执行。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//这次直接当做脚本用</span><span class="token keyword">def</span> texts <span class="token operator">=</span> <span class="token string">'''The Chinese premier described the world's second-largest economy as a butterfly struggling to emerge from a chrysalis.He said this transformation was filled with promise but also great pain.He repeatedly paid tribute to Communist Party leader Xi Jinping and said that under the sound leadership of the Party, the Chinese people had the courage and ingenuity to overcome all difficulties.'''</span><span class="token comment">//p开头的单词</span><span class="token keyword">def</span> startsWithP <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">/\b[pP]\w*\b/</span></span><span class="token keyword">def</span> wordsStartsWithP <span class="token operator">=</span> texts <span class="token operator">=~</span> startsWithP<span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"p开头的单词"</span></span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>wordsStartsWithP<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">wordsStartsWithP<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//以y结尾的单词</span><span class="token keyword">def</span> endsWithY <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">/^.*y$/</span></span><span class="token keyword">def</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'happy'</span><span class="token punctuation">,</span> <span class="token string">'foolish'</span><span class="token punctuation">,</span> <span class="token string">'something'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'lucky'</span><span class="token punctuation">]</span><span class="token keyword">def</span> results <span class="token operator">=</span> words<span class="token punctuation">.</span>findAll <span class="token punctuation">&#123;</span> it <span class="token operator">==~</span> endsWithY <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"y结尾的单词:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">results</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy数据类型-函数</title>
      <link href="/posts/29915.html"/>
      <url>/posts/29915.html</url>
      
        <content type="html"><![CDATA[<h4 id="groovy-函数"><a href="#groovy-函数" class="headerlink" title="groovy 函数"></a>groovy 函数</h4><ul><li>def 定义函数</li><li>语法<pre class="line-numbers language-none"><code class="language-none">def PrintMes(value)&#123;    println(value)    return value    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>调用 PrintMes()</li><li>实践<pre class="line-numbers language-none"><code class="language-none">groovy:000&gt; def PrintMes(value)&#123;groovy:001&gt;     println(value)groovy:002&gt;     return valuegroovy:003&gt;     &#125;&#x3D;&#x3D;&#x3D;&gt; truegroovy:000&gt; PrintMes(&quot;devops&quot;)devops&#x3D;&#x3D;&#x3D;&gt; devopsgroovy:000&gt; resposne &#x3D; PrintMes(&quot;devope&quot;)devope&#x3D;&#x3D;&#x3D;&gt; devopegroovy:000&gt; println(response)Unknown property: responsegroovy:000&gt; println(resposne)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy数据类型-list</title>
      <link href="/posts/42286.html"/>
      <url>/posts/42286.html</url>
      
        <content type="html"><![CDATA[<h4 id="groovy数据类型-list"><a href="#groovy数据类型-list" class="headerlink" title="groovy数据类型-list"></a>groovy数据类型-list</h4><ul><li>列表符号[]</li><li>常用方法<ul><li><ul><li><ul><li>+&#x3D; -&#x3D; 元素增加或者减少</li></ul></li></ul></li><li>&lt;&lt; 、 add() 添加元素</li><li>isEmpty() 是否为空</li><li>intersect([2, 3]) disjoint([1]) 取交集、判断是否有交集</li><li>flatten() 合并嵌套的列表</li><li>unique()去重</li><li>reverse() sort() 反转 升序</li><li>count() 元素个数</li><li>join() 将元素按照参数链接</li><li>sum() min() max() </li><li>contains() 包含特定元素</li><li>remove(2) removeA11()</li><li>each{} 遍历</li></ul></li><li>实践<pre class="line-numbers language-none"><code class="language-none">  groovy:000&gt; []&#x3D;&#x3D;&#x3D;&gt; []groovy:000&gt; [1, 2, 3, 4, 5] + 6&#x3D;&#x3D;&#x3D;&gt; [1, 2, 3, 4, 5, 6]groovy:000&gt; [1, 2, 3, 4, 5]  &lt;&lt; 14&#x3D;&#x3D;&#x3D;&gt; [1, 2, 3, 4, 5, 14]groovy:000&gt; [1, 2, 3, 4, 5].add(14)&#x3D;&#x3D;&#x3D;&gt; truegroovy:000&gt; result &#x3D; [1, 2, 3, 4, 5].add(14)&#x3D;&#x3D;&#x3D;&gt; truegroovy:000&gt; println(result)true&#x3D;&#x3D;&#x3D;&gt; nullgroovy:000&gt; [2, 3, 4, 4, 6, 7].unique()&#x3D;&#x3D;&#x3D;&gt; [2, 3, 4, 6, 7]groovy:000&gt; [2, 3, 4, 5, 6, 6].each&#123;println(it)&#125;234566&#x3D;&#x3D;&#x3D;&gt; [2, 3, 4, 5, 6, 6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy数据类型-string</title>
      <link href="/posts/50895.html"/>
      <url>/posts/50895.html</url>
      
        <content type="html"><![CDATA[<h4 id="groovy数据类型-String"><a href="#groovy数据类型-String" class="headerlink" title="groovy数据类型-String"></a>groovy数据类型-String</h4><ul><li>字符串表示：单双引号，三引号</li><li>常用方法：<ul><li>contain() 是否包含特定的内容，返回trur or false</li><li>size() length 大小、长度</li><li>toString() 转换成string类型</li><li>indexOf() 元素的索引</li><li>endsWith() 是否指定字符串的结尾</li><li>minus() plus() 去除、增加字符串</li><li>reverse() 反转字符串</li><li>substring(1, 2) 指定索引开始的子字符串</li><li>toUpperCase()、 toLowerCase() 大小写转换</li><li>split()字符串分割， 默认空格分割，返回列表</li></ul></li><li>实践 <pre class="line-numbers language-none"><code class="language-none"> groovy:000&gt; name &#x3D; &quot;zhangsan&quot;&#x3D;&#x3D;&#x3D;&gt; zhangsangroovy:000&gt; &quot;my name is $&#123;zhangsan&#125;&quot;Unknown property: zhangsangroovy:000&gt; &quot;my name is $&#123;name&#125;&quot;&#x3D;&#x3D;&#x3D;&gt; my name is zhangsangroovy:000&gt; &#39;my name is $&#123;name&#125;&#39;&#x3D;&#x3D;&#x3D;&gt; my name is $&#123;name&#125; 单引号打变量名， 双引号获取变量的值  groovy:000&gt; &quot;devopsteststops&quot;.contains(&quot;ops&quot;)&#x3D;&#x3D;&#x3D;&gt; truegroovy:000&gt; &quot;devopsteststops&quot;.contains(&quot;users&quot;)&#x3D;&#x3D;&#x3D;&gt; falsegroovy:000&gt; &quot;devopsteststops&quot;.endsWith(&quot;ops&quot;)&#x3D;&#x3D;&#x3D;&gt; truegroovy:000&gt; &quot;devopsteststops&quot;.endsWith(&quot;abs&quot;)&#x3D;&#x3D;&#x3D;&gt; falsegroovy:000&gt; &quot;devopsteststops&quot;.size()&#x3D;&#x3D;&#x3D;&gt; 15groovy:000&gt; &quot;devopsteststops&quot;.length()&#x3D;&#x3D;&#x3D;&gt; 15groovy:000&gt; &quot;dev&quot; + &quot;ops&quot;&#x3D;&#x3D;&#x3D;&gt; devopsgroovy:000&gt; &quot;dev&quot; - &quot;ops&quot;&#x3D;&#x3D;&#x3D;&gt; devgroovy:000&gt; &quot;devops&quot;.toUpperCase()&#x3D;&#x3D;&#x3D;&gt; DEVOPSgroovy:000&gt; &quot;devops&quot;.toUpperCase().toLowerCase()&#x3D;&#x3D;&#x3D;&gt; devopsgroovy:000&gt; groovy:000&gt; &quot;host01, host02, host03&quot;.split(&quot;,&quot;)&#x3D;&#x3D;&#x3D;&gt; [host01,  host02,  host03]groovy:000&gt; hosts &#x3D; &quot;host01, host02, host03&quot;.split(&quot;,&quot;)&#x3D;&#x3D;&#x3D;&gt; [host01,  host02,  host03]groovy:000&gt; for (i in hosts)&#123;&#125;&#x3D;&#x3D;&#x3D;&gt; nullgroovy:000&gt; for (i in hosts)&#123;groovy:001&gt; println(i)&#125;host01 host02 host03&#x3D;&#x3D;&#x3D;&gt; null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groovy安装</title>
      <link href="/posts/20877.html"/>
      <url>/posts/20877.html</url>
      
        <content type="html"><![CDATA[<h4 id="groovy安装"><a href="#groovy安装" class="headerlink" title="groovy安装"></a>groovy安装</h4><ol><li>wget <a href="https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-4.0.2.zip">https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-4.0.2.zip</a></li><li>unzip apache-groovy-binary-4.0.2.zip -d &#x2F;usr&#x2F;local&#x2F;</li><li>ln -sv &#x2F;usr&#x2F;local&#x2F;groovy-4.0.2 &#x2F;usr&#x2F;local&#x2F;groovy</li><li>vi &#x2F;etc&#x2F;profile<pre class="line-numbers language-none"><code class="language-none">export GROOVY_HOME&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;groovy&quot;export PATH&#x3D;$GROOVY_HOME&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>source &#x2F;etc&#x2F;profile</li><li>groovy -version</li></ol>]]></content>
      
      
      <categories>
          
          <category> groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保留字指令</title>
      <link href="/posts/11266.html"/>
      <url>/posts/11266.html</url>
      
        <content type="html"><![CDATA[<h1 id="保留字指令"><a href="#保留字指令" class="headerlink" title="保留字指令"></a>保留字指令</h1><p>FROM 基于哪个镜像编写</p><p>MAINTAINER 镜像维护者的姓名和邮箱地址</p><p>RUN 容器构建时需要给运行的命令</p><p>EXPOSE 实例启动时的端口号</p><p>WORKDIR 工作目录ENV 在构建过程中使用环境变量</p><p>ADD 将宿主机目录下的文件拷贝进镜像且add命令会自动处理url和解压tar压缩包</p><p>COPY 拷贝文件目录到镜像中</p><p>VOLUME 容器数据卷，保持数据和持久化</p><p>CMD 指定容器启动时需要运行的命令</p><p> dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run 之后的参数替换</p><p>ENTRYPOINT 指定一个容器启动时的命令 entrypoint的目的和cmd一样，都是在指定容器启动程序以及参数 , entrypoint 追加组合命令</p><p>ONBUILD 触发器，当构建一个被继承的dockerfile时运行命令， 父镜像在被子继承后父镜像的onbuild 被触发</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过dockerfile构建镜像和挂载数据卷</title>
      <link href="/posts/50637.html"/>
      <url>/posts/50637.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker镜像的定义"><a href="#docker镜像的定义" class="headerlink" title="docker镜像的定义"></a>docker镜像的定义</h1><blockquote><p>轻量级可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件unionfs 联合文件系统， 右一层一层的文件系统组成, 他支持对文件系统的修改作为一次提交来一层层的叠加特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把文件系统叠加起来，这样最终的文件系统会包含所有的底层文件和目录主要包含boosfs rootfs 这种结构可以通过一个base共享资源</p></blockquote><h1 id="从容器构建一个docker-镜像"><a href="#从容器构建一个docker-镜像" class="headerlink" title="从容器构建一个docker 镜像"></a>从容器构建一个docker 镜像</h1><blockquote><p>命令： docker commit</p><p>参数： -a : 作者</p><p>​-m: 构建时添加的信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token parameter variable">-m</span>  提交副本实质成为一个新的镜像<span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">"zhangtq"</span> <span class="token parameter variable">-m</span> <span class="token string">"no doc"</span> bba8e1b9632c aiguigu/mytomcat:1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运行docker镜像生成容器"><a href="#运行docker镜像生成容器" class="headerlink" title="运行docker镜像生成容器"></a>运行docker镜像生成容器</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> 对外暴露的端口8888:8080 tomcatdocker run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 tomcat<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-P</span> tomcat 随机分配暴露端口docker <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> bba8e1b9632c /bin/bash<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">6666</span>:8080 tomcat 后台启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="docker-数据卷"><a href="#docker-数据卷" class="headerlink" title="docker 数据卷"></a>docker 数据卷</h1><blockquote><p>将docker 容器产生的数据持久化（类似移动硬盘）和数据共享</p></blockquote><p>数据卷的特点： </p><ol><li><p>数据卷可以在容器之间共享或重用数据</p></li><li><p>卷中的更改可以直接生效</p></li><li><p>数据卷中的更改不会包含在镜像的更新中</p></li><li><p>数据卷的生命周期一致持续到没有容器使用他为止</p><p>容器内添加： 1.直接命令添加 docker run -it -v &#x2F;mydatavolume:&#x2F;mydatavolumecontainer centos<br>docker run -it -v &#x2F;mydatavolume:&#x2F;mydatavolumecontainer:ro centos  只读挂载 主机可以写，容器内只读<br>查看数据是否挂载成功docker inspect centos<br>docker start 56dd279c7699\2.dockerfile 添加# volume testFROM centosVOLUME [“&#x2F;dataVolumeContainer1”, “&#x2F;dataVolumeContainere2”]CMD echo “finished, ——-success1”CMD &#x2F;bin&#x2F;bash<br>docker build -f &#x2F;mydocker&#x2F;DockerFile -t test&#x2F;centos . 创建镜像</p></li></ol><p>数据卷的添加</p><ol><li><p>容器内添加</p><p>docker run -it -v &#x2F;mydatavolume:&#x2F;mydatavolumecontainer centos<br>docker run -it -v &#x2F;mydatavolume:&#x2F;mydatavolumecontainer:ro centos  只读挂载 主机可以写，容器内只读</p><p>docker inspect centos   查看数据是否挂载成功<br>docker start 56dd279c7699\  启动容器</p></li><li><p>dockerfile中添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个dockerfile文件，名字可以随机，建议Dockerfile</span><span class="token comment"># 文件中的内容 指令（大写） 参数</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"-----end------"</span>CMD /bin/bash<span class="token comment"># 这里的每个命令，就是镜像的一层！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="docker-编写"><a href="#docker-编写" class="headerlink" title="docker 编写"></a>docker 编写</h1><pre class="line-numbers language-none"><code class="language-none">FROM centos:7.9.2009MAINTAINER 15652533044@163.com# 将宿主机当前的上下文c.txt 拷贝到容器&#x2F;usr&#x2F;local&#x2F;路径下COPY c.txt &#x2F;user&#x2F;local&#x2F;cincontainer.txt# 将java tomcat 加入到容器中ADD apache-tomcat-9.0.64.tar.gz &#x2F;usr&#x2F;local&#x2F;ADD jdk-18_linux-aarch64_bin.tar.gz &#x2F;usr&#x2F;local&#x2F;# 安装vim编辑器RUN yum -y install vim# 设置工作访问路径ENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATH# 配置java 和tomcat 的环境变量ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk-18.0.1.1ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;jdk-18.0.1.1ENV CATALINA_BASE &#x2F;usr&#x2F;local&#x2F;jdk-18.0.1.1ENV PAHT $PATH;$JAVA_HOME&#x2F;bin;$CATALINA_HOME&#x2F;lib;$CATALINA_HOME&#x2F;bin# 容器运行时监听的端口EXPOSE 8080# 运行时启动tomcat# ENTRYPOINT [&quot;&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.64&#x2F;bin&#x2F;startup.sh&quot;]# CMD [&quot;&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.64&#x2F;catalina.sh&quot;, &quot;run&quot;]CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.64&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.64&#x2F;bin&#x2F;logs&#x2F;catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LABEL <br>org.label-schema.schema-version&#x3D;”1.0” <br>org.label-schema.name&#x3D;”CentOS Base Image” <br>org.label-schema.vendor&#x3D;”CentOS” <br>org.label-schema.license&#x3D;”GPLv2” <br>org.label-schema.build-date&#x3D;”20201113” <br>org.opencontainers.image.title&#x3D;”CentOS Base Image” <br>org.opencontainers.image.vendor&#x3D;”CentOS” <br>org.opencontainers.image.licenses&#x3D;”GPL-2.0-only” <br>org.opencontainers.image.created&#x3D;”2020-11-13 00:00:00+00:00”</p><p>CMD [“&#x2F;bin&#x2F;bash”]</p><p>1docker 从基础镜像运行一个容器2执行一天指令并对容器做出修改3.执行类似docker commit 的操作提交一个新的镜像层4.docker基于刚提交的镜像运行一个新的容器5执行dockerfile中的下一条指令直到所有的指令都执行完成<br>dokcer保留字指令FROM 基于哪个镜像编写MAINTAINER 镜像维护者的姓名和邮箱地址RUN 容器构建时需要给运行的命令EXPOSE 实例启动时的端口号WORKDIR 工作目录ENV 在构建过程中使用环境变量ADD 将宿主机目录下的文件拷贝进镜像且add命令会自动处理url和解压tar压缩包COPY 拷贝文件目录到镜像中VOLUME 容器数据卷，保持数据和持久化CMD 指定容器启动时需要运行的命令 dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run 之后的参数替换ENTRYPOINT 指定一个容器启动时的命令 entrypoint的目的和cmd一样，都是在指定容器启动程序以及参数 , entrypoint 追加组合命令ONBUILD 触发器，当构建一个被继承的dockerfile时运行命令， 父镜像在被子继承后父镜像的onbuild 被触发<br>自定义centos的dockersfileFROM centosENV mypath &#x2F;tmpWORKDIR $mypathRUN yum -y install vimRUN yun -y install net-toolsEXPOSE 80CMD &#x2F;bin&#x2F;bash</p><p>docker build<br>docker run</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/posts/54150.html"/>
      <url>/posts/54150.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote><p>数据结构的定义： 数据在计算机中的存储方式， 比如列表，数组，元组，字符串等，程序&#x3D; 数据结构+算法</p></blockquote><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ol><li><p>定义： 只在一段进行插入和删除操作的列表</p></li><li><p>特点：后进先出</p></li><li><p>栈的概念： 栈底、栈顶</p></li><li><p>栈的操作：</p><p>进栈：append</p><p>出栈：pop</p><p>取栈顶：gettop</p></li><li><p>实现栈</p><ol><li><p>python</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">gettop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>go</p><pre class="line-numbers language-none"><code class="language-none">后续补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>用栈实现数据的逆置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将["aaaa", "bbbbb", "ccccc"] 逆置</span><span class="token keyword">def</span> <span class="token function">resverse</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># stack 为上面代码实现的栈</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>    s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    output<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用栈实现括号和html的标记</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>title<span class="token punctuation">:</span> gallerydate<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">"gallery"</span>layout<span class="token punctuation">:</span> <span class="token string">"gallery"</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment"># 括号匹配</span><span class="token comment"># 假定给定的字符串中包含以下几种括号，(), [], [], 每个括号必须与其相对应的结束符号匹配</span><span class="token keyword">def</span> <span class="token function">is_matched</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">:</span>    left <span class="token operator">=</span> <span class="token string">"([&#123;"</span>    right <span class="token operator">=</span> <span class="token string">")]&#125;"</span>    s <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> expr<span class="token punctuation">:</span>        <span class="token keyword">if</span> c <span class="token keyword">in</span> left<span class="token punctuation">:</span>            s<span class="token punctuation">.</span>push<span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">elif</span> c <span class="token keyword">in</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> right<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> left<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># html标记</span><span class="token keyword">def</span> <span class="token function">is_mathced_html</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># TODO 后续补充</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列的定义："><a href="#队列的定义：" class="headerlink" title="队列的定义："></a>队列的定义：</h3><ul><li>队列是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除</li><li>插入的一端称为队尾，插入叫做入队</li><li>删除的一端叫做对头，删除动作叫做出队</li><li>队列性质：先进先出（参考排队买东西，先到的先买）</li><li>双向队列：队列两端都允许进行进队和出队操作</li></ul><h3 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h3><p><strong>单个数组可可以实现，但是效率低下。循环使用数组来实现队列</strong></p><blockquote><p>为了开发一种健壮的队列实现方法，我们让队列的前端趋向于右端，并且让队列内的元素在底层数组的尾部“循环”，假定底层数组的长度固顶为固定值N，他比实际队列中元素的数量大。新的元素在当前队列的尾部利用入队列操作进入队列，逐步将元素从队列的前端进面插入索引为N-1的位置，接着是0的位置，接下来是索引为1的位置。循环插入</p></blockquote><blockquote><p>实现这种循环的方法并不困难，当从队列中删除一个元素并欲更新前面的索引时，我怕可以使用算式f&#x3D;(f+1)%N进行计算。</p></blockquote><p><strong>取模操作时处理一个循环数组的理想操作</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span>Queue<span class="token punctuation">.</span>DEFAULT_CAPACITY        self<span class="token punctuation">.</span>_size <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>_front <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_size    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_size <span class="token operator">==</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Empty<span class="token punctuation">(</span><span class="token string">"QUEUE IS EMPTY"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_front<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        1. 判断是否为空        2. 取出对头的元素        3. 维护首位的下标        4. 数量-1        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Empty<span class="token punctuation">(</span><span class="token string">"queue is empty"</span><span class="token punctuation">)</span>        answer <span class="token operator">=</span> self<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_front<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_front<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>_front <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_data<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_size <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> answer    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        1. 判断是否满了, 如果满了要进行扩容        2.判断队尾的位置， 将元素加入队尾        3. size +1        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_size <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_resize<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">)</span>        end_index <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_front <span class="token operator">+</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_data<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>end_index<span class="token punctuation">]</span> <span class="token operator">=</span> item        self<span class="token punctuation">.</span>_size <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_size <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">:</span>            self_resize<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>python 中使用队列</p><pre class="line-numbers language-none"><code class="language-none">from queue import Queueq &#x3D; Queue()q.put()q.get()q.queue   # 输出队列中的所有元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>队列主要用在多个进程叫数据共享，实现业务解耦，提高效率</strong></p><p><strong>生产这将数据放进队列， 消费者从队列中获取数据</strong></p><p><strong>队列与列表的区别是，列表中的数据虽然也是排列的，但是列表中的数据被取走后还会保留，而队列中的数据取走后将不会被保留</strong></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="python-模拟设计链表"><a href="#python-模拟设计链表" class="headerlink" title="python 模拟设计链表"></a>python 模拟设计链表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""单个node对象"""</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>_element <span class="token operator">=</span> elementself<span class="token punctuation">.</span>_next <span class="token operator">=</span> <span class="token builtin">next</span>l <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Node<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Node<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Node<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="python-用链表实现栈"><a href="#python-用链表实现栈" class="headerlink" title="python 用链表实现栈"></a>python 用链表实现栈</h4><pre class="line-numbers language-none"><code class="language-none"># 待补充<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="单项列表的反转"><a href="#单项列表的反转" class="headerlink" title="单项列表的反转"></a>单项列表的反转</h4><pre class="line-numbers language-none"><code class="language-none"># Node 为上面实现的类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><ul><li>1.所谓数组，就是<code>相同数据类型的元素按一定顺序排列的集合</code></li><li>2.<code>在Java等其他语言中</code>并不是所有的数据都能存储到数组中，<code>只有相同类型的数据才可以一起存储到数组中</code>。</li><li>3.因为数组在<code>存储数据时是按顺序存储的</code>，<code>存储数据的内存也是连续的</code>，所以他的特点就是寻址读取数据比较容易，插入和删除比较困难。</li></ul><h2 id="python-中list与数组的比较"><a href="#python-中list与数组的比较" class="headerlink" title="python 中list与数组的比较"></a>python 中list与数组的比较</h2><ul><li>python中的list是python的内置数据类型，<code>list中的数据类不必相同的，而数组（array）的中的类型必须全部相同</code>。</li><li>2.在list中的数据类型保存的是数据的<code>存放的地址，简单的说就是指针，并非数据</code></li><li>3.否则这样保存一个list就太麻烦了，例如list1&#x3D;[1,2,3,’a’]需要4个指针和四个数据，增加了存储和消耗cpu。</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1667132410189.png" alt="1667132410189"></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul><li><code>注：</code>字典类型是Python中最常用的数据类型之一，它是一个键值对的集合，字典通过键来索引，关联到相对的值，理论上它的查询复杂度是 O(1)</li></ul><h2 id="哈希表-hash-tables"><a href="#哈希表-hash-tables" class="headerlink" title="哈希表 (hash tables)"></a>哈希表 (hash tables)</h2><ul><li>哈希表（也叫散列表），根据键值对(Key-value)而直接进行访问的数据结构。</li><li>它通过把key和value映射到表中一个位置来访问记录，这种查询速度非常快，更新也快。</li><li>而这个映射函数叫做哈希函数，存放值的数组叫做哈希表。</li><li>通过把每个对象的关键字k作为自变量，通过一个哈希函数h(k)，将k映射到下标h(k)处，并将此对象存储在这个位置。</li></ul><h2 id="具体操作过程"><a href="#具体操作过程" class="headerlink" title="具体操作过程"></a>具体操作过程</h2><ul><li>1.数据添加：<ul><li>把key通过哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余</li><li>取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。</li></ul></li><li>2.数据查询：再次使用哈希函数将key转换为对应的数组下标，并定位到数组的位置获取value。</li></ul><h2 id="解决hash冲突"><a href="#解决hash冲突" class="headerlink" title="解决hash冲突"></a>解决hash冲突</h2><ul><li>链地址法</li><li>再哈希法</li><li>建立公共溢出区</li><li>开放定址法</li></ul><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的特性"><a href="#树的特性" class="headerlink" title="树的特性"></a>树的特性</h2><ul><li>一棵树中的任意两个结点有且仅有唯一的一条路径连通；</li><li>一棵树如果有n个结点，则它一定有n−1条边；</li><li>在一棵树中加一条边将会构成一个回路。</li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>二叉树是一种特殊的树，二叉树的特点是每个结点最多有两个儿子。</li><li>二叉树使用范围最广，一颗多叉树也可以转化为二叉树</li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><ul><li>二叉树中每个内部节点都有两个儿子，满二叉树所有的叶节点都有相同的深度。</li><li>满二叉树是一棵深度为h且有2h−1个结点的二叉树。</li></ul><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><ul><li>若设二叉树的高度为h，除了第h层外，其他层的结点数都达到最大个数，第h层从右向左连续 缺若干个结点，则为完全二叉树。</li></ul><h3 id="树的特点"><a href="#树的特点" class="headerlink" title="树的特点"></a>树的特点</h3><ul><li>如果一棵完全二叉树的父节点编号为K,则其左儿子的编号是2K,右儿子的结点编号为2K+1</li><li>已知完全二叉树的总节点数为n求叶子节点个数：<ul><li>当n为奇数时：（n+1）&#x2F;2</li><li>当n为偶数时 : （n）&#x2F;2</li></ul></li><li>已知完全二叉树的总节点数为n求父节点个数：为：n&#x2F;2</li><li>已知完全二叉树的总节点数为n求叶子节点为2的父节点个数：<ul><li>当n为奇数时：n&#x2F;2</li><li>当n为偶数时 : n&#x2F;2-1</li></ul></li><li>如果一棵完全二叉树有N个结点，那么这棵二叉树的深度为【log2（N+1）log2（N+1）】（向上取整）</li></ul><h3 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h3><ul><li>前序遍历（先根，再左，最后右）</li><li>中序遍历（先左，再根，最后右）</li><li>后序遍历（先左，再右，最后根）</li><li>层次遍历（说不清）</li></ul><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1667192671048.png" alt="1667192671048"></p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1667192784746.png" alt="1667192784746"></p><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1667192846514.png" alt="1667192846514"></p><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><ul><li>按照层级遍历的方法</li></ul><h4 id="前中后、广度优先遍历"><a href="#前中后、广度优先遍历" class="headerlink" title="前中后、广度优先遍历"></a>前中后、广度优先遍历</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    定义根节点    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> lchild<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> rchild<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>elem <span class="token operator">=</span> elem        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> lchild        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> rchild<span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">:</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>elem<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root <span class="token operator">=</span> node            <span class="token keyword">return</span>        <span class="token comment"># 如果根节点不为None， 判断左右节点</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>lchild <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                cur_node<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node                <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>rchild <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                cur_node<span class="token punctuation">.</span>rchild <span class="token operator">=</span> node                <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bread_order</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>        ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>lchild <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>rchild <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">def</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> ret<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ret        <span class="token comment">#cur_node = queue.pop()</span>        ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">def</span> <span class="token function">mid_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> ret<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ret        self<span class="token punctuation">.</span>mid_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mid_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">def</span> <span class="token function">after_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> ret<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ret        self<span class="token punctuation">.</span>after_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>after_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    b_tree <span class="token operator">=</span> BinaryTree<span class="token punctuation">(</span><span class="token punctuation">)</span>    b_tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>    b_tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>    b_tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token comment">#print(b_tree.bread_order())</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b_tree<span class="token punctuation">.</span>pre_order<span class="token punctuation">(</span>b_tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b_tree<span class="token punctuation">.</span>mid_order<span class="token punctuation">(</span>b_tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b_tree<span class="token punctuation">.</span>after_order<span class="token punctuation">(</span>b_tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="B-x2F-Tree"><a href="#B-x2F-Tree" class="headerlink" title="B+&#x2F;-Tree"></a>B+&#x2F;-Tree</h1><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h2><ul><li>每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。</li><li>两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。</li><li>以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</li></ul><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1667223682276.png" alt="1667223682276"></p><pre class="line-numbers language-none"><code class="language-none">&#39;&#39;&#39;模拟查找关键字29的过程：&#39;&#39;&#39;# 根据根节点找到磁盘块1，读入内存。【磁盘I&#x2F;O操作第1次】# 比较关键字29在区间（17,35），找到磁盘块1的指针P2。# 根据P2指针找到磁盘块3，读入内存。【磁盘I&#x2F;O操作第2次】# 比较关键字29在区间（26,30），找到磁盘块3的指针P2。# 根据P2指针找到磁盘块8，读入内存。【磁盘I&#x2F;O操作第3次】# 在磁盘块8中的关键字列表中找到关键字29。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h2><ul><li>B+Tree是在B-Tree基础上的一种优化<code>，使其更适合实现外存储索引结构，</code>InnoDB存储引擎就是用B+Tree实现其索引结构&#96;。</li><li>B-Tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值</li><li>而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小</li><li>当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I&#x2F;O次数，进而影响查询效率。</li><li>在B+Tree中，所有根节点只存储 键和指针，只有叶子节点才存放数据&#96;</li></ul><h2 id="mysql索引的底层实现"><a href="#mysql索引的底层实现" class="headerlink" title="mysql索引的底层实现"></a>mysql索引的底层实现</h2><ul><li>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节</li><li>也就是说一个页（B+Tree中的一个节点）中大概存储16KB&#x2F;(8B+8B)&#x3D;1K个键值（这里的K取值为〖10〗^3）。</li><li>也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 &#x3D; 10亿 条记录。</li><li>说明：<ul><li>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2~4层。</li><li>mysql的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I&#x2F;O操作。</li></ul></li></ul><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>                    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>                <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h2><blockquote><p>前三中是很low的排序算法</p></blockquote><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    总结：    对于一个有i个数字的序列，完成排序需要i-1轮， 如果每轮记为i， 第j轮需要i-j次，需要两层循环，内循环几轮比较次数，外循环控制比较轮数    """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        is_exchang <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                is_exchange <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> is_exchange<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> li<span class="token comment"># 时间复杂度o(n*2)</span><span class="token comment"># 空间复杂度o(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    总结：每一次从未序列中寻找最小元素，放在已排序序列的起始位置， 然后在未排序序列中寻找最小元素放在已排序序列的尾端        """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> li<span class="token comment"># 时间复杂度o(n*2)</span><span class="token comment"># 空间复杂度o(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""每次取未排序序列的元素，在已排序序列中寻找合适位置插入"""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> li<span class="token comment"># 时间复杂度o(n*2)</span><span class="token comment"># 空间复杂度o(1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token comment"># mid返回的是上一个用来排序那个数的下标</span>        quick_sort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token comment"># 每执行一次partition函数都可以实现将某个数左边都比这个数小 右边都比这个数大</span><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">:</span>     <span class="token comment"># 从右向左找小于tmp的数放到左边空位置</span>            right <span class="token operator">-=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                       <span class="token comment"># 将右边小于tmp值得数放到左边空位置</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">:</span>      <span class="token comment"># 从左向右找到大于tmp的值放到右边空位置</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                       <span class="token comment"># 将右边大于tmp值得数放到右边空位置</span>    data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    <span class="token keyword">return</span> left<span class="token comment"># 时间复杂度0(nlogn)</span><span class="token comment"># 空间复杂度o(1)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""对两个有序的列表进行合并"""</span>    ll <span class="token operator">=</span> rr <span class="token operator">=</span> <span class="token number">0</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> ll <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> rr <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left<span class="token punctuation">[</span>ll<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right<span class="token punctuation">[</span>rr<span class="token punctuation">]</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>ll<span class="token punctuation">]</span><span class="token punctuation">)</span>            ll <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>rr<span class="token punctuation">]</span><span class="token punctuation">)</span>            rr <span class="token operator">+=</span> <span class="token number">1</span>    result <span class="token operator">+=</span> left<span class="token punctuation">[</span>ll<span class="token punctuation">:</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> right<span class="token punctuation">[</span>rr<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    middle <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    <span class="token comment"># 从中间划分</span>    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 将左侧列表进行排序</span>    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span>middle<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 将右侧列表进行排序</span>    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token comment"># 归并</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程线程协程</title>
      <link href="/posts/63298.html"/>
      <url>/posts/63298.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h3 id="1-1-什么是进程？"><a href="#1-1-什么是进程？" class="headerlink" title="1.1 什么是进程？"></a>1.1 什么是进程？</h3><ul><li><p><code>1.进程是资源分配的最小单位（ 内存、cpu、网络、io）</code></p></li><li><pre><code>2.一个运行起来的程序就是一个进程<pre class="line-numbers language-none"><code class="language-none">- 什么是程序（<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  程序是我们存储在硬盘里的代码  <pre class="line-numbers language-none"><code class="language-none">    ）    - 硬盘（256G）、内存条（8G）    - 当我们双击图标，打开程序的时候，实际上就是通过I&#x2F;O操作（读写），硬盘中的代码读取到内存条里  - 内存条就是我们所指的资源（程序分配了内存资源，就变成了进程）  - CPU分时    - CPU比你的手速快多了，分时处理每个线程，但是由于太快然你觉得每个线程都是独占cpu    - cpu是计算，只有时间片到了，获取cpu，线程真正执行    - 当你想使用 网络、磁盘等资源的时候，需要cpu的调度- &#96;3.进程具有独立的内存空间，所以不能直接相互&#96;### 1.2 进程如何通信- 同一程序下进程通信  - 消息队列(父子进程通信)  - pipe（同一程序下两个进程通信）  - managers（同一程序下多个进程通信）  - 共享内存  - 套接字（不同主机进程之间的通信）- Java项目和python项目如何通信  - RabbitMQ、redis等（不同程序间通信）### 1.3 为什么需要进程池？- 一次性开启指定数量的进程- 如果有十个进程，有一百个任务，一次可以处理多少个（一次性只能处理十个）- 防止进程开启数量过多导致服务器压力过大- 进程池中有两个方法：  - &#96;1）apply&#96;： 多个进程异步执行，一个一个的执行  - &#96;2）apply_async&#96;： 多个进程同步执行，同时执行多个进程&#96;&#96;&#96;pythonfrom  multiprocessing import Process,Poolimport time,osdef foo(i):    time.sleep(2)    print(&quot;in the process&quot;,os.getpid()) #打印子进程的pid    return i+100def call(arg):    print(&#39;--&gt;exec done:&#39;,arg,os.getpid())if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    pool &#x3D; Pool(3)                      #进程池最多允许5个进程放入进程池    print(&quot;主进程pid：&quot;,os.getpid())     #打印父进程的pid    for i in range(10):        #用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数        pool.apply_async(func&#x3D;foo, args&#x3D;(i,),callback&#x3D;call)        #用法2 串行 启动进程不在用Process而是直接用pool.apply()        # pool.apply(func&#x3D;foo, args&#x3D;(i,))    print(&#39;end&#39;)    pool.close()    #关闭pool    pool.join()     #进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><h3 id="1-4-僵尸进程、孤儿进程、守护进程"><a href="#1-4-僵尸进程、孤儿进程、守护进程" class="headerlink" title="1.4 僵尸进程、孤儿进程、守护进程"></a>1.4 僵尸进程、孤儿进程、守护进程</h3><ul><li><pre><code>1）僵尸进程定义<pre class="line-numbers language-none"><code class="language-none">  - 僵尸进程产生的原因就是&#96;父进程产生子进程后，子进程先于父进程退出, 而父进程没有回收子进程的资源&#96;  - 一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息  - 那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。- 简而言之，子进程退出后，父进程没有回收子进程的资源就退出  - &#96;&#96;&#96;  2）孤儿进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>- 父进程异常结束了，然后子进程被1号进程init收养</code></pre></li><li><pre><code>3）守护进程<pre class="line-numbers language-none"><code class="language-none">  - 是创建守护进程时有意把父进程结束，然后被1号进程init收养- &#96;4）用python写一个僵尸进程&#96;&#96;&#96;&#96;python#!&#x2F;usr&#x2F;bin&#x2F;env python#coding&#x3D;utf8 import os, sys, time#产生子进程pid &#x3D; os.fork() if pid &#x3D;&#x3D; 0:    #子进程退出    sys.exit(0)#父进程休息30秒time.sleep(30)# 先产生一个子进程，子进程退出，父进程休息30秒,那就会产生一个僵尸进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>ps -ef| grep defunct&#96; 在linux下查看僵尸进程</p><ul><li><pre><code class="sh">[root@linux-node4 ~]# ps -ef| grep defunctroot     110401  96083  0 19:11 pts/2    00:00:00 python defunct.pyroot     110402 110401  0 19:11 pts/2    00:00:00 [python] &lt;defunct&gt;root     110406  96105  0 19:11 pts/3    00:00:00 grep --color=auto defunct<pre class="line-numbers language-none"><code class="language-none">### 1.5 Python中使用过的进程模块？#### 1.5.1 multiprocessing- &#96;multiprocessing&#96;是一个使用类似于线程模块的API支持产生进程的包。- 多处理包提供本地和远程并发，通过使用子进程而不是线程有效地侧向执行全局解释器锁。- 因此，多处理模块允许程序员充分利用给定机器上的多个处理器。 它可以在Unix和Windows上运行。- &#96;进程池抓取页面&#96;&#96;&#96;&#96;python# -*- coding: utf-8 -*-import requestsfrom multiprocessing import Pooldef fetch_request(url):    result &#x3D; requests.get(url)    print(result.text)def call(arg):    print(&#39;--&gt;exec done:&#39;,&quot;测试进程池执行后回调功能&quot;)url_list &#x3D; [    &#39;https:&#x2F;&#x2F;www.baidu.com&#39;,    &#39;https:&#x2F;&#x2F;www.google.com&#x2F;&#39;,         #google页面会卡住，知道页面超时后这个进程才结束    &#39;http:&#x2F;&#x2F;dig.chouti.com&#x2F;&#39;,          #chouti页面内容会直接返回，不会等待Google页面的返回]if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    pool &#x3D; Pool(10)        # 创建线程池    for url in url_list:        #用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数        pool.apply_async(func&#x3D;fetch_request, args&#x3D;(url,),callback&#x3D;call)    print(&#39;end&#39;)    pool.close()    #关闭pool    pool.join()     #进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul><h4 id="1-5-2-concurrent-futures"><a href="#1-5-2-concurrent-futures" class="headerlink" title="1.5.2 concurrent.futures"></a>1.5.2 concurrent.futures</h4><ul><li><code>1、简介</code> <a href="https://docs.python.org/3/library/concurrent.futures.html">参考官网(opens new window)</a><ul><li>1、Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程&#x2F;多进程代码</li><li>2、但是当项目达到一定的规模，频繁创建&#x2F;销毁进程或者线程是非常消耗资源的，这个时候我们就要编写自己的线程池&#x2F;进程池，以空间换时间。</li><li>3、但从Python3.2开始，标准库为我们提供了concurrent.futures模块，它提供了ThreadPoolExecutor和ProcessPoolExecutor两个类，</li><li>4、实现了对threading和multiprocessing的进一步抽象，对编写线程池&#x2F;进程池提供了直接的支持。</li></ul></li><li><code>2、Executor和Future</code><ul><li><code>1. Executor</code></li><li>concurrent.futures模块的基础是Exectuor，Executor是一个抽象类，它不能被直接使用。</li><li>但是它提供的两个子类ThreadPoolExecutor和ProcessPoolExecutor却是非常有用</li><li>我们可以将相应的tasks直接放入线程池&#x2F;进程池，不需要维护Queue来操心死锁的问题，线程池&#x2F;进程池会自动帮我们调度。</li><li><code>2. Future</code></li><li>Future你可以把它理解为一个在未来完成的操作，这是异步编程的基础，</li><li>传统编程模式下比如我们操作queue.get的时候，在等待返回结果之前会产生阻塞，cpu不能让出来做其他事情</li><li>而Future的引入帮助我们在等待的这段时间可以完成其他的操作。</li></ul></li><li>3、concurrent.futures.ProcessPoolExecutor 抓取网页</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 创建线程池</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fetch_request<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment"># 去线程池中获取一个进程，进程去执行fetch_request方法</span>    pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span>wait <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># shutdown相当于一个开关，它会读取程序中所设定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="2-1-什么是线程"><a href="#2-1-什么是线程" class="headerlink" title="2.1 什么是线程"></a>2.1 什么是线程</h2><ul><li><p>线程是操作系统调度的最小单位</p></li><li><p>线程是进程真正的执行者， 是一些指令的合集（是进程资源的拥有者）</p></li><li><p>同一进程下的多个线程共享内存空间， 数据可以直接访问（数据共享）</p></li><li><p>为了保证线程安全，会使用<strong>线程锁</strong></p></li><li><pre><code class="python">import threadingimport timedef sayhi(num): #定义每个线程要运行的函数    print(&quot;running on number:%s&quot; %num)    time.sleep(3)for i in range(50):    t = threading.Thread(target=sayhi,args=(&#39;t-%s&#39;%i,))    t.start()<pre class="line-numbers language-none"><code class="language-none">## 2.2 GiL锁和线程锁-  Gil全局解释器锁  - 保证同一时间只有一个线程在运行  - 防止多个线程都修改数据  - 实质    - 每个线程在执行的时候都需要先获取Gil, 保证同一时刻只有一个线程执行可以执行代码    - 即同一时刻只有一个线程使用cpu- 线程锁（互斥锁）  - GIL 锁只能保证同一时刻只有一个线程对某个资源操作，但是由于设计之初考虑到死锁的问题，会有一个chek-interval 机制，会在一段时候后自动释放锁，所以会导致可能上一个线程还为执行完毕就释放锁  - 线程锁的本质是将线程中的数据加了一把互斥锁    - 加了线程锁之后，其他线程无法访问该数据，包括读  - 有了GIL全局解释器锁，为什么还需要线程锁    - Gil是限制同一时间只有一个线程进入python 解释器的    - 由于cpu是分时轮询调度的，导致多线程有可能会造成数据的安全问题    - 还有一个原因是GIL自带的check_interval机制，会强制释放锁，也可能会导致数据安全问题- 为什么python 中需要全局解释器锁  - cpython的实现中，Gil是为了解决有引用计数问题带来的资源竞争漏洞问题的  - cpython中的引用计数是全局，局部变量和对象字段等都参与到了引用计数中  - 当一个线程运行时，会先去获得Gil解释器锁，保证引用计数时全局更新的  - 如果没有Gil，  当两个线程同时对一个对象进行引用时，引用计数只会提高1，而不是2## 2.3 join- 实现所有线程都结束之后，在执行主线程- &#96;&#96;&#96;python  import threading  import time  start_time &#x3D; time.time()    def sayhi(num): #定义每个线程要运行的函数      print(&quot;running on number:%s&quot; %num)      time.sleep(30)    t_objs &#x3D; []    #将进程实例对象存储在这个列表中  for i in range(50):      t &#x3D; threading.Thread(target&#x3D;sayhi,args&#x3D;(&#39;t-%s&#39;%i,))      t.start()          #启动一个线程，程序不会阻塞      t_objs.append(t)  print(threading.active_count())    #打印当前活跃进程数量  for t in t_objs: #利用for循环等待上面50个进程全部结束      t.join()     #阻塞某个程序  print(threading.current_thread())    #打印执行这个命令进程    print(&quot;----------------all threads has finished.....&quot;)  print(threading.active_count())  print(&#39;cost time:&#39;,time.time() - start_time)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><h2 id="2-4-setDaemon"><a href="#2-4-setDaemon" class="headerlink" title="2.4 setDaemon"></a>2.4 setDaemon</h2><ul><li>守护线程，主线程退出时，需要子线程随主线程同时退出</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sayhi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义每个线程要运行的函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running on number:%s"</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sayhi<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'t-%s'</span><span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#把当前线程变成守护线程，必须在t.start()前设置</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">#启动一个线程，程序不会阻塞</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cost time:'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-python中使用过哪些线程模块"><a href="#2-5-python中使用过哪些线程模块" class="headerlink" title="2.5 python中使用过哪些线程模块"></a>2.5 python中使用过哪些线程模块</h2><ul><li><p>Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。</p></li><li><p>thread和threading模块允许程序员创建和管理线程。</p></li><li><pre><code class="python">import threadingimport timedef sayhi(num): #定义每个线程要运行的函数    print(&quot;running on number:%s&quot; %num)    time.sleep(3)    for i in range(50):    t = threading.Thread(target=sayhi,args=(&#39;t-%s&#39;%i,))    t.start()<pre class="line-numbers language-none"><code class="language-none">- ## 2.6 死锁- 两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象- 若无外力作用，它们都将无法推进下去。2.7 信号量（Semaphore）- 1.互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据- 2.比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去- 3.作用就是同一时刻允许运行的线程数量&#96;&#96;&#96;pythonimport threading,timedef run(n):    semaphore.acquire()    time.sleep(1)    print(&quot;run the thread: %s\n&quot; %n)    semaphore.release()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    semaphore &#x3D; threading.BoundedSemaphore(5)  #最多允许5个线程同时运行    for i in range(22):        t &#x3D; threading.Thread(target&#x3D;run,args&#x3D;(i,))        t.start()while threading.active_count() !&#x3D; 1:    pass  # print threading.active_count()else:    print(&#39;----all threads done---&#39;)# 代码结果说明：这里可以清晰看到运行时0-4是同时运行的没有顺序，而且是前五个，# 表示再semaphore这个信号量的定义下程序同时仅能执行5个线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="3-1-什么时协程"><a href="#3-1-什么时协程" class="headerlink" title="3.1 什么时协程"></a>3.1 什么时协程</h2><ul><li>协程时微线程，本质时一个单线程</li><li>协程能在单线程处理高并发，因为遇到io会自动切换<ul><li>线程遇到io会等待，阻塞，协程遇到io会自动切换</li><li>线程的状态保存在cpu的寄存器和栈里，而协程拥有自己的空间，无序上下问切换，所以快</li></ul></li><li>为什么协程遇到io可以自动切换<ul><li>greenlet是C语言写的一个模块，遇到IO手动切换</li><li>协程有一个gevent模块（分装了greelet模块），遇到io能自动切换</li><li>协程拥有自己的空间，所以无需上下文切换的开销</li></ul></li></ul><h2 id="3-2-协程的优缺点"><a href="#3-2-协程的优缺点" class="headerlink" title="3.2 协程的优缺点"></a>3.2 协程的优缺点</h2><ul><li>缺点<ul><li>无法利用多核的资源：协程本质就是一个单线程，他不能同时将单个cpu的多核利用起来，协程需要和进程配合，才能利用多核 cpu</li><li>协程如果阻塞，整个程序都会阻塞</li></ul></li><li>优点<ul><li>不仅能处理高并发（单线程下的高并发）</li><li>而且特别节省资源（本质是一个单线程，当然节省资源）</li></ul></li><li>协程遇到io自动切换，那谁来干活<ul><li>简单说法<ul><li>协程遇到I&#x2F;O后自动切换，但是会保持一个socket连接，交给系统内核去处理工作</li><li>epoll()就工作内核中，他维护了一个链表，来存放所有的socket连接</li><li>当内核处理完成后就会回调一个函数，以socket文件描述符为key，结果为value存放到字典中</li><li>此时这个列表还是在内核中，需要将这个字典拷贝到用户空间（用户进程中）</li></ul></li><li>本质<ul><li>1.<code>epoll()中内核则维护一个链表</code>，epoll_wait直接检查链表是不是空就知道是否有文件描述符准备好了。</li><li>2.在内核实现中epoll是根据每个sockfd上面的与设备驱动程序建立起来的回调函数实现的。</li><li>3.某个sockfd上的事件发生时，与它对应的回调函数就会被调用，来把这个sockfd加入链表，其他处于“空闲的”状态的则不会。</li><li>4.epoll上面链表中获取文件描述，这里使用内存映射（mmap）技术，避免了复制大量文件描述符带来的开销</li><li>内存映射（mmap）：内存映射文件，是由一个文件到一块内存的映射，将不必再对文件执行I&#x2F;O操作</li></ul></li></ul></li></ul><h2 id="3-4-Python中协程的模块"><a href="#3-4-Python中协程的模块" class="headerlink" title="3.4 Python中协程的模块"></a>3.4 Python中协程的模块</h2><ul><li>greenlet：遇到I&#x2F;O<code>手动切换</code>，是一个C模块</li><li>gevent：对greenlet封装，遇到I&#x2F;O<code>自动切换</code>（<code>借助C语言库greenlet</code>）</li><li>asyncio：和gevent一样，也是实现协程的一个模块（<code>python自己实现</code>）</li></ul><h2 id="进程池、线程池、协程池对比"><a href="#进程池、线程池、协程池对比" class="headerlink" title="进程池、线程池、协程池对比"></a>进程池、线程池、协程池对比</h2><ul><li>进程池：浪费资源</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-->exec done:'</span><span class="token punctuation">,</span><span class="token string">"测试进程池执行后回调功能"</span><span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 创建线程池</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        <span class="token comment"># 用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>func<span class="token operator">=</span>fetch_request<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>call<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#关闭pool</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>线程池<ul><li>创建一个新线程将消耗大量的计算资源，并且在阻塞过程中无法执行其他任务。 </li><li>比如线程池中10个线程同时去10个url获取数据，当数据还没来时这些线程全部都在等待，不做事。</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span>pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment"># 创建一个线程池，最多开10个线程</span><span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fetch_request<span class="token punctuation">,</span>url<span class="token punctuation">)</span>       <span class="token comment"># 去线程池中获取一个线程，线程去执行fetch_request方法</span>pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>                      <span class="token comment"># 主线程自己关闭，让子线程自己拿任务执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>协程<ul><li>特点： gevent只用起一个线程，当请求发出去后gevent就不管,永远就只有一个线程工作，谁先回来先处理</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkeymonkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 注意，这个导包顺序不要变</span><span class="token keyword">import</span> requests<span class="token comment"># 这些请求谁先回来就先处理谁</span><span class="token keyword">def</span> <span class="token function">fetch_async</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> req_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span>method<span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> <span class="token operator">**</span>req_kwargs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment"># ##### 发送请求 #####</span>gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span><span class="token punctuation">[</span>    gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>fetch_async<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span> req_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>fetch_async<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span> req_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>fetch_async<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> req_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的元类</title>
      <link href="/posts/25874.html"/>
      <url>/posts/25874.html</url>
      
        <content type="html"><![CDATA[<h3 id="元类的定义"><a href="#元类的定义" class="headerlink" title="元类的定义"></a>元类的定义</h3><p> <a href="https://www.bilibili.com/video/BV1uA411V7dW?p=4">案例：元类实现单例模式_哔哩哔哩_bilibili</a> </p><ol><li><p>在python中，一切皆是对象，类本身也是对象，当使用关键字class时，解释器会在内存中创建一个对象（这个对象是指类本身，而不是类的实例）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>  <span class="token comment"># 这句解释器执行了type("Student", (), &#123;&#125;)</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>元类是类的类，是类的模板， 是用来控制如何创建类的，元类的实例对象为类，正如类的实例为对象</p></li><li><p>type是python内建的一个元类，用来直接控制类的生成，python中任何直接定义的类，都是type类实例化的对象</p></li></ol><h3 id="创建类的两种方法"><a href="#创建类的两种方法" class="headerlink" title="创建类的两种方法"></a>创建类的两种方法</h3><p>·&#96;&#96;&#96;</p><pre class="line-numbers language-none"><code class="language-none">class Student:passStudent &#x3D; type(&#39;Student&#39;, (), &#123;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="自定义一个元类"><a href="#自定义一个元类" class="headerlink" title="自定义一个元类"></a>自定义一个元类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Mytype</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行构造类方法"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行元类的第一个参数&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行元类的第一个参数&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行元类的第二个参数&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行元类的第三个参数&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行元类的__call__方法"</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> obj<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>Mytype<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">### 这句相当于执行 Student = Mytype(Student, "Student", (), &#123;&#125;)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> names <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈django</title>
      <link href="/posts/35098.html"/>
      <url>/posts/35098.html</url>
      
        <content type="html"><![CDATA[<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>django是一个有python编写的web应用框架，使用django可以很轻易的完成一个网站的大部分内容，在这个基础上可以进一步开发出全功能的web服务。django本身基于mvc模式（model, view, controller）的设计模式，使后续对程序的修改变得简单易行。</p><p>mvc的优势：</p><p>低耦合</p><p>开发快捷</p><p>部署方便</p><p>可重用性高</p><p>维护成本低</p><p>特点：</p><p>强大的数据库功能</p><p>自带强大的后台</p><h3 id="MTV和mvc模式"><a href="#MTV和mvc模式" class="headerlink" title="MTV和mvc模式"></a>MTV和mvc模式</h3><p>MTV模式是指：</p><p>m: 模型，负责数据库的映射（orm）</p><p>v: 视图， 图形界面，负责与用户的交互(页面) </p><p>c: 控制器， 负责转发请求</p><p>MTV模式是指：</p><p>m: 模型， 负责业务对象和数据库的映射</p><p>t: 模板，将数据通过html的形式展示给用户</p><p>v: 视图，负责处理业务逻辑，在适当的时候调用view 和model</p><p>除此之外，mtv模式还需要一个url分发器来分发请求，将不同的url分发给不同的url进行处理</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是python</title>
      <link href="/posts/12856.html"/>
      <url>/posts/12856.html</url>
      
        <content type="html"><![CDATA[<p>python 是一门动态语言， 定义变量时不需要声名变量的类型</p><p>python 是一种解释型语言，在运行代码前不需要提前编译</p><p>python中一切皆对象，他有对象模块，线程，异常处理和自动内存管理等，程序员可以专注与算法和数据结构，而不必处理底层细节</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的GIL全局解释器锁</title>
      <link href="/posts/38350.html"/>
      <url>/posts/38350.html</url>
      
        <content type="html"><![CDATA[<h1 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h1><p>在cpython中使用引用计数来管理内存，举个例子</p><pre class="line-numbers language-none"><code class="language-none">import sysa &#x3D; []b &#x3D; asys.getrecount(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，引用计数时3，这样一来，如果有两个线程同时引用了a，会出现竞争条件漏洞，引用计数可能只增加1, 这样会造成内存污染，因为当第一个线程结束时,引用计数-1,会使对象销毁，达到内存回收的标准，第二个线程再去访问的时候，找不到有效内存。</p><p>cpython中引GIL主要有两个原因：</p><ol><li>设计者为了规避内存管理这样复杂的竞争风险</li><li>cpython中大量使用了c语言库，而c语言库大多不是原生线程安全的（线程安全会降低复杂度）</li></ol><h1 id="GIL工作原理"><a href="#GIL工作原理" class="headerlink" title="GIL工作原理"></a>GIL工作原理</h1><p> 下面这张图，就是一个 GIL 在 Python 程序的工作示例。其中，Thread 1、2、3 轮流执行，每一个线程在开始执行时，都会锁住 GIL，以阻止别的线程执行；同样的，每一个线程执行完一段后，会释放 GIL，以允许别的线程开始利用资源。 <img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666493857159.png" alt="1666493857159"></p><p>但是如果死锁了怎么办呢，如果仅仅是要求 Python 线程在开始执行时锁住 GIL，而永远不去释放 GIL，那别的线程就都没有了运行的机会。 </p><p>没错cpython还有另外一个机制，check_interval机制，在一个合理的时间段内python 解释器都会强制释放锁</p><h1 id="python的线程安全问题"><a href="#python的线程安全问题" class="headerlink" title="python的线程安全问题"></a>python的线程安全问题</h1><p>有了GIL,并不意味着python 编程就不考虑线程安全问题了，因为存在check_interval抢占机制，所以某些操作可能会被打断，所以我们需要使用threading.lock()来确保线程安全</p><h1 id="如何绕过GIL"><a href="#如何绕过GIL" class="headerlink" title="如何绕过GIL"></a>如何绕过GIL</h1><p>绕过 CPython，使用 JPython（Java 实现的 Python 解释器）等别的实现 </p><p>把关键性能代码，放到别的语言（一般是 C++）中实现。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的深拷贝和浅拷贝</title>
      <link href="/posts/26413.html"/>
      <url>/posts/26413.html</url>
      
        <content type="html"><![CDATA[<h1 id="深浅拷贝的本质"><a href="#深浅拷贝的本质" class="headerlink" title="深浅拷贝的本质"></a>深浅拷贝的本质</h1><blockquote><p>浅拷贝，拷贝的程度浅，只拷贝原数据的首地址，然后通过原数据的首地址，去获取内容。 </p><p>深拷贝，拷贝的程度深，自己新开辟了一块内存，将被拷贝内容全部拷贝过来了 </p></blockquote><h1 id="如何进行深浅拷贝"><a href="#如何进行深浅拷贝" class="headerlink" title="如何进行深浅拷贝"></a>如何进行深浅拷贝</h1><blockquote><p>浅拷贝的三种形式：切片，工厂函数，copy</p><p>深拷贝：copy.deepcopy</p></blockquote><h1 id="深拷贝和浅拷贝的优缺点对比"><a href="#深拷贝和浅拷贝的优缺点对比" class="headerlink" title="深拷贝和浅拷贝的优缺点对比"></a>深拷贝和浅拷贝的优缺点对比</h1><blockquote><p>浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少 </p><p>深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的垃圾回收机制</title>
      <link href="/posts/41514.html"/>
      <url>/posts/41514.html</url>
      
        <content type="html"><![CDATA[<h1 id="引用计数c源码"><a href="#引用计数c源码" class="headerlink" title="引用计数c源码"></a>引用计数c源码</h1><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666365135262.png" alt="1666365135262"></p><h1 id="引用计数在python中的实现"><a href="#引用计数在python中的实现" class="headerlink" title="引用计数在python中的实现"></a>引用计数在python中的实现</h1><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666365721785.png" alt="1666365721785"></p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666366202112.png" alt="1666366202112"></p><h1 id="标记清楚解决循环引用"><a href="#标记清楚解决循环引用" class="headerlink" title="标记清楚解决循环引用"></a>标记清楚解决循环引用</h1><p>只用引用计数的话，会出现循环引用的问题，在python中用了标记清除的方式来解决</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666366643482.png" alt="1666366643482"></p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666366986121.png" alt="1666366986121"></p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666367253217.png" alt="1666367253217"></p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1666367810310.png" alt="1666367810310"></p><p>总结：</p><p>在python中维护了一个refchain的双向循环列表，这个链表中维护了程序运行需要的所有对象，每种对象中都有obj_re cent的属性，首次创建次数为一，通过+1 -1来维护该对象被引用的次数，当object_refcnt为0时，说明需要进行垃圾回收。</p><p>但是在python中，多个元素组成的对象可能存在相互引用的问题，为了解决这个问题，python又引入了标记清除的方式，</p><p>在解释器内部额外再维护三个列表（0代，1代，2代），</p><p>0代：当0代到达700个扫描一次，</p><p>1代： 当1代扫描10次扫描一次</p><p>2代： 当2代扫描10此扫描一次</p><p>在这个基础上，python内部又做缓存优化</p><p>缓存优化有两种：</p><ol><li><p>池（int）避免重复创建和销毁常用的对象</p></li><li><p>free_list 当引用计数为0时，按理说应该回收，但内部不会直接回收，会加入到free_list中，以后不会直接创建，而是先从free_list中获取</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins常用DSL</title>
      <link href="/posts/18404.html"/>
      <url>/posts/18404.html</url>
      
        <content type="html"><![CDATA[<p> <a href="https://blog.csdn.net/qq_34556414/article/details/121806285">Jenkins 流水线语法 常用的DSL方法总结_富士康质检员张全蛋的博客-CSDN博客</a> </p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建工具ansible集成</title>
      <link href="/posts/47333.html"/>
      <url>/posts/47333.html</url>
      
        <content type="html"><![CDATA[<h5 id="CD-ansible"><a href="#CD-ansible" class="headerlink" title="CD-ansible"></a>CD-ansible</h5><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>yum install epel-release -y</p></li><li><p>yum install ansible -y</p></li><li><p>vi &#x2F;etc&#x2F;ansible&#x2F;hosts 添加</p><pre class="line-numbers language-none"><code class="language-none">[servers]server1 192.168.72.131<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意如果是集成到jenkins里，由于jenlins的默认启动用户是jenkins， 所以需要和免密的用户保持一致，要么添加jenkisn免密，要么修改启动用户，此处做如下修改</strong></p></li><li><p>chmod 777 &#x2F;etc&#x2F;sudoers</p></li><li><p>vi &#x2F;etc&#x2F;sudoers</p><pre class="line-numbers language-none"><code class="language-none">root    ALL&#x3D;(ALL)       ALLjenkins ALL&#x3D;(ALL)       ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>chmod 440 &#x2F;etc&#x2F;sudoers</p></li><li><p>vim &#x2F;etc&#x2F;passwd 打开jenkins的bash</p></li><li><p>su jenkins</p></li><li><p>ssh-keygen</p></li><li><p>ssh-copy-id -i &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#55;&#x32;&#46;&#49;&#51;&#50;">&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#55;&#x32;&#46;&#49;&#51;&#50;</a></p></li><li><p>vi &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</p><pre class="line-numbers language-none"><code class="language-none">[defaults]remote_user &#x3D; root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslib&#39;) _def build &#x3D; new org.devops.build()def deploy &#x3D; new org.devops.deploy()String buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot; &#x2F;&#x2F;jenkins项目中配置的参数名称String buildType &#x3D; &quot;$&#123;env.buildType&#125;&quot;pipeline&#123;    agent any    stages&#123;        stage(&quot;build&quot;)&#123;            steps&#123;                script&#123;                    build.Build(buildType, buildShell)                    deploy.SaltDeploy(&quot;salt-minion&quot;, &quot;test.ping&quot;)                    deploy.AnsibleDeploy(&quot;server1&quot;, &quot;ping&quot;)                &#125;            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; 该jenkins 脚本执行到ant会报错，所以加入try&#123;&#125;catch(e)&#123;&#125;语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建工具saltstack集成</title>
      <link href="/posts/52139.html"/>
      <url>/posts/52139.html</url>
      
        <content type="html"><![CDATA[<h4 id="CD-saltstack"><a href="#CD-saltstack" class="headerlink" title="CD-saltstack"></a>CD-saltstack</h4><p><a href="https://repo.saltproject.io/#rhel">官网</a></p><h5 id="saltstack安装"><a href="#saltstack安装" class="headerlink" title="saltstack安装"></a>saltstack安装</h5><ol><li><p>sudo rpm –import <a href="https://repo.saltproject.io/py3/redhat/8/x86_64/latest/SALTSTACK-GPG-KEY.pub">https://repo.saltproject.io/py3/redhat/8/x86_64/latest/SALTSTACK-GPG-KEY.pub</a></p></li><li><p>curl -fsSL <a href="https://repo.saltproject.io/py3/redhat/8/x86_64/latest.repo">https://repo.saltproject.io/py3/redhat/8/x86_64/latest.repo</a> | sudo tee &#x2F;etc&#x2F;yum.repos.d&#x2F;salt.repo</p></li><li><p>yum install salt-master</p></li><li><p>yum install salt-minion</p></li><li><p>systemctl start salt-master</p></li><li><p>systemctl start salt-minion</p></li><li><p>cd &#x2F;etc&#x2F;salt</p></li><li><p>vi minion 添加master: 182.168.72.132   重启</p></li><li><p>salt-key -L   # master上操作可以看到未接受的key</p></li><li><p>salt-key -a 172.17.0.1</p></li><li><p>设置开机自启动<br>1.  systemctl enable –now salt-master<br>2.  systemctl enable –now salt-minion</p></li><li><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;4505&#x2F;tcp –permanent</p></li><li><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;4506&#x2F;tcp –permanent</p></li><li><p>systemctl restart firewalld.service</p><hr></li></ol><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>sudo systemctl enable salt-master &amp;&amp; sudo systemctl start salt-master</p><p>sudo systemctl enable salt-minion &amp;&amp; sudo systemctl start salt-minion</p><p>sudo systemctl enable salt-syndic &amp;&amp; sudo systemctl start salt-syndic</p><p>sudo systemctl enable salt-api &amp;&amp; sudo systemctl start salt-api</p><h5 id="修改id或者标识"><a href="#修改id或者标识" class="headerlink" title="修改id或者标识"></a>修改id或者标识</h5><ol><li>hostnamectl 查看当前</li><li>hostnamectl set-hostname k8s-slave</li><li>minion 端执行<ol><li>rm -rf&#x2F;etc&#x2F;salt&#x2F;minion_id</li><li>rm -rf &#x2F;etc&#x2F;salt&#x2F;pki&#x2F;*</li><li>service salt-minion restart</li></ol></li><li>master端执<ol><li>rm -rf &#x2F;etc&#x2F;salt&#x2F;pki&#x2F;* </li><li>service salt-master restart</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建工具npm集成</title>
      <link href="/posts/26166.html"/>
      <url>/posts/26166.html</url>
      
        <content type="html"><![CDATA[<h4 id="jenkins-集成npm"><a href="#jenkins-集成npm" class="headerlink" title="jenkins 集成npm"></a>jenkins 集成npm</h4><p><a href="https://nodejs.org/en/download/">官网</a></p><h5 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h5><ol><li>cd &#x2F;data&#x2F;devops&#x2F;devops-tools-install-pkg&#x2F;</li><li>wget <a href="https://nodejs.org/dist/v16.16.0/node-v16.16.0-linux-x64.tar.xz">https://nodejs.org/dist/v16.16.0/node-v16.16.0-linux-x64.tar.xz</a></li><li>tar -xvf node-v16.16.0-linux-x64.tar.xz -C &#x2F;usr&#x2F;local&#x2F;</li><li>cd &#x2F;usr&#x2F;local&#x2F;node-v16.16.0-linux-x64&#x2F;</li><li>pwd 获取安装路径</li><li>vi &#x2F;etc&#x2F;profile<pre class="line-numbers language-none"><code class="language-none"> export &#96;NPM_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;node-v16.16.0-linux-x64export PATH&#x3D;$GROOVY_HOME&#x2F;bin:$PATH:M2_HOME&#x2F;bin:$ANT_HOME&#x2F;bin:$GRADLE_HOME&#x2F;bin:$NPM_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>source &#x2F;etc&#x2F;profile</li><li>npm install -g npm</li><li>jenkins–&gt;全局工具配置—&gt;node   name: NPM    PATH usr&#x2F;local&#x2F;node-v16.16.0-linux-x64</li></ol><h5 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h5><pre class="line-numbers language-none"><code class="language-none">#!groovyString buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot; &#x2F;&#x2F;jenkins项目中配置的参数名称pipeline&#123;    agent any    stages&#123;        stage(&quot;build&quot;)&#123;            steps&#123;                script&#123;                    mvnHome &#x3D; tool &quot;M2&quot;                    sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn -v&quot;                    &#x2F;&#x2F; sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn $&#123;buildShell&#125;&quot; &#x2F;&#x2F;学习使用参数的方式进行构建                &#125;            &#125;        &#125;        stage(&quot;ant&quot;)&#123;          steps&#123;                script&#123;                    try&#123;                        antHome &#x3D; tool &quot;ANT&quot;                        &#x2F;&#x2F;sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant -v&quot;                        sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant $&#123;buildShell&#125;&quot; &#x2F;&#x2F;学习使用参数的方式进行构建                    &#125;catch(e)&#123;                        println(e)                    &#125;                &#125;            &#125;        &#125;        stage(&quot;gradlebuild&quot;)&#123;          steps&#123;                script&#123;                    gradleHome &#x3D; tool &quot;GRADLE&quot;                    println(&quot;$&#123;gradleHome&#125;&quot;)                    sh &quot;$&#123;gradleHome&#125;&#x2F;bin&#x2F;gradle -v&quot;                    &#x2F;&#x2F;sh &quot;$&#123;gradleHome&#125;&#x2F;bin&#x2F;gradle $&#123;buildShell&#125;&quot; &#x2F;&#x2F;学习使用参数的方式进行构建                &#125;            &#125;        &#125;         stage(&quot;npmbuild&quot;)&#123;          steps&#123;                script&#123;                    npmHome &#x3D; tool &quot;NPM&quot;                    &#x2F;&#x2F;sh &quot;$&#123;npmHome&#125;&#x2F;bin&#x2F;npm -v&quot;                    sh &quot;$&#123;npmHome&#125;&#x2F;bin&#x2F;npm $&#123;buildShell&#125;&quot; &#x2F;&#x2F;学习使用参数的方式进行构建                &#125;            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; 该jenkins 脚本执行到ant会报错，所以加入try&#123;&#125;catch(e)&#123;&#125;语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建工具grandle集成</title>
      <link href="/posts/37880.html"/>
      <url>/posts/37880.html</url>
      
        <content type="html"><![CDATA[<h5 id="jenkins-集成grandle"><a href="#jenkins-集成grandle" class="headerlink" title="jenkins 集成grandle"></a>jenkins 集成grandle</h5><p><a href="https://gradle.org/">gradle官网</a></p><h5 id="安装grandle"><a href="#安装grandle" class="headerlink" title="安装grandle"></a>安装grandle</h5><ol><li><p>cd &#x2F;data&#x2F;devops&#x2F;devops-tools-install-pkg&#x2F;</p></li><li><p>wget <a href="https://downloads.gradle-dn.com/distributions/gradle-7.5-bin.zip">https://downloads.gradle-dn.com/distributions/gradle-7.5-bin.zip</a></p></li><li><p>cd &#x2F;usr&#x2F;local&#x2F;gradle-7.5&#x2F;</p></li><li><p>pwd</p></li></ol><blockquote><p>&#x2F;usr&#x2F;local&#x2F;gradle-7.5</p></blockquote><pre class="line-numbers language-none"><code class="language-none">5.vi &#x2F;etc&#x2F;profile&#96;&#96;&#96;&#96;export GRADLE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;gradle-7.5export PATH&#x3D;$GROOVY_HOME&#x2F;bin:$PATH:M2_HOME&#x2F;bin:$ANT_HOME&#x2F;bin:GRADLE_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>source &#x2F;etc&#x2F;profile</li><li>jenkins—-&gt;系统设置—&gt;系统工具设置—&gt;gradle  name:GRADLE PATH &#x2F;usr&#x2F;local&#x2F;gradle-7.5</li></ol><pre><code>#!groovyString buildShell = &quot;$&#123;env.buildShell&#125;&quot; //jenkins项目中配置的参数名称pipeline&#123;    agent any    stages&#123;        stage(&quot;build&quot;)&#123;            steps&#123;                script&#123;                    mvnHome = tool &quot;M2&quot;                    sh &quot;$&#123;mvnHome&#125;/bin/mvn -v&quot;                    // sh &quot;$&#123;mvnHome&#125;/bin/mvn $&#123;buildShell&#125;&quot; //学习使用参数的方式进行构建                &#125;            &#125;        &#125;        stage(&quot;ant&quot;)&#123;          steps&#123;                script&#123;                    try&#123;                        antHome = tool &quot;ANT&quot;                        //sh &quot;$&#123;antHome&#125;/bin/ant -v&quot;                        sh &quot;$&#123;antHome&#125;/bin/ant $&#123;buildShell&#125;&quot; //学习使用参数的方式进行构建                    &#125;catch(e)&#123;                        println(e)                    &#125;                &#125;            &#125;        &#125;        stage(&quot;gradle&quot;)&#123;          steps&#123;                script&#123;                    gradleHome = tool &quot;GRADLE&quot;                    println(&quot;$&#123;gradleHome&#125;&quot;)                    sh &quot;$&#123;gradleHome&#125;/bin/gradle -v&quot;                    //sh &quot;$&#123;gradleHome&#125;/bin/gradle $&#123;buildShell&#125;&quot; //学习使用参数的方式进行构建                &#125;            &#125;        &#125;     &#125;&#125;// 该jenkins 脚本执行到ant会报错，所以加入try&#123;&#125;catch(e)&#123;&#125;语句</code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建工具ant集成</title>
      <link href="/posts/55167.html"/>
      <url>/posts/55167.html</url>
      
        <content type="html"><![CDATA[<h4 id="jenkins-中ant构建工具"><a href="#jenkins-中ant构建工具" class="headerlink" title="jenkins 中ant构建工具"></a>jenkins 中ant构建工具</h4><p><a href="https://ant.apache.org/bindownload.cgi">ant官网</a></p><h5 id="ant安装"><a href="#ant安装" class="headerlink" title="ant安装"></a>ant安装</h5><ol><li><p>cd &#x2F;data&#x2F;devops&#x2F;devops-tools-install-pkg&#x2F;</p></li><li><p>wget <a href="https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.12-bin.tar.gz">https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.12-bin.tar.gz</a></p></li><li><p>tar -xvf apache-ant-1.10.12-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</p></li><li><p>cd &#x2F;usr&#x2F;local&#x2F;apache-ant-1.10.12&#x2F;</p></li><li><p>pwd</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;apache-ant-1.10.12&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>vi &#x2F;etc&#x2F;profile</p><pre class="line-numbers language-none"><code class="language-none">export ANT_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-ant-1.10.12export PATH&#x3D;$GROOVY_HOME&#x2F;bin:$PATH:M2_HOME&#x2F;bin:$ANT_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>source &#x2F;etc&#x2F;profile</p></li></ol><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><pre class="line-numbers language-none"><code class="language-none">#!groovyString buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot; &#x2F;&#x2F;jenkins项目中配置的参数名称pipeline&#123;    agent any    stages&#123;        stage(&quot;build&quot;)&#123;            steps&#123;                script&#123;                    mvnHome &#x3D; tool &quot;M2&quot;                    sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn -v&quot;                    &#x2F;&#x2F; sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn $&#123;buildShell&#125;&quot; &#x2F;&#x2F;学习使用参数的方式进行构建                &#125;            &#125;        &#125;        stage(&quot;ant&quot;)&#123;          steps&#123;                script&#123;                    antHome &#x3D; tool &quot;ANT&quot;                    &#x2F;&#x2F;sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant -v&quot;                    sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;ant $&#123;buildShell&#125;&quot; &#x2F;&#x2F;学习使用参数的方式进行构建                &#125;            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; 该jenkins 脚本使用会报错是因为没有项目，执行参数中的clean 会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建工具maven集成</title>
      <link href="/posts/24379.html"/>
      <url>/posts/24379.html</url>
      
        <content type="html"><![CDATA[<h4 id="jenkins中maven安装"><a href="#jenkins中maven安装" class="headerlink" title="jenkins中maven安装"></a>jenkins中maven安装</h4><h5 id="采用手动安装的方式"><a href="#采用手动安装的方式" class="headerlink" title="采用手动安装的方式"></a>采用手动安装的方式</h5><ol><li><p>cd cd &#x2F;data&#x2F;devops&#x2F;devops-tools-install-pkg&#x2F;</p></li><li><p>wget <a href="https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz">https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz</a></p></li><li><p>tar -xvf apache-maven-3.8.6-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</p></li><li><p>cd &#x2F;usr&#x2F;local&#x2F;apache-maven-3.8.6&#x2F;</p></li><li><p>pwd</p><ol><li>&#x2F;usr&#x2F;local&#x2F;apache-maven-3.8.6&#x2F;</li></ol></li><li><p>vi &#x2F;etc&#x2F;profile</p></li><li><p>添加环境变量如下内容，注意export 后面是追加，不影响之前的环境变量</p> <pre class="line-numbers language-none"><code class="language-none">export M2_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.8.6export PATH&#x3D;$GROOVY_HOME&#x2F;bin:$PATH:M2_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>jenkins —&gt;系统设置—&gt;全局工具配置—&gt;maven</p><ol><li>name: M2</li><li>MAVEN_HOME: &#x2F;usr&#x2F;local&#x2F;apache-maven-3.8.6</li></ol></li><li><p>点击保存</p></li><li><p>新建流水线,脚本如下</p><pre class="line-numbers language-none"><code class="language-none">#!groovypipeline&#123;    agent any    stages&#123;        stage(&quot;build&quot;)&#123;            steps&#123;                script&#123;                    mvnHome &#x3D; tool &quot;M2&quot;                    sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn -v&quot;                &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>maven常用命令<br>1. clean 清理构建目录<br>2. clean package 打包<br>3. clean install 打包部署<br>4. clean test 单元测试</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins使用共享库</title>
      <link href="/posts/26356.html"/>
      <url>/posts/26356.html</url>
      
        <content type="html"><![CDATA[<h1 id="共享库定义"><a href="#共享库定义" class="headerlink" title="共享库定义"></a>共享库定义</h1><p><strong>存在这样的场景</strong>：<br> 在 jenkins 中存在多个 pipeline jobs,<br> pipeline jobs 之间有相同逻辑功能（有重复相同代码），<br> 为了 dry (don’t repeat yourself) 去除重复代码，jenkins 可以提供了一特性： 可以把重复的代码做成通用的共享库（shared libraries)</p><p>好处： 一方面精简代码（去重），另一方面减少后续新添 pipeline job 时的重复造轮子。</p><h1 id="共享库的使用"><a href="#共享库的使用" class="headerlink" title="共享库的使用"></a>共享库的使用</h1><h2 id="1-使用流程"><a href="#1-使用流程" class="headerlink" title="1. 使用流程"></a>1. 使用流程</h2><p>分以下几步：</p><ul><li><ol><li>创建共享库</li></ol></li><li><ol><li>jenkins 配置 Global Shared Libraries</li></ol></li><li><ol><li>jenkinsfile 引用共享库</li></ol></li></ul><h2 id="2-创建共享库"><a href="#2-创建共享库" class="headerlink" title="2. 创建共享库"></a>2. 创建共享库</h2><p>定义共享库(Defining Shared Libraries)</p><ol><li>在gitlab 新建共享库仓库jenkinslib</li></ol><p><img src="/1666348541590.png" alt="1666348541590"></p><ol start="2"><li>创建目录结构</li></ol><pre class="line-numbers language-none"><code class="language-none">(root)+- src                     # Groovy source files|   +- org|       +- foo|           +- Bar.groovy  # for org.foo.Bar class+- vars|   +- foo.groovy          # for global &#39;foo&#39; variable|   +- foo.txt             # help for &#39;foo&#39; variable+- resources               # resource files (external libraries only)|   +- org|       +- foo|           +- bar.json    # static helper data for org.foo.Bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建src&#x2F;org&#x2F;devops&#x2F;xxx.groovy 文件</li></ol><p><img src="/1666348578043.png" alt="1666348578043"></p><ol start="4"><li><p>在jenkins 客户端引用该共享库文件</p><ul><li>jenkins 配置 Global Shared Libraries </li><li>Manage Jenkins » Configure System » Global Pipeline Libraries</li></ul></li><li><p>在jenkinsfiile中通过@Library(‘jenkins’) _ 引入</p></li></ol><pre class="line-numbers language-none"><code class="language-none">@Library(&#39;my-shared-library&#39;) _&#x2F;* Using a version specifier, such as branch, tag, etc *&#x2F;@Library(&#39;my-shared-library@1.0&#39;) _&#x2F;* Accessing multiple libraries with one statement *&#x2F;@Library([&#39;my-shared-library&#39;, &#39;otherlib@abc1234&#39;]) _<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>jenkinsfile中使用</li></ol><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslibrary@master&#39;) _&#x2F;&#x2F;func from shareibrarydef build &#x3D; new org.devops.build()def deploy &#x3D; new org.devops.deploy()def tools &#x3D; new org.devops.tools()def gitlab &#x3D; new org.devops.gitlab()def toemail &#x3D; new org.devops.toemail()def sonar &#x3D; new org.devops.sonarqube()def sonarapi &#x3D; new org.devops.sonarapi()def nexus &#x3D; new org.devops.nexus()def artifactory &#x3D; new org.devops.artifactory() def runOpts&#x2F;&#x2F;envString buildType &#x3D; &quot;$&#123;env.buildType&#125;&quot;String buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot;String deployHosts &#x3D; &quot;$&#123;env.deployHosts&#125;&quot;String srcUrl &#x3D; &quot;$&#123;env.srcUrl&#125;&quot;String branchName &#x3D; &quot;$&#123;env.branchName&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;    branchName &#x3D; branch - &quot;refs&#x2F;heads&#x2F;&quot;        currentBuild.description &#x3D; &quot;Trigger by $&#123;userName&#125; $&#123;branch&#125;&quot;    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;running&quot;)    env.runOpts &#x3D; &quot;GitlabPush&quot;    &#125; else &#123;   userEmail &#x3D; &quot;2560350642@qq.com&quot;&#125;&#x2F;&#x2F;pipelinepipeline&#123;    agent &#123; node &#123; label &quot;build&quot;&#125;&#125;            stages&#123;        stage(&quot;CheckOut&quot;)&#123;            steps&#123;                script&#123;                                                           println(&quot;$&#123;branchName&#125;&quot;)                                    tools.PrintMes(&quot;获取代码&quot;,&quot;green&quot;)                    checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;$&#123;branchName&#125;&quot;]],                                       doGenerateSubmoduleConfigurations: false,                                       extensions: [],                                       submoduleCfg: [],                                       userRemoteConfigs: [[credentialsId: &#39;gitlab-admin-user&#39;, url: &quot;$&#123;srcUrl&#125;&quot;]]])                &#125;            &#125;        &#125;        stage(&quot;Build&quot;)&#123;            steps&#123;                script&#123;                                    tools.PrintMes(&quot;执行打包&quot;,&quot;green&quot;)                    &#x2F;&#x2F;build.Build(buildType,buildShell)                    artifactory.main(buildType,buildShell)                    artifactory.PushArtifact()                                        &#x2F;&#x2F;上传制品                    &#x2F;&#x2F;nexus.main(&quot;nexus&quot;)                                        &#x2F;&#x2F;发布制品                    &#x2F;&#x2F;sh &quot; wget $&#123;artifactUrl&#125; &amp;&amp; ls &quot;                                                                                &#x2F;&#x2F;deploy.SaltDeploy(&quot;$&#123;deployHosts&#125;&quot;,&quot;test.ping&quot;)                    &#x2F;&#x2F;deploy.AnsibleDeploy(&quot;$&#123;deployHosts&#125;&quot;,&quot;-m ping &quot;)                &#125;            &#125;       &#125;                      stage(&quot;QA&quot;)&#123;            steps &#123;                script&#123;                    tools.PrintMes(&quot;搜索项目&quot;,&quot;green&quot;)                    result &#x3D; sonarapi.SerarchProject(&quot;$&#123;JOB_NAME&#125;&quot;)                    println(result)                                        if (result &#x3D;&#x3D; &quot;false&quot;)&#123;                        println(&quot;$&#123;JOB_NAME&#125;---项目不存在,准备创建项目---&gt; $&#123;JOB_NAME&#125;！&quot;)                        sonarapi.CreateProject(&quot;$&#123;JOB_NAME&#125;&quot;)                    &#125; else &#123;                        println(&quot;$&#123;JOB_NAME&#125;---项目已存在！&quot;)                    &#125;                                        tools.PrintMes(&quot;配置项目质量规则&quot;,&quot;green&quot;)                    qpName&#x3D;&quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;-&quot;)[0]   &#x2F;&#x2F;Sonar%20way                    sonarapi.ConfigQualityProfiles(&quot;$&#123;JOB_NAME&#125;&quot;,&quot;java&quot;,qpName)                                    tools.PrintMes(&quot;配置质量阈&quot;,&quot;green&quot;)                    sonarapi.ConfigQualityGates(&quot;$&#123;JOB_NAME&#125;&quot;,qpName)                                    tools.PrintMes(&quot;代码扫描&quot;,&quot;green&quot;)                    sonar.SonarScan(&quot;test&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;src&quot;)                                        sleep 30                    tools.PrintMes(&quot;获取扫描结果&quot;,&quot;green&quot;)                    result &#x3D; sonarapi.GetProjectStatus(&quot;$&#123;JOB_NAME&#125;&quot;)                                                            println(result)                    if (result.toString() &#x3D;&#x3D; &quot;ERROR&quot;)&#123;                        toemail.Email(&quot;代码质量阈错误！请及时修复！&quot;,userEmail)                        error &quot; 代码质量阈错误！请及时修复！&quot;                                                                    &#125; else &#123;                        println(result)                    &#125;                                                &#125;           &#125;       &#125;    &#125;    post &#123;        always&#123;            script&#123;                println(&quot;always&quot;)            &#125;        &#125;                success&#123;            script&#123;                println(&quot;success&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;success&quot;)                &#125;                toemail.Email(&quot;流水线成功&quot;,userEmail)                        &#125;                &#125;        failure&#123;            script&#123;                println(&quot;failure&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;failed&quot;)                &#125;                toemail.Email(&quot;流水线失败了！&quot;,userEmail)            &#125;        &#125;                aborted&#123;            script&#123;                println(&quot;aborted&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;canceled&quot;)                &#125;               toemail.Email(&quot;流水线被取消了！&quot;,userEmail)            &#125;                &#125;        &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声明式流水线的语法</title>
      <link href="/posts/47046.html"/>
      <url>/posts/47046.html</url>
      
        <content type="html"><![CDATA[<h1 id="流水线语法"><a href="#流水线语法" class="headerlink" title="流水线语法"></a>流水线语法</h1><p><img src="/1666344692125.png" alt="1666344692125"></p><p><img src="/1666344751058.png" alt="1666344751058"></p><p><img src="/1666344984502.png" alt="1666344984502"></p><p><img src="/1666345005827.png" alt="1666345005827"></p><p><img src="/1666345163222.png" alt="1666345163222"></p><p><img src="/1666345321187.png" alt="1666345321187"></p><p><img src="/1666345554407.png" alt="1666345554407"></p><p><img src="/1666345584767.png" alt="1666345584767"></p><p><img src="/1666345865985.png" alt="1666345865985"></p><p><img src="/1666346068839.png" alt="1666346068839"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目发布流水线</title>
      <link href="/posts/30682.html"/>
      <url>/posts/30682.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端项目发布流水线"><a href="#前端项目发布流水线" class="headerlink" title="前端项目发布流水线"></a>前端项目发布流水线</h2><ul><li><p>安装nodejs</p></li><li><p>安装vue， 生成vue demo(替换为自己的项目)</p><ul><li>npm installl vue</li><li>npm install vue-cli</li><li>vue init webpack my-project</li><li>npm install &amp;&amp; npm run build</li><li>cd dist&#x2F; &amp;&amp; tar zcf demo-npm-service.tar.gz</li><li>cp demo-npm-service.tar.gz &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html &amp;&amp; tar zxf</li></ul></li><li><p>容器化，编写dockerfile</p><pre class="line-numbers language-none"><code class="language-none">FROM nginx:1.17.7COPY dist&#x2F; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>• docker build -t registry . cn-beijing . aliyuncs . com&#x2F;devopstest&#x2F;demo-npm-service：latest .</p><p>• docker push registry . cn-beijing . aliyuncs . com&#x2F;devopstest&#x2F;demo-npm-service：latest</p><p>• docker run -p 8030:80 registry . cn-beijing . aliyuncs . com&#x2F;devopstest&#x2F;demo-npm-service：latest</p></li><li><p>创建部署模板</p></li><li><p>jenkins slave增加kubectl命令</p></li><li><p>使用kubectl部署</p></li><li><p>sonar 前端项目代码扫描</p></li><li><p>将前端项目上传gitlab， 并编写jenkinsfile</p><pre class="line-numbers language-none"><code class="language-none">•docker build -t registry . cn-beijing . aliyuncs . com&#x2F;devopstest&#x2F;demo-npm-service：latest .•docker push registry . cn-beijing . aliyuncs . com&#x2F;devopstest&#x2F;demo-npm-service：latest•docker run -p 8030:80 registry . cn-beijing . aliyuncs . com&#x2F;devopstest&#x2F;demo-npm-service：latest#!groovy@Library(&#39;jenkinslibrary@master&#39;) _&#x2F;&#x2F;func from shareibrarydef build &#x3D; new org.devops.build()def deploy &#x3D; new org.devops.deploy()def tools &#x3D; new org.devops.tools()def gitlab &#x3D; new org.devops.gitlab()def toemail &#x3D; new org.devops.toemail()def sonar &#x3D; new org.devops.sonarqube()def sonarapi &#x3D; new org.devops.sonarapi()def nexus &#x3D; new org.devops.nexus()def artifactory &#x3D; new org.devops.artifactory() def k8s &#x3D; new org.devops.kubernetes()def runOpts&#x2F;&#x2F;envString buildType &#x3D; &quot;$&#123;env.buildType&#125;&quot;String buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot;String deployHosts &#x3D; &quot;$&#123;env.deployHosts&#125;&quot;String srcUrl &#x3D; &quot;$&#123;env.srcUrl&#125;&quot;String branchName &#x3D; &quot;$&#123;env.branchName&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;    branchName &#x3D; branch - &quot;refs&#x2F;heads&#x2F;&quot;        currentBuild.description &#x3D; &quot;Trigger by $&#123;userName&#125; $&#123;branch&#125;&quot;    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;running&quot;)    env.runOpts &#x3D; &quot;GitlabPush&quot;    &#125; else &#123;   userEmail &#x3D; &quot;2560350642@qq.com&quot;&#125;&#x2F;&#x2F;pipelinepipeline&#123;    agent &#123; node &#123; label &quot;build&quot;&#125;&#125;            stages&#123;       stage(&quot;GetCode&quot;)&#123;            steps&#123;                script&#123;                    println(&quot;$&#123;branchName&#125;&quot;)                                    tools.PrintMes(&quot;获取代码&quot;,&quot;green&quot;)                    checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;$&#123;branchName&#125;&quot;]],                                       doGenerateSubmoduleConfigurations: false,                                       extensions: [],                                       submoduleCfg: [],                                       userRemoteConfigs: [[credentialsId: &#39;gitlab-admin-user&#39;, url: &quot;$&#123;srcUrl&#125;&quot;]]])                &#125;            &#125;        &#125;        stage(&quot;Build&amp;Test&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;执行打包&quot;,&quot;green&quot;)                    build.Build(buildType,buildShell)                                    &#125;            &#125;        &#125;                      &#x2F;&#x2F;并行        stage(&#39;parallel01&#39;) &#123;            parallel &#123;                stage(&quot;QA&quot;)&#123;                    steps &#123;                        script&#123;                            tools.PrintMes(&quot;搜索项目&quot;,&quot;green&quot;)                            result &#x3D; sonarapi.SerarchProject(&quot;$&#123;JOB_NAME&#125;&quot;)                            println(result)                                                        if (result &#x3D;&#x3D; &quot;false&quot;)&#123;                                println(&quot;$&#123;JOB_NAME&#125;---项目不存在,准备创建项目---&gt; $&#123;JOB_NAME&#125;！&quot;)                                sonarapi.CreateProject(&quot;$&#123;JOB_NAME&#125;&quot;)                            &#125; else &#123;                                println(&quot;$&#123;JOB_NAME&#125;---项目已存在！&quot;)                            &#125;                                                        tools.PrintMes(&quot;配置项目质量规则&quot;,&quot;green&quot;)                            qpName&#x3D;&quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;-&quot;)[0]   &#x2F;&#x2F;Sonar%20way                            sonarapi.ConfigQualityProfiles(&quot;$&#123;JOB_NAME&#125;&quot;,&quot;java&quot;,qpName)                                                    tools.PrintMes(&quot;配置质量阈&quot;,&quot;green&quot;)                            sonarapi.ConfigQualityGates(&quot;$&#123;JOB_NAME&#125;&quot;,qpName)                                                    tools.PrintMes(&quot;代码扫描&quot;,&quot;green&quot;)                            sonar.SonarScan(&quot;test&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;src&quot;,&quot;$&#123;branchName&#125;&quot;)                                                                sleep 30                            tools.PrintMes(&quot;获取扫描结果&quot;,&quot;green&quot;)                            result &#x3D; sonarapi.GetProjectStatus(&quot;$&#123;JOB_NAME&#125;&quot;)                                                                                    println(result)                            if (result.toString() &#x3D;&#x3D; &quot;ERROR&quot;)&#123;                                toemail.Email(&quot;代码质量阈错误！请及时修复！&quot;,userEmail)                                error &quot; 代码质量阈错误！请及时修复！&quot;                                                                                            &#125; else &#123;                                println(result)                            &#125;                        &#125;                   &#125;                &#125;                                                       &#x2F;&#x2F;构建镜像                stage(&quot;BuildImages&quot;)&#123;                    steps&#123;                        script&#123;                            tools.PrintMes(&quot;构建上传镜像&quot;,&quot;green&quot;)                            env.serviceName &#x3D; &quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;_&quot;)[0]                                                       withCredentials([usernamePassword(credentialsId: &#39;aliyun-registry-admin&#39;, passwordVariable: &#39;password&#39;, usernameVariable: &#39;username&#39;)]) &#123;                                                              env.dockerImage &#x3D; &quot;registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125;&quot;                               sh &quot;&quot;&quot;                                   docker login -u $&#123;username&#125; -p $&#123;password&#125;  registry.cn-beijing.aliyuncs.com                                   docker build -t registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125; .                                   sleep 1                                   docker push registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125;                                   sleep 1                                   #docker rmi registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125;                                &quot;&quot;&quot;                            &#125;                        &#125;                    &#125;                &#125;            &#125;        &#125;               &#x2F;&#x2F;发布        stage(&quot;Deploy&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;发布应用&quot;,&quot;green&quot;)                                                        &#x2F;&#x2F;获取旧镜像                    yamlData &#x3D; readYaml file: &quot;k8stemplate.yaml&quot;                                        println(yamlData[0])                    println(yamlData[0][&quot;spec&quot;][&quot;template&quot;][&quot;spec&quot;][&quot;containers&quot;][0][&quot;image&quot;])                                        oldImage &#x3D; yamlData[0][&quot;spec&quot;][&quot;template&quot;][&quot;spec&quot;][&quot;containers&quot;][0][&quot;image&quot;]                                        &#x2F;&#x2F;替换镜像                    sourceData &#x3D; readFile file: &#39;k8stemplate.yaml&#39;                    println(sourceData)                    println(sourceData.getClass())                    sourceData &#x3D; sourceData.replace(oldImage,dockerImage)                    println(sourceData)                                        writeFile file: &#39;k8stemplate.yaml&#39;, text: &quot;&quot;&quot;$&#123;sourceData&#125;&quot;&quot;&quot;                                                        sh &quot;&quot;&quot;                        #cat k8stemplate.yaml                        kubectl apply -f k8stemplate.yaml                    &quot;&quot;&quot;                                        &#125;            &#125;        &#125;               &#x2F;&#x2F;接口自动化测试        stage(&quot;InterfaceTest&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;接口测试&quot;,&quot;green&quot;)                    &#125;            &#125;        &#125;    &#125;    post &#123;        always&#123;            script&#123;                println(&quot;always&quot;)            &#125;        &#125;                success&#123;            script&#123;                println(&quot;success&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;success&quot;)                &#125;                toemail.Email(&quot;流水线成功&quot;,userEmail)                        &#125;                &#125;        failure&#123;            script&#123;                println(&quot;failure&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;failed&quot;)                &#125;                toemail.Email(&quot;流水线失败了！&quot;,userEmail)            &#125;        &#125;                aborted&#123;            script&#123;                println(&quot;aborted&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;canceled&quot;)                &#125;               toemail.Email(&quot;流水线被取消了！&quot;,userEmail)            &#125;                &#125;        &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jenkins 中新建流水线</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1660120411806.png" alt="1660120411806"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java项目发布流水线</title>
      <link href="/posts/63297.html"/>
      <url>/posts/63297.html</url>
      
        <content type="html"><![CDATA[<h2 id="java-项目发布流水线"><a href="#java-项目发布流水线" class="headerlink" title="java 项目发布流水线"></a>java 项目发布流水线</h2><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1660119219391.png" alt="1660119219391"></p><ul><li><p>使用maven编译打包</p></li><li><p>使用Sonar扫描</p></li><li><p>编写Dockerfile构建镜像</p></li><li><p>自动生成K8s部署文件，替换镜像</p></li><li><p>使用Kubernetes API发布部署.（Jenkins Slave要挂载docker）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> 流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用发布流水线</title>
      <link href="/posts/51597.html"/>
      <url>/posts/51597.html</url>
      
        <content type="html"><![CDATA[<h2 id="应用发布流水线"><a href="#应用发布流水线" class="headerlink" title="应用发布流水线"></a>应用发布流水线</h2><ol><li><p>新建流水线</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1660037202367.png" alt="1660037202367"></p></li><li><p>vi deploy.jenkinsfile</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&quot;jenkinslibrary@master&quot;) _ String stackName &#x3D; &quot;$&#123;env.stackName&#125;&quot;String releaseVersion &#x3D; &quot;$&#123;env.releaseVersion&#125;&quot;def gitlab &#x3D; new org.devops.gitlab()def k8s &#x3D; new org.devops.kubernetes()pipeline&#123;   agent &#123; node &#123; label &quot;build&quot; &#125;&#125;      stages&#123;          stage(&quot;Deploy&quot;)&#123;            steps&#123;                script&#123;                                    &#x2F;&#x2F;获取版本文件                    stack &#x3D; &quot;$&#123;stackName&#125;&quot;.toLowerCase()                    response &#x3D; gitlab.GetRepoFile(7,&quot;demo-$&#123;stack&#125;%2f$&#123;releaseVersion&#125;-$&#123;stack&#125;.yaml&quot;)                    &#x2F;&#x2F;发布应用                    k8s.UpdateDeployment(&quot;demo-$&#123;stack&#125;&quot;,&quot;demoapp&quot;,response)                 &#125;             &#125;       &#125;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> 流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制品晋级流水线</title>
      <link href="/posts/10831.html"/>
      <url>/posts/10831.html</url>
      
        <content type="html"><![CDATA[<h2 id="制品晋级流水线"><a href="#制品晋级流水线" class="headerlink" title="制品晋级流水线"></a>制品晋级流水线</h2><ol><li>jenkins中新建流水线</li></ol><p>   <img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1660036214697.png" alt="1660036214697"></p><ol start="2"><li>vi newupdate.jenkinsfile</li></ol><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token shebang comment">#!groovy </span><span class="token annotation punctuation">@Library</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"jenkinslibrary@master"</span></span><span class="token punctuation">)</span> <span class="token number">_</span> String updateType <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">env<span class="token punctuation">.</span>updateType</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>String releaseVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">env<span class="token punctuation">.</span>releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">def</span> tools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>devops<span class="token punctuation">.</span>tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> gitlab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>devops<span class="token punctuation">.</span>gitlab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> k8s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>devops<span class="token punctuation">.</span>kubernetes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pipeline<span class="token punctuation">&#123;</span>    agent <span class="token punctuation">&#123;</span> node <span class="token punctuation">&#123;</span> label <span class="token interpolation-string"><span class="token string">"build"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        stages<span class="token punctuation">&#123;</span>        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"UAT->STAG"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            when <span class="token punctuation">&#123;</span>                environment name<span class="token punctuation">:</span> <span class="token string">'updateType'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'UAT -> STAG'</span>             <span class="token punctuation">&#125;</span>                        steps <span class="token punctuation">&#123;</span>                script<span class="token punctuation">&#123;</span>                   tools<span class="token punctuation">.</span><span class="token function">PrintMes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"UAT -> STAG"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"green"</span></span><span class="token punctuation">)</span>                                      <span class="token comment">//获取UAT文件中的images</span>                                       response <span class="token operator">=</span> gitlab<span class="token punctuation">.</span><span class="token function">GetRepoFile</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demo-uat%2f</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-uat.yaml"</span></span><span class="token punctuation">)</span>                    fileData <span class="token operator">=</span> readYaml text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>                    uatImage <span class="token operator">=</span> fileData<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"template"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"containers"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"image"</span></span><span class="token punctuation">]</span>                    tools<span class="token punctuation">.</span><span class="token function">PrintMes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"UAT IMAGES --> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">uatImage</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"green"</span></span><span class="token punctuation">)</span>                   <span class="token comment">//获取最新STAG环境的deployment</span>                    stagResponse <span class="token operator">=</span> k8s<span class="token punctuation">.</span><span class="token function">GetDeployment</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"demo-stag"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demoapp"</span></span><span class="token punctuation">)</span>                    stagResponse <span class="token operator">=</span> stagResponse<span class="token punctuation">.</span>content                                        <span class="token comment">//获取镜像和version</span>                    stagfileData <span class="token operator">=</span> readYaml text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">stagResponse</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>                    stagOldImage <span class="token operator">=</span> stagfileData<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"template"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"containers"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"image"</span></span><span class="token punctuation">]</span>                    stagOldVersion <span class="token operator">=</span> stagfileData<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"metadata"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"resourceVersion"</span></span><span class="token punctuation">]</span>                                        <span class="token comment">//更新镜像和version</span>                    tools<span class="token punctuation">.</span><span class="token function">PrintMes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"STAG OLD IMAGES --> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">stagOldImage</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"green"</span></span><span class="token punctuation">)</span>                    stagResponse <span class="token operator">=</span> stagResponse<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>stagOldImage<span class="token punctuation">,</span>uatImage<span class="token punctuation">)</span>                    stagResponse <span class="token operator">=</span> stagResponse<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>stagOldVersion<span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">""</span></span><span class="token punctuation">)</span>                    <span class="token comment">//生成最新的STAG版本文件</span>                    <span class="token comment">//文件转换</span>                    base64Content <span class="token operator">=</span> stagResponse<span class="token punctuation">.</span>bytes<span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//上传文件</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        gitlab<span class="token punctuation">.</span><span class="token function">CreateRepoFile</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demo-stag%2f</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-stag.yaml"</span></span><span class="token punctuation">,</span>base64Content<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        gitlab<span class="token punctuation">.</span><span class="token function">UpdateRepoFile</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demo-stag%2f</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-stag.yaml"</span></span><span class="token punctuation">,</span>base64Content<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"STAG->PROD"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            when <span class="token punctuation">&#123;</span>                environment name<span class="token punctuation">:</span> <span class="token string">'updateType'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'STAG -> PROD'</span>             <span class="token punctuation">&#125;</span>                        steps <span class="token punctuation">&#123;</span>                script<span class="token punctuation">&#123;</span>                   tools<span class="token punctuation">.</span><span class="token function">PrintMes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"STAG -> PROD"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"green"</span></span><span class="token punctuation">)</span>                                      <span class="token comment">//获取STAG文件中的images</span>                                       response <span class="token operator">=</span> gitlab<span class="token punctuation">.</span><span class="token function">GetRepoFile</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demo-stag%2f</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-stag.yaml"</span></span><span class="token punctuation">)</span>                    fileData <span class="token operator">=</span> readYaml text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>                    stagImage <span class="token operator">=</span> fileData<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"template"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"containers"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"image"</span></span><span class="token punctuation">]</span>                    tools<span class="token punctuation">.</span><span class="token function">PrintMes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"STAG IMAGES --> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">stagImage</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"green"</span></span><span class="token punctuation">)</span>                   <span class="token comment">//获取最新PROD环境的deployment</span>                    prodResponse <span class="token operator">=</span> k8s<span class="token punctuation">.</span><span class="token function">GetDeployment</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"demo-prod"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demoapp"</span></span><span class="token punctuation">)</span>                    prodResponse <span class="token operator">=</span> prodResponse<span class="token punctuation">.</span>content                                        <span class="token comment">//获取镜像和version</span>                    prodfileData <span class="token operator">=</span> readYaml text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">prodResponse</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>                    prodOldImage <span class="token operator">=</span> prodfileData<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"template"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"spec"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"containers"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"image"</span></span><span class="token punctuation">]</span>                    prodOldVersion <span class="token operator">=</span> prodfileData<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"metadata"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"resourceVersion"</span></span><span class="token punctuation">]</span>                                        <span class="token comment">//更新镜像和version</span>                    tools<span class="token punctuation">.</span><span class="token function">PrintMes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"PROD OLD IMAGES --> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">prodOldImage</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"green"</span></span><span class="token punctuation">)</span>                    prodResponse <span class="token operator">=</span> prodResponse<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>prodOldImage<span class="token punctuation">,</span>stagImage<span class="token punctuation">)</span>                    prodResponse <span class="token operator">=</span> prodResponse<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>prodOldVersion<span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">""</span></span><span class="token punctuation">)</span>                    <span class="token comment">//生成最新的PROD版本文件</span>                    <span class="token comment">//文件转换</span>                    base64Content <span class="token operator">=</span> prodResponse<span class="token punctuation">.</span>bytes<span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//上传文件</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        gitlab<span class="token punctuation">.</span><span class="token function">CreateRepoFile</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demo-prod%2f</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-prod.yaml"</span></span><span class="token punctuation">,</span>base64Content<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        gitlab<span class="token punctuation">.</span><span class="token function">UpdateRepoFile</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"demo-prod%2f</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">releaseVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-prod.yaml"</span></span><span class="token punctuation">,</span>base64Content<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> 流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享库文件</title>
      <link href="/posts/47733.html"/>
      <url>/posts/47733.html</url>
      
        <content type="html"><![CDATA[<h1 id="artifactory-groovy"><a href="#artifactory-groovy" class="headerlink" title="artifactory.groovy"></a>artifactory.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//Maven打包构建</span><span class="token keyword">def</span> <span class="token function">MavenBuild</span><span class="token punctuation">(</span>buildShell<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> server <span class="token operator">=</span> Artifactory<span class="token punctuation">.</span>newServer url<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"http://192.168.1.200:30082/artifactory"</span></span>    <span class="token keyword">def</span> rtMaven <span class="token operator">=</span> Artifactory<span class="token punctuation">.</span><span class="token function">newMavenBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> buildInfo    server<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">300</span>    server<span class="token punctuation">.</span>credentialsId <span class="token operator">=</span> <span class="token string">'artifactory-admin-user'</span>     <span class="token comment">//maven打包</span>    rtMaven<span class="token punctuation">.</span>tool <span class="token operator">=</span> <span class="token string">'M2'</span>     buildInfo <span class="token operator">=</span> Artifactory<span class="token punctuation">.</span><span class="token function">newBuildInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    String newBuildShell <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">buildShell</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>newBuildShell<span class="token punctuation">)</span>    rtMaven<span class="token punctuation">.</span>run pom<span class="token punctuation">:</span> <span class="token string">'pom.xml'</span><span class="token punctuation">,</span> goals<span class="token punctuation">:</span> newBuildShell<span class="token punctuation">,</span> buildInfo<span class="token punctuation">:</span> buildInfo    <span class="token comment">//上传build信息</span>    server<span class="token punctuation">.</span>publishBuildInfo buildInfo<span class="token punctuation">&#125;</span><span class="token comment">//上传制品</span><span class="token keyword">def</span> <span class="token function">PushArtifact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//重命名制品</span>    <span class="token keyword">def</span> jarName <span class="token operator">=</span> sh returnStdout<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> script<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"cd target;ls *.jar"</span></span>    jarName <span class="token operator">=</span> jarName <span class="token operator">-</span> <span class="token interpolation-string"><span class="token string">"\n"</span></span>    <span class="token keyword">def</span> pom <span class="token operator">=</span> readMavenPom file<span class="token punctuation">:</span> <span class="token string">'pom.xml'</span>    env<span class="token punctuation">.</span>pomVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pom<span class="token punctuation">.</span>version</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    env<span class="token punctuation">.</span>serviceName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">JOB_NAME</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"_"</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    env<span class="token punctuation">.</span>buildTag <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">BUILD_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">def</span> newJarName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">serviceName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">buildTag</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jar"</span></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">  ------->>> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">newJarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    sh <span class="token interpolation-string"><span class="token string">" mv target/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">  target/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">newJarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token comment">//上传制品</span>    env<span class="token punctuation">.</span>businessName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">env<span class="token punctuation">.</span>JOB_NAME</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"-"</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    env<span class="token punctuation">.</span>repoName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">businessName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-$&#123;JOB_NAME.split("</span></span><span class="token number">_</span><span class="token interpolation-string"><span class="token string">")[-1].toLowerCase()&#125;"</span></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"本次制品将要上传到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">repoName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">仓库中!"</span></span><span class="token punctuation">)</span>       env<span class="token punctuation">.</span>uploadDir <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">repoName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">businessName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">serviceName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'上传制品'</span><span class="token punctuation">)</span>    rtUpload <span class="token punctuation">(</span>        serverId<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"artifactory"</span></span><span class="token punctuation">,</span>        spec<span class="token punctuation">:</span>            <span class="token interpolation-string"><span class="token string">"""&#123;            "files": [                &#123;                "pattern": "target/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">newJarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">",                "target": "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">uploadDir</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/"                &#125;            ]            &#125;"""</span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>buildType<span class="token punctuation">,</span>buildShell<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>buildType <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">"mvn"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">MavenBuild</span><span class="token punctuation">(</span>buildShell<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="build-groovy"><a href="#build-groovy" class="headerlink" title="build.groovy"></a>build.groovy</h1><pre class="line-numbers language-none"><code class="language-none">package org.devops&#x2F;&#x2F;构建类型def Build(buildType,buildShell)&#123;    def buildTools &#x3D; [&quot;mvn&quot;:&quot;M2&quot;,&quot;ant&quot;:&quot;ANT&quot;,&quot;gradle&quot;:&quot;GRADLE&quot;,&quot;npm&quot;:&quot;NPM&quot;]            println(&quot;当前选择的构建类型为 $&#123;buildType&#125;&quot;)    buildHome&#x3D; tool buildTools[buildType]        if (&quot;$&#123;buildType&#125;&quot; &#x3D;&#x3D; &quot;npm&quot;)&#123;                sh  &quot;&quot;&quot;             export NODE_HOME&#x3D;$&#123;buildHome&#125;             export PATH&#x3D;\$NODE_HOME&#x2F;bin:\$PATH             $&#123;buildHome&#125;&#x2F;bin&#x2F;$&#123;buildType&#125; $&#123;buildShell&#125;&quot;&quot;&quot;    &#125; else &#123;        sh &quot;$&#123;buildHome&#125;&#x2F;bin&#x2F;$&#123;buildType&#125;  $&#123;buildShell&#125;&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="deploy-groovy"><a href="#deploy-groovy" class="headerlink" title="deploy.groovy"></a>deploy.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops <span class="token comment">//saltstack</span><span class="token keyword">def</span> <span class="token function">SaltDeploy</span><span class="token punctuation">(</span>hosts<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sh <span class="token interpolation-string"><span class="token string">" salt \"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">hosts</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\" </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">func</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">&#125;</span><span class="token comment">//ansible</span><span class="token keyword">def</span> <span class="token function">AnsibleDeploy</span><span class="token punctuation">(</span>hosts<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sh <span class="token interpolation-string"><span class="token string">" ansible </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">func</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">hosts</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="gitlab-groovy"><a href="#gitlab-groovy" class="headerlink" title="gitlab.groovy"></a>gitlab.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//封装HTTP请求</span><span class="token keyword">def</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span>reqType<span class="token punctuation">,</span>reqUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> gitServer <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"http://gitlab.idevops.site/api/v4"</span></span>    <span class="token function">withCredentials</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>credentialsId<span class="token punctuation">:</span> <span class="token string">'gitlab-token'</span><span class="token punctuation">,</span> variable<span class="token punctuation">:</span> <span class="token string">'gitlabToken'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> httpRequest customHeaders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>maskValue<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'PRIVATE-TOKEN'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">gitlabToken</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 httpMode<span class="token punctuation">:</span> reqType<span class="token punctuation">,</span>                 contentType<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"APPLICATION_JSON"</span></span><span class="token punctuation">,</span>                consoleLogResponseBody<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                ignoreSslErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 requestBody<span class="token punctuation">:</span> reqBody<span class="token punctuation">,</span>                url<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">gitServer</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">reqUrl</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>                <span class="token comment">//quiet: true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//更新文件内容</span><span class="token keyword">def</span> <span class="token function">UpdateRepoFile</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>filePath<span class="token punctuation">,</span>fileContent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/repository/files/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">filePath</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    reqBody <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"""&#123;"branch": "master","encoding":"base64", "content": "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">fileContent</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">", "commit_message": "update a new file"&#125;"""</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'PUT'</span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//获取文件内容</span><span class="token keyword">def</span> <span class="token function">GetRepoFile</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>filePath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/repository/files/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">filePath</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/raw?ref=master"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token comment">//创建仓库文件</span><span class="token keyword">def</span> <span class="token function">CreateRepoFile</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>filePath<span class="token punctuation">,</span>fileContent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/repository/files/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">filePath</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    reqBody <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"""&#123;"branch": "master","encoding":"base64", "content": "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">fileContent</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">", "commit_message": "create a new file"&#125;"""</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//更改提交状态</span><span class="token keyword">def</span> <span class="token function">ChangeCommitStatus</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>commitSha<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    commitApi <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/statuses/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">commitSha</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?state=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">status</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span>commitApi<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">&#125;</span><span class="token comment">//获取项目ID</span><span class="token keyword">def</span> <span class="token function">GetProjectID</span><span class="token punctuation">(</span>repoName<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>projectName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    projectApi <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects?search=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>projectApi<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> result <span class="token operator">=</span> readJSON text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>repo <span class="token keyword">in</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// println(repo['path_with_namespace'])</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>repo<span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        repoId <span class="token operator">=</span> repo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>            <span class="token function">println</span><span class="token punctuation">(</span>repoId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> repoId<span class="token punctuation">&#125;</span><span class="token comment">//删除分支</span><span class="token keyword">def</span> <span class="token function">DeleteBranch</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>branchName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"/projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/repository/branches/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">branchName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"DELETE"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//创建分支</span><span class="token keyword">def</span> <span class="token function">CreateBranch</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>refBranch<span class="token punctuation">,</span>newBranch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        branchApi <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/repository/branches?branch=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">newBranch</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;ref=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">refBranch</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"POST"</span></span><span class="token punctuation">,</span>branchApi<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content        branchInfo <span class="token operator">=</span> readJSON text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//println(branchInfo)</span><span class="token punctuation">&#125;</span><span class="token comment">//创建合并请求</span><span class="token keyword">def</span> <span class="token function">CreateMr</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>sourceBranch<span class="token punctuation">,</span>targetBranch<span class="token punctuation">,</span>title<span class="token punctuation">,</span>assigneeUser<span class="token operator">=</span><span class="token interpolation-string"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">def</span> mrUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/merge_requests"</span></span>        <span class="token keyword">def</span> reqBody <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"""&#123;"source_branch":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">sourceBranch</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">", "target_branch": "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">targetBranch</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">","title":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">title</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">","assignee_id":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">assigneeUser</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"&#125;"""</span></span>        response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"POST"</span></span><span class="token punctuation">,</span>mrUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token keyword">return</span> response    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//搜索分支</span><span class="token keyword">def</span> <span class="token function">SearchProjectBranches</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>searchKey<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> branchUrl <span class="token operator">=</span>  <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/repository/branches?search=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">searchKey</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"GET"</span></span><span class="token punctuation">,</span>branchUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">def</span> branchInfo <span class="token operator">=</span> readJSON text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>        <span class="token keyword">def</span> branches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    branches<span class="token punctuation">[</span>projectId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>branchInfo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> branches    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>branch <span class="token keyword">in</span> branchInfo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//println(branch)</span>            branches<span class="token punctuation">[</span>projectId<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"branchName"</span></span><span class="token punctuation">:</span>branch<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"name"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                    <span class="token interpolation-string"><span class="token string">"commitMes"</span></span><span class="token punctuation">:</span>branch<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"commit"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"message"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                    <span class="token interpolation-string"><span class="token string">"commitId"</span></span><span class="token punctuation">:</span>branch<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"commit"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"id"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                    <span class="token interpolation-string"><span class="token string">"merged"</span></span><span class="token punctuation">:</span> branch<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"merged"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                    <span class="token interpolation-string"><span class="token string">"createTime"</span></span><span class="token punctuation">:</span> branch<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"commit"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"created_at"</span></span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> branches    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//允许合并</span><span class="token keyword">def</span> <span class="token function">AcceptMr</span><span class="token punctuation">(</span>projectId<span class="token punctuation">,</span>mergeId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/merge_requests/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">mergeId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/merge"</span></span>    <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'PUT'</span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="influxdb-groovy"><a href="#influxdb-groovy" class="headerlink" title="influxdb.groovy"></a>influxdb.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops <span class="token comment">//创建数据库</span><span class="token keyword">def</span> <span class="token function">CreateDb</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   sh <span class="token interpolation-string"><span class="token string">"""      curl -XPOST 'http://192.168.1.200:30086/query' --data-urlencode 'q=CREATE DATABASE \"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">dbName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\"'"      """</span></span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">WriteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    measurementName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">JOB_NAME</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"-"</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    SERVICE_NAME <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">JOB_NAME</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    BUILD_AGENT <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"master"</span></span>    BUILD_RESULT <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"SUCCESS"</span></span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"FAILURE"</span></span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">currentBuild<span class="token punctuation">.</span>currentResult</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span>    <span class="token comment">/*wrap([$class: 'BuildUser'])&#123;        currentBuild.description = "Trigger By $&#123;$BUILD_USER&#125;"    &#125;*/</span>            httpRequest httpMode<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>             requestBody<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">measurementName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,build_number=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">BUILD_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,build_agent_name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">BUILD_AGENT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> project_name=\"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">SERVICE_NAME</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\",build_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">BUILD_ID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,build_time=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">currentBuild<span class="token punctuation">.</span>duration</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,build_result=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">BUILD_RESULT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,build_desc=\"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">currentBuild<span class="token punctuation">.</span>description</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\",tests_passed=10,tests_failed=2,tests_skipped=3 1434055564000000000"""</span></span><span class="token punctuation">,</span>             url<span class="token punctuation">:</span> <span class="token string">'http://192.168.1.200:30086/write?db=jenkins'</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="interfacetest-groovy"><a href="#interfacetest-groovy" class="headerlink" title="interfacetest.groovy"></a>interfacetest.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//运行测试</span><span class="token keyword">def</span> <span class="token function">RunTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    antHome <span class="token operator">=</span> tool <span class="token interpolation-string"><span class="token string">"ANT"</span></span>    sh <span class="token interpolation-string"><span class="token string">" </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">antHome</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/bin/ant -f build.xml "</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="jenkinsapi-groovy"><a href="#jenkinsapi-groovy" class="headerlink" title="jenkinsapi.groovy"></a>jenkinsapi.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//封装HTTP请求</span><span class="token keyword">def</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span>reqType<span class="token punctuation">,</span>reqUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> jenkinsServer <span class="token operator">=</span> <span class="token string">'http://192.168.1.200:30080'</span>    result <span class="token operator">=</span> httpRequest authentication<span class="token punctuation">:</span> <span class="token string">'jenkins-zeyang-admin'</span><span class="token punctuation">,</span>                        httpMode<span class="token punctuation">:</span> reqType<span class="token punctuation">,</span>                        consoleLogResponseBody<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        ignoreSslErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                         requestBody<span class="token punctuation">:</span> reqBody<span class="token punctuation">,</span>                        url<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jenkinsServer</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">reqUrl</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>                        <span class="token comment">//quiet: true</span>                        <span class="token punctuation">&#125;</span><span class="token comment">//新建项目</span><span class="token keyword">def</span> <span class="token function">CreateProject</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">withCredentials</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">usernamePassword</span><span class="token punctuation">(</span>credentialsId<span class="token punctuation">:</span> <span class="token string">'jenkins-zeyang-admin'</span><span class="token punctuation">,</span> passwordVariable<span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span> usernameVariable<span class="token punctuation">:</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               sh <span class="token interpolation-string"><span class="token string">"""                   curl -u </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">username</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">password</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -X GET 'http://192.168.1.200:30080/job/demo-project-manage/config.xml' -o config.xml           ls -l                   curl -u </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">username</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">password</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -X POST 'http://192.168.1.200:30080/createItem?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">' -H 'Content-Type:text/xml' --data-binary @config.xml                """</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//禁用项目</span><span class="token keyword">def</span> <span class="token function">Project</span><span class="token punctuation">(</span>projectName<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>        options <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token interpolation-string"><span class="token string">"DisableProject"</span></span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"disable"</span></span><span class="token punctuation">,</span>                <span class="token interpolation-string"><span class="token string">"EnableProject"</span></span><span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">"enable"</span></span><span class="token punctuation">,</span>                <span class="token interpolation-string"><span class="token string">"DeleteProject"</span></span><span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">"doDelete"</span></span><span class="token punctuation">,</span>                <span class="token interpolation-string"><span class="token string">"BuildProject"</span></span><span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">"build"</span></span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"job/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">options<span class="token punctuation">[</span>option<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="jira-groovy"><a href="#jira-groovy" class="headerlink" title="jira.groovy"></a>jira.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//封装HTTP请求</span><span class="token keyword">def</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span>reqType<span class="token punctuation">,</span>reqUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> apiServer <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"http://192.168.1.200:8050/rest/api/2"</span></span>      result <span class="token operator">=</span> httpRequest authentication<span class="token punctuation">:</span> <span class="token string">'jira-admin-user'</span><span class="token punctuation">,</span>            httpMode<span class="token punctuation">:</span> reqType<span class="token punctuation">,</span>             contentType<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"APPLICATION_JSON"</span></span><span class="token punctuation">,</span>            consoleLogResponseBody<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            ignoreSslErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             requestBody<span class="token punctuation">:</span> reqBody<span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">apiServer</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">reqUrl</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>            <span class="token comment">//quiet: true</span>    <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//执行JQL</span><span class="token keyword">def</span> <span class="token function">RunJql</span><span class="token punctuation">(</span>jqlContent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"search?jql=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jqlContent</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"GET"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="kubernetes-groovy"><a href="#kubernetes-groovy" class="headerlink" title="kubernetes.groovy"></a>kubernetes.groovy</h1><pre class="line-numbers language-none"><code class="language-none">package org.devops&#x2F;&#x2F;封装HTTP请求def HttpReq(reqType,reqUrl,reqBody)&#123;    def apiServer &#x3D; &quot;https:&#x2F;&#x2F;192.168.1.200:6443&#x2F;apis&#x2F;apps&#x2F;v1&quot;    withCredentials([string(credentialsId: &#39;kubernetes-token&#39;, variable: &#39;kubernetestoken&#39;)]) &#123;      result &#x3D; httpRequest customHeaders: [[maskValue: true, name: &#39;Authorization&#39;, value: &quot;Bearer $&#123;kubernetestoken&#125;&quot;],                                           [maskValue: false, name: &#39;Content-Type&#39;, value: &#39;application&#x2F;yaml&#39;],                                            [maskValue: false, name: &#39;Accept&#39;, value: &#39;application&#x2F;yaml&#39;]],                 httpMode: reqType,                 consoleLogResponseBody: true,                ignoreSslErrors: true,                 requestBody: reqBody,                url: &quot;$&#123;apiServer&#125;&#x2F;$&#123;reqUrl&#125;&quot;                &#x2F;&#x2F;quiet: true    &#125;    return result&#125;&#x2F;&#x2F;新建Deploymentdef CreateDeployment(nameSpace,deployName,deplyBody)&#123;    apiUrl &#x3D; &quot;namespaces&#x2F;$&#123;nameSpace&#125;&#x2F;deployments&#x2F;&quot;    response &#x3D; HttpReq(&#39;POST&#39;,apiUrl,deplyBody)    println(response)&#125;&#x2F;&#x2F;删除deploymentdef DeleteDeployment(nameSpace,deployName)&#123;    apiUrl &#x3D; &quot;namespaces&#x2F;$&#123;nameSpace&#125;&#x2F;deployments&#x2F;$&#123;deployName&#125;&quot;    response &#x3D; HttpReq(&#39;DELETE&#39;,apiUrl,deplyBody)    println(response)&#125;&#x2F;&#x2F;更新Deploymentdef UpdateDeployment(nameSpace,deployName,deplyBody)&#123;    apiUrl &#x3D; &quot;namespaces&#x2F;$&#123;nameSpace&#125;&#x2F;deployments&#x2F;$&#123;deployName&#125;&quot;    response &#x3D; HttpReq(&#39;PUT&#39;,apiUrl,deplyBody)    println(response)&#125;&#x2F;&#x2F;获取Deploymentdef GetDeployment(nameSpace,deployName)&#123;    apiUrl &#x3D; &quot;namespaces&#x2F;$&#123;nameSpace&#125;&#x2F;deployments&#x2F;$&#123;deployName&#125;&quot;    response &#x3D; HttpReq(&#39;GET&#39;,apiUrl,&#39;&#39;)    return response&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nexus-groovy"><a href="#nexus-groovy" class="headerlink" title="nexus.groovy"></a>nexus.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">pakcage org<span class="token punctuation">.</span>devops<span class="token comment">//获取POM中的坐标</span><span class="token keyword">def</span> <span class="token function">GetGav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//上传制品</span>    <span class="token keyword">def</span> jarName <span class="token operator">=</span> sh returnStdout<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> script<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"cd target;ls *.jar"</span></span>    env<span class="token punctuation">.</span>jarName <span class="token operator">=</span> jarName <span class="token operator">-</span> <span class="token interpolation-string"><span class="token string">"\n"</span></span>        <span class="token keyword">def</span> pom <span class="token operator">=</span> readMavenPom file<span class="token punctuation">:</span> <span class="token string">'pom.xml'</span>    env<span class="token punctuation">.</span>pomVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pom<span class="token punctuation">.</span>version</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    env<span class="token punctuation">.</span>pomArtifact <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pom<span class="token punctuation">.</span>artifactId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    env<span class="token punctuation">.</span>pomPackaging <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pom<span class="token punctuation">.</span>packaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    env<span class="token punctuation">.</span>pomGroupId <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pom<span class="token punctuation">.</span>groupId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomGroupId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomArtifact</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomPackaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomGroupId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomArtifact</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomPackaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">//Nexus plugin deploy</span><span class="token keyword">def</span> <span class="token function">NexusUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//use nexus plugin</span>    nexusArtifactUploader artifacts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>artifactId<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomArtifact</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>                                         classifier<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                                         file<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">filePath</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>                                         type<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomPackaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                             credentialsId<span class="token punctuation">:</span> <span class="token string">'nexus-admin-user'</span><span class="token punctuation">,</span>                             groupId<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomGroupId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>                             nexusUrl<span class="token punctuation">:</span> <span class="token string">'192.168.1.200:30083'</span><span class="token punctuation">,</span>                             nexusVersion<span class="token punctuation">:</span> <span class="token string">'nexus3'</span><span class="token punctuation">,</span>                             protocol<span class="token punctuation">:</span> <span class="token string">'http'</span><span class="token punctuation">,</span>                             repository<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">repoName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>                             version<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span><span class="token comment">//mvn deploy</span><span class="token keyword">def</span> <span class="token function">MavenUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">def</span> mvnHome <span class="token operator">=</span> tool <span class="token interpolation-string"><span class="token string">"M2"</span></span>    sh  <span class="token interpolation-string"><span class="token string">"""         cd target/        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">mvnHome</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/bin/mvn deploy:deploy-file -Dmaven.test.skip=true  \                                -Dfile=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -DgroupId=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomGroupId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> \                                -DartifactId=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomArtifact</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -Dversion=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">  \                                -Dpackaging=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomPackaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -DrepositoryId=maven-hostd \                                -Durl=http://192.168.1.200:30083/repository/maven-hostd         """</span></span><span class="token punctuation">&#125;</span><span class="token comment">//制品晋级</span><span class="token keyword">def</span> <span class="token function">ArtifactUpdate</span><span class="token punctuation">(</span>updateType<span class="token punctuation">,</span>artifactUrl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//晋级策略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">updateType</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">"snapshot -> release"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"snapshot -> release"</span></span><span class="token punctuation">)</span>        <span class="token comment">//下载原始制品</span>        sh <span class="token interpolation-string"><span class="token string">"  rm -fr updates &amp;&amp; mkdir updates &amp;&amp; cd updates &amp;&amp; wget </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">artifactUrl</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &amp;&amp; ls -l "</span></span>        <span class="token comment">//获取artifactID </span>                artifactUrl <span class="token operator">=</span> artifactUrl <span class="token operator">-</span>  <span class="token interpolation-string"><span class="token string">"http://192.168.1.200:30083/repository/maven-hostd/"</span></span>        artifactUrl <span class="token operator">=</span> artifactUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"/"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">println</span><span class="token punctuation">(</span>artifactUrl<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        env<span class="token punctuation">.</span>jarName <span class="token operator">=</span> artifactUrl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         env<span class="token punctuation">.</span>pomVersion <span class="token operator">=</span> artifactUrl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"SNAPSHOT"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"RELEASE"</span></span><span class="token punctuation">)</span>        env<span class="token punctuation">.</span>pomArtifact <span class="token operator">=</span> artifactUrl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>        pomPackaging <span class="token operator">=</span> artifactUrl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        pomPackaging <span class="token operator">=</span> pomPackaging<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"\\."</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        env<span class="token punctuation">.</span>pomPackaging <span class="token operator">=</span> pomPackaging<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        env<span class="token punctuation">.</span>pomGroupId <span class="token operator">=</span> artifactUrl<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"."</span></span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomGroupId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">##</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomArtifact</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">##</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">##</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomPackaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        env<span class="token punctuation">.</span>newJarName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomArtifact</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomVersion</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">pomPackaging</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>                <span class="token comment">//更改名称</span>        sh <span class="token interpolation-string"><span class="token string">" cd updates &amp;&amp; mv </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">newJarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span>                <span class="token comment">//上传制品</span>        env<span class="token punctuation">.</span>repoName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"maven-release"</span></span>        env<span class="token punctuation">.</span>filePath <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"updates/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">newJarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token function">NexusUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>uploadType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">GetGav</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">uploadType</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">"maven"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">MavenUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">uploadType</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">"nexus"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        env<span class="token punctuation">.</span>repoName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"maven-hostd"</span></span>        env<span class="token punctuation">.</span>filePath <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"target/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">jarName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token function">NexusUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nexusapi-groovy"><a href="#nexusapi-groovy" class="headerlink" title="nexusapi.groovy"></a>nexusapi.groovy</h1><pre class="line-numbers language-none"><code class="language-none">package org.devops&#x2F;&#x2F;封装HTTPdef HttpReq(reqType,reqUrl,reqBody)&#123;    def sonarServer &#x3D; &quot;http:&#x2F;&#x2F;192.168.1.200:30083&#x2F;service&#x2F;rest&quot;       result &#x3D; httpRequest authentication: &#39;nexus-admin-user&#39;,            httpMode: reqType,             contentType: &quot;APPLICATION_JSON&quot;,            consoleLogResponseBody: true,            ignoreSslErrors: true,             requestBody: reqBody,            url: &quot;$&#123;sonarServer&#125;&#x2F;$&#123;reqUrl&#125;&quot;,            quiet: true        return result&#125;&#x2F;&#x2F;获取仓库中所有组件def GetRepoComponents(repoName)&#123;    apiUrl &#x3D; &quot;&#x2F;v1&#x2F;components?repository&#x3D;$&#123;repoName&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;    println(response[&quot;items&quot;].size())        return response[&quot;items&quot;]&#125;&#x2F;&#x2F;获取单件组件def GetComponentsId(repoName,groupId,artifactId,version)&#123;    println(&quot;获取单件组件ID&quot;)    result &#x3D; GetRepoComponents(repoName)         for (component in result)&#123;                if (component[&quot;group&quot;] &#x3D;&#x3D; groupId &amp;&amp; component[&quot;name&quot;] &#x3D;&#x3D; artifactId &amp;&amp; component[&quot;version&quot;] &#x3D;&#x3D; version  )&#123;                        componentId &#x3D; component[&quot;id&quot;]                        return componentId        &#125;    &#125;        println(componentId)&#125;&#x2F;&#x2F;获取组件信息def GetSingleComponents(repoName,groupId,artifactId,version)&#123;    println(&quot;获取单件组件信息&quot;)    componentId &#x3D; GetComponentsId(repoName,groupId,artifactId,version)    apiUrl &#x3D; &quot;&#x2F;v1&#x2F;components&#x2F;$&#123;componentId&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;    println(response[&quot;assets&quot;][&quot;downloadUrl&quot;])&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="sonarapi-groovy"><a href="#sonarapi-groovy" class="headerlink" title="sonarapi.groovy"></a>sonarapi.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//封装HTTP</span><span class="token keyword">def</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span>reqType<span class="token punctuation">,</span>reqUrl<span class="token punctuation">,</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> sonarServer <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"http://192.168.1.200:30090/api"</span></span>       result <span class="token operator">=</span> httpRequest authentication<span class="token punctuation">:</span> <span class="token string">'sonar-admin-user'</span><span class="token punctuation">,</span>            httpMode<span class="token punctuation">:</span> reqType<span class="token punctuation">,</span>             contentType<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"APPLICATION_JSON"</span></span><span class="token punctuation">,</span>            consoleLogResponseBody<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            ignoreSslErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             requestBody<span class="token punctuation">:</span> reqBody<span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">sonarServer</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">reqUrl</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>            <span class="token comment">//quiet: true</span>        <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//获取Sonar质量阈状态</span><span class="token keyword">def</span> <span class="token function">GetProjectStatus</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"project_branches/list?project=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"GET"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> readJSON text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>    result <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"branches"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"status"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"qualityGateStatus"</span></span><span class="token punctuation">]</span>        <span class="token comment">//println(response)</span>       <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//搜索Sonar项目</span><span class="token keyword">def</span> <span class="token function">SerarchProject</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"projects/search?projects=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"GET"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> readJSON text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>    result <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"paging"</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"total"</span></span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">"0"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">"false"</span></span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">"true"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建Sonar项目</span><span class="token keyword">def</span> <span class="token function">CreateProject</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span>  <span class="token interpolation-string"><span class="token string">"projects/create?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;project=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"POST"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//配置项目质量规则</span><span class="token keyword">def</span> <span class="token function">ConfigQualityProfiles</span><span class="token punctuation">(</span>projectName<span class="token punctuation">,</span>lang<span class="token punctuation">,</span>qpname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"qualityprofiles/add_project?language=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">lang</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;project=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;qualityProfile=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">qpname</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"POST"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//获取质量阈ID</span><span class="token keyword">def</span> <span class="token function">GetQualtyGateId</span><span class="token punctuation">(</span>gateName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    apiUrl<span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"qualitygates/show?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">gateName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"GET"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> readJSON text<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"""</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">response<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"""</span></span>    result <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"id"</span></span><span class="token punctuation">]</span>        <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//配置项目质量阈</span><span class="token keyword">def</span> <span class="token function">ConfigQualityGates</span><span class="token punctuation">(</span>projectName<span class="token punctuation">,</span>gateName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    gateId <span class="token operator">=</span> <span class="token function">GetQualtyGateId</span><span class="token punctuation">(</span>gateName<span class="token punctuation">)</span>    apiUrl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"qualitygates/select?gateId=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">gateId</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;projectKey=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    response <span class="token operator">=</span> <span class="token function">HttpReq</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"POST"</span></span><span class="token punctuation">,</span>apiUrl<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="sonarqube-groovy"><a href="#sonarqube-groovy" class="headerlink" title="sonarqube.groovy"></a>sonarqube.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//scan</span><span class="token keyword">def</span> <span class="token function">SonarScan</span><span class="token punctuation">(</span>sonarServer<span class="token punctuation">,</span>projectName<span class="token punctuation">,</span>projectDesc<span class="token punctuation">,</span>projectPath<span class="token punctuation">,</span>branchName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//定义服务器列表</span>    <span class="token keyword">def</span> servers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">"test"</span></span><span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">"sonarqube-test"</span></span><span class="token punctuation">,</span><span class="token interpolation-string"><span class="token string">"prod"</span></span><span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">"sonarqube-prod"</span></span><span class="token punctuation">]</span>            <span class="token function">withSonarQubeEnv</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">servers<span class="token punctuation">[</span>sonarServer<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">def</span> scannerHome <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"/home/jenkins/buildtools/sonar-scanner-3.2.0.1227-linux/"</span></span>        <span class="token comment">//def sonarServer = "http://192.168.1.200:9000"</span>        <span class="token keyword">def</span> sonarDate <span class="token operator">=</span> sh  returnStdout<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> script<span class="token punctuation">:</span> <span class="token string">'date  +%Y%m%d%H%M%S'</span>        sonarDate <span class="token operator">=</span> sonarDate <span class="token operator">-</span> <span class="token interpolation-string"><span class="token string">"\n"</span></span>                    sh <span class="token interpolation-string"><span class="token string">"""             </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">scannerHome</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/bin/sonar-scanner -Dsonar.projectKey=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> \            -Dsonar.projectName=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -Dsonar.projectVersion=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">sonarDate</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -Dsonar.ws.timeout=30 \            -Dsonar.projectDescription=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectDesc</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -Dsonar.links.homepage=http://www.baidu.com \            -Dsonar.sources=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">projectPath</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -Dsonar.sourceEncoding=UTF-8 -Dsonar.java.binaries=target/classes \            -Dsonar.java.test.binaries=target/test-classes -Dsonar.java.surefire.report=target/surefire-reports  -Dsonar.branch.name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">branchName</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> -X        """</span></span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//def qg = waitForQualityGate()</span>    <span class="token comment">//if (qg.status != 'OK') &#123;</span>        <span class="token comment">//error "Pipeline aborted due to quality gate failure: $&#123;qg.status&#125;"</span>    <span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="tomail-groovy"><a href="#tomail-groovy" class="headerlink" title="tomail.groovy"></a>tomail.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">Jenkins<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">getItemByFullName</span><span class="token punctuation">(</span>demo<span class="token operator">-</span>maven<span class="token operator">-</span>service<span class="token operator">-</span>PUSH<span class="token punctuation">)</span><span class="token punctuation">.</span>builds<span class="token punctuation">.</span>findAll <span class="token punctuation">&#123;</span>  it<span class="token punctuation">.</span>number <span class="token operator">&lt;=</span> <span class="token number">79</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>  it<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="tools-groovy"><a href="#tools-groovy" class="headerlink" title="tools.groovy"></a>tools.groovy</h1><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> org<span class="token punctuation">.</span>devops<span class="token comment">//格式化输出</span><span class="token keyword">def</span> <span class="token function">PrintMes</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span>   <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"\033[40;31m >>>>>>>>>>></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">value</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; \033[0m"</span></span><span class="token punctuation">,</span>              <span class="token string">'blue'</span>  <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"\033[47;34m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">value</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> \033[0m"</span></span><span class="token punctuation">,</span>              <span class="token string">'green'</span> <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"[1;32m>>>>>>>>>></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">value</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">>>>>>>>>>>[m"</span></span><span class="token punctuation">,</span>              <span class="token string">'green1'</span> <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"\033[40;32m >>>>>>>>>>></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">value</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; \033[0m"</span></span> <span class="token punctuation">]</span>    <span class="token function">ansiColor</span><span class="token punctuation">(</span><span class="token string">'xterm'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于jira的流水线实践</title>
      <link href="/posts/64396.html"/>
      <url>/posts/64396.html</url>
      
        <content type="html"><![CDATA[<h2 id="整体架构设计图"><a href="#整体架构设计图" class="headerlink" title="整体架构设计图"></a>整体架构设计图</h2><p><img src="/1659698071406.png" alt="1659698071406"></p><h3 id="jira端规划"><a href="#jira端规划" class="headerlink" title="jira端规划"></a>jira端规划</h3><ul><li>创建任务、故事（对应gitlab分支）<ul><li>创建jira 问题 –&gt;自动创建给gitlab分支</li></ul></li><li>创建发布(对应版本文件)</li></ul><h3 id="gitlab端规划"><a href="#gitlab端规划" class="headerlink" title="gitlab端规划"></a>gitlab端规划</h3><ul><li><p>提交代码 –&gt;出发jenkins提交六线</p></li><li><p>合并分支 –&gt; 当流水线成功后可以合并</p></li><li><p>创建版本库（存放发布版本）</p><p><img src="/1659698514188.png" alt="1659698514188"></p></li></ul><p>jenkins 端规划</p><ul><li><p>提交流水线</p></li><li><p>uat测试流水线</p><ul><li>代码–&gt;编译–&gt;单侧–&gt;打包–&gt;扫描–&gt;自动化测试–&gt;生成镜像–&gt;发布–&gt;生成版本–&gt;邮件通知</li></ul></li><li><p>制品晋级&#x2F;版本更新流水线</p><ul><li>选择晋级策略–&gt; 根据版本文件晋级–&gt;生成新版本文件</li></ul></li><li><p>stag&#x2F;prod发布流水线</p><ul><li>选择版本号–&gt;获取版本文件–&gt;发布应用</li></ul></li><li><p>jira 集成流水线</p><ul><li>jira 版本发布–&gt;分支合并–&gt;清理分支</li><li>创建任务、故事(对应gitlab分支）<ul><li>创建jira问题 –&gt;自动创建gitlab分支</li></ul></li><li>创建版本（对应版本文件）<ul><li>创建release–&gt;获取应用部署yml文件 –&gt;上传到git</li></ul></li><li>版本发布（清理分支）<ul><li>版本发布–&gt;出发release分支到master分支合并–&gt;清理特性分支</li></ul></li></ul><h3 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h3><ul><li><p>创建Gitlab版本库，用于存放k8s应用部署文件。</p></li><li><p>新建demo-k8s-service项目，存放k8s的版本控制文件包含以下三个文件</p><ul><li>prod</li></ul></li><li><p>stag</p></li><li><p>uat</p></li><li><p>Jira webhook中配置 新建版本触发事件。</p><p><img src="/1659700922280.png" alt="1659700922280"></p></li><li><p>Kubernetes中创建三个NS，用于模拟不同的集群。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> k8skubectl create <span class="token parameter variable">-f</span> ns.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-none"><code class="language-none">获取k8s的token​&#96;&#96;&#96;shell  kubectl describe secrets -n kube-system $ (kubectl -n kube-system get secret | awk &#39;&#x2F;dashboard-admin&#x2F;(print $1｝，)  验证curl -heade &quot;Authorization：Bearer$TOKEN&quot;--insecure -X GET https：&#x2F;&#x2F;192.168.1.200：6443&#x2F;api&#x2F;v1&#x2F;nodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="/1659710480228.png" alt="1659710480228"></p><ul><li><p>jira中新建一个版本验证jenkins触发器</p><p><img src="/1659700940166.png" alt="1659700940166"></p></li><li><p>共享库分装k8s</p><ul><li>新建文件kubernetes.groovy</li></ul></li><li><p>分装http请求（token、accept、content-type为yaml）</p><ul><li>创建获取deploymets的方法</li></ul></li><li><p>jenkinsfile中调用</p></li><li><p>新建gitlabapi文件分装gitlab 对应的api方法</p></li><li><p>获取k8s文件上传到gitlab</p></li><li><p>上线完成触发分支合并测试</p></li><li><p>提交流水线测试</p><ul><li><p>gitlab配置webhook</p></li><li><p>jenkins中配置</p></li><li><p>新建gitlab.jenkinsfile</p><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslibrary@master&#39;) _&#x2F;&#x2F;func from shareibrarydef build &#x3D; new org.devops.build()def deploy &#x3D; new org.devops.deploy()def tools &#x3D; new org.devops.tools()def gitlab &#x3D; new org.devops.gitlab()def toemail &#x3D; new org.devops.toemail()def sonar &#x3D; new org.devops.sonarqube()def sonarapi &#x3D; new org.devops.sonarapi()def artifactory &#x3D; new org.devops.artifactory() def runOpts&#x2F;&#x2F;envString buildType &#x3D; &quot;$&#123;env.buildType&#125;&quot;String buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot;String deployHosts &#x3D; &quot;$&#123;env.deployHosts&#125;&quot;String srcUrl &#x3D; &quot;$&#123;env.srcUrl&#125;&quot;String branchName &#x3D; &quot;$&#123;env.branchName&#125;&quot;branchName &#x3D; branch - &quot;refs&#x2F;heads&#x2F;&quot;currentBuild.description &#x3D; &quot;Trigger by $&#123;userName&#125; $&#123;branch&#125;&quot;gitlab.ChangeCommitStatus(projectId,commitSha,&quot;running&quot;)    &#x2F;&#x2F;pipelinepipeline&#123;    agent &#123; node &#123; label &quot;build&quot;&#125;&#125;            stages&#123;        stage(&quot;CheckOut&quot;)&#123;            steps&#123;                script&#123;                                                           println(&quot;$&#123;branchName&#125;&quot;)                                    tools.PrintMes(&quot;获取代码&quot;,&quot;green&quot;)                    checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;$&#123;branchName&#125;&quot;]],                                       doGenerateSubmoduleConfigurations: false,                                       extensions: [],                                       submoduleCfg: [],                                       userRemoteConfigs: [[credentialsId: &#39;gitlab-admin-user&#39;, url: &quot;$&#123;srcUrl&#125;&quot;]]])                &#125;            &#125;        &#125;                stage(&quot;Build&amp;Test&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;执行打包&quot;,&quot;green&quot;)                    artifactory.main(buildType,buildShell)                &#125;            &#125;       &#125;                      stage(&quot;QA&quot;)&#123;            steps &#123;                script&#123;                    tools.PrintMes(&quot;搜索项目&quot;,&quot;green&quot;)                    result &#x3D; sonarapi.SerarchProject(&quot;$&#123;JOB_NAME&#125;&quot;)                    println(result)                                        if (result &#x3D;&#x3D; &quot;false&quot;)&#123;                        println(&quot;$&#123;JOB_NAME&#125;---项目不存在,准备创建项目---&gt; $&#123;JOB_NAME&#125;！&quot;)                        sonarapi.CreateProject(&quot;$&#123;JOB_NAME&#125;&quot;)                    &#125; else &#123;                        println(&quot;$&#123;JOB_NAME&#125;---项目已存在！&quot;)                    &#125;                                        tools.PrintMes(&quot;配置项目质量规则&quot;,&quot;green&quot;)                    qpName&#x3D;&quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;-&quot;)[0]   &#x2F;&#x2F;Sonar%20way                    sonarapi.ConfigQualityProfiles(&quot;$&#123;JOB_NAME&#125;&quot;,&quot;java&quot;,qpName)                                    tools.PrintMes(&quot;配置质量阈&quot;,&quot;green&quot;)                    sonarapi.ConfigQualityGates(&quot;$&#123;JOB_NAME&#125;&quot;,qpName)                                    tools.PrintMes(&quot;代码扫描&quot;,&quot;green&quot;)                    sonar.SonarScan(&quot;test&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;src&quot;)                                        sleep 30                    tools.PrintMes(&quot;获取扫描结果&quot;,&quot;green&quot;)                    result &#x3D; sonarapi.GetProjectStatus(&quot;$&#123;JOB_NAME&#125;&quot;)                                                            println(result)                    if (result.toString() &#x3D;&#x3D; &quot;ERROR&quot;)&#123;                        toemail.Email(&quot;代码质量阈错误！请及时修复！&quot;,userEmail)                        error &quot; 代码质量阈错误！请及时修复！&quot;                                                                    &#125; else &#123;                        println(result)                    &#125;                                                &#125;           &#125;       &#125;    &#125;    post &#123;        always&#123;            script&#123;                println(&quot;always&quot;)            &#125;        &#125;                success&#123;            script&#123;                println(&quot;success&quot;)                                gitlab.ChangeCommitStatus(projectId,commitSha,&quot;success&quot;)                                toemail.Email(&quot;流水线成功&quot;,userEmail)                        &#125;                &#125;        failure&#123;            script&#123;                println(&quot;failure&quot;)                                gitlab.ChangeCommitStatus(projectId,commitSha,&quot;failed&quot;)                                toemail.Email(&quot;流水线失败了！&quot;,userEmail)            &#125;        &#125;                aborted&#123;            script&#123;                println(&quot;aborted&quot;)                gitlab.ChangeCommitStatus(projectId,commitSha,&quot;canceled&quot;)               toemail.Email(&quot;流水线被取消了！&quot;,userEmail)            &#125;                &#125;        &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>jekninsfile中调用</p><ul><li>新建jira.jenkinsfile</li></ul><pre class="line-numbers language-jenkinsfile" data-language="jenkinsfile"><code class="language-jenkinsfile">#!groovy@Library(&#39;jenkinslibrary&#39;) _def gitlab &#x3D; new org.devops.gitlab()def jira &#x3D; new org.devops.jira()def k8s &#x3D; new org.devops.kubernetes()pipeline &#123;    agent &#123; node &#123; label &quot;master&quot;&#125;&#125;    triggers &#123;        GenericTrigger( causeString: &#39;Trigger By Jira Server --&gt;&gt;&gt;&gt;&gt; Generic Cause&#39;,                         genericRequestVariables: [[key: &#39;projectKey&#39;, regexpFilter: &#39;&#39;]],                         genericVariables: [[defaultValue: &#39;&#39;, key: &#39;webHookData&#39;, regexpFilter: &#39;&#39;, value: &#39;$&#39;]],                         printContributedVariables: true,                         printPostContent: true,                         regexpFilterExpression: &#39;&#39;,                         regexpFilterText: &#39;&#39;,                         silentResponse: true,                         token: &quot;$&#123;JOB_NAME&#125;&quot;        )    &#125;    stages&#123;        stage(&quot;FileterData&quot;)&#123;            steps&#123;                script&#123;                    response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;webHookData&#125;&quot;&quot;&quot;                    println(response)                    env.eventType &#x3D; response[&quot;webhookEvent&quot;]                    switch(eventType) &#123;                        case &quot;jira:version_created&quot;:                            env.versionName &#x3D; response[&quot;version&quot;][&quot;name&quot;]                            currentBuild.description &#x3D; &quot; Trigger by  $&#123;eventType&#125; $&#123;versionName&#125; &quot;                            break                        case [&quot;jira:issue_created&quot; , &quot;jira:issue_updated&quot; ]:                            env.issueName &#x3D; response[&#39;issue&#39;][&#39;key&#39;]                            env.userName &#x3D; response[&#39;user&#39;][&#39;name&#39;]                            env.moduleNames &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;components&#39;]                            env.fixVersion &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;fixVersions&#39;]                            currentBuild.description &#x3D; &quot; Trigger by $&#123;userName&#125; $&#123;eventType&#125; $&#123;issueName&#125; &quot;                            break                        &#x2F;*case &quot;jira:issue_updated&quot;:                            env.issueName &#x3D; response[&#39;issue&#39;][&#39;key&#39;]                            env.userName &#x3D; response[&#39;user&#39;][&#39;name&#39;]                            env.moduleNames &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;components&#39;]                            env.fixVersion &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;fixVersions&#39;]                            currentBuild.description &#x3D; &quot; Trigger by $&#123;userName&#125; $&#123;eventType&#125; $&#123;issueName&#125; &quot;                            break*&#x2F;                                                    case &quot;jira:version_released&quot;:                            env.versionName &#x3D; response[&quot;version&quot;][&quot;name&quot;]                            currentBuild.description &#x3D; &quot; Trigger by  $&#123;eventType&#125; $&#123;versionName&#125; &quot;                            break                        default:                            println(&quot;hello&quot;)                    &#125;                &#125;            &#125;        &#125;                &#x2F;*stage(&quot;CreateVersionFile&quot;)&#123;            when &#123;                environment name: &#39;eventType&#39;, value: &#39;jira:version_created&#39;             &#125;                        steps&#123;                script&#123;                    &#x2F;&#x2F;获取K8s文件                    response &#x3D; k8s.GetDeployment(&quot;demo-uat&quot;,&quot;demoapp&quot;)                    response &#x3D; response.content                    &#x2F;&#x2F;文件转换                    base64Content &#x3D; response.bytes.encodeBase64().toString()                   &#x2F;&#x2F;上传文件                   gitlab.CreateRepoFile(7,&quot;demo-uat%2f$&#123;versionName&#125;-uat.yaml&quot;,base64Content)                &#125;                        &#125;        &#125;                stage(&quot;DeleteBranch&quot;)&#123;            when &#123;                environment name: &#39;eventType&#39;, value: &#39;jira:version_released&#39;               &#125;                        steps&#123;                script&#123;                    &#x2F;&#x2F;获取issuesName                    println(&quot;project%20%3D%20$&#123;projectKey&#125;%20AND%20fixVersion%20%3D%20$&#123;versionName&#125;%20AND%20issuetype%20%3D%20Task&quot;)                    response &#x3D; jira.RunJql(&quot;project%20%3D%20$&#123;projectKey&#125;%20AND%20fixVersion%20%3D%20$&#123;versionName&#125;%20AND%20issuetype%20%3D%20Task&quot;)                                        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;                    println(response)                    issues &#x3D; [:]                    for ( issue in response[&#39;issues&#39;])&#123;                        println(issue[&quot;key&quot;])                        println(issue[&quot;fields&quot;][&quot;components&quot;])                        issues[issue[&quot;key&quot;]] &#x3D; []                                                &#x2F;&#x2F;获取issue关联的模块                        for (component in issue[&quot;fields&quot;][&quot;components&quot;] )&#123;                            issues[issue[&quot;key&quot;]].add(component[&quot;name&quot;])                        &#125;                                        &#125;                                        println(issues)                                                            &#x2F;&#x2F;搜索gitlab分支是否已合并然后删除                                                            for (issue in issues.keySet())&#123;                        for (projectName in issues[issue])&#123;                            repoName &#x3D; projectName.split(&quot;-&quot;)[0]                            projectId &#x3D; gitlab.GetProjectID(repoName, projectName)                                                        try &#123;                                println(&quot;创建合并请求  RELEASE-$&#123;versionName&#125;  ---&gt; master&quot;)                                result &#x3D; gitlab.CreateMr(projectId,&quot;RELEASE-$&#123;versionName&#125;&quot;,&quot;master&quot;,&quot;RELEASE-$&#123;versionName&#125;---&gt;master&quot;)                                result &#x3D; readJSON text: &quot;&quot;&quot;$&#123;result&#125;&quot;&quot;&quot;                                mergeId &#x3D; result[&quot;iid&quot;]                                gitlab.AcceptMr(projectId,mergeId)                                                                sleep 15                            &#125; catch(e)&#123;                                println(e)                            &#125;                            response &#x3D; gitlab.SearchProjectBranches(projectId,issue)                                                        println(response[projectId][0][&#39;merged&#39;])                                                        if (response[projectId][0][&#39;merged&#39;] &#x3D;&#x3D; false)&#123;                                println(&quot;$&#123;projectName&#125; --&gt; $&#123;issue&#125; --&gt;此分支未合并暂时忽略！&quot;)                            &#125; else &#123;                                println(&quot;$&#123;projectName&#125; --&gt; $&#123;issue&#125; --&gt;此分支已合并准备清理！&quot;)                                gitlab.DeleteBranch(projectId,issue)                            &#125;                                                &#125;                    &#125;                &#125;            &#125;        &#125;*&#x2F;        stage(&quot;CreateBranchOrMR&quot;)&#123;            when &#123;                anyOf &#123;                    environment name: &#39;eventType&#39;, value: &#39;jira:issue_created&#39;   &#x2F;&#x2F;issue 创建 &#x2F;更新                    environment name: &#39;eventType&#39;, value: &#39;jira:issue_updated&#39;                 &#125;            &#125;            steps&#123;                script&#123;                    def projectIds &#x3D; []                    println(issueName)                    fixVersion &#x3D; readJSON text: &quot;&quot;&quot;$&#123;fixVersion&#125;&quot;&quot;&quot;                    println(fixVersion.size())                    &#x2F;&#x2F;获取项目Id                    def projects &#x3D; readJSON text: &quot;&quot;&quot;$&#123;moduleNames&#125;&quot;&quot;&quot;                    for ( project in projects)&#123;                        println(project[&quot;name&quot;])                        projectName &#x3D; project[&quot;name&quot;]                        currentBuild.description +&#x3D; &quot;\n project: $&#123;projectName&#125;&quot;                        groupName &#x3D; projectName.split(&quot;-&quot;)[0]                                                try &#123;                            projectId &#x3D; gitlab.GetProjectID(groupName, projectName)                            println(projectId)                            projectIds.add(projectId)                           &#125; catch(e)&#123;                            println(e)                            println(&quot;未获取到项目ID，请检查模块名称！&quot;)                        &#125;                    &#125;                     println(projectIds)                      if (fixVersion.size() &#x3D;&#x3D; 0) &#123;                        for (id in projectIds)&#123;                            println(&quot;新建特性分支--&gt; $&#123;id&#125; --&gt; $&#123;issueName&#125;&quot;)                            currentBuild.description +&#x3D; &quot;\n 新建特性分支--&gt; $&#123;id&#125; --&gt; $&#123;issueName&#125;&quot;                            gitlab.CreateBranch(id,&quot;master&quot;,&quot;$&#123;issueName&#125;&quot;)                        &#125;                                                                        &#125; else &#123;                        fixVersion &#x3D; fixVersion[0][&#39;name&#39;]                        println(&quot;Issue关联release操作,Jenkins创建合并请求&quot;)                        currentBuild.description +&#x3D; &quot;\n Issue关联release操作,Jenkins创建合并请求 \n $&#123;issueName&#125; --&gt; RELEASE-$&#123;fixVersion&#125;&quot;                                                 for (id in projectIds)&#123;                            println(&quot;创建RELEASE--&gt;$&#123;id&#125; --&gt;$&#123;fixVersion&#125;分支&quot;)                            gitlab.CreateBranch(id,&quot;master&quot;,&quot;RELEASE-$&#123;fixVersion&#125;&quot;)                                                        println(&quot;创建合并请求 $&#123;issueName&#125; ---&gt; RELEASE-$&#123;fixVersion&#125;&quot;)                            gitlab.CreateMr(id,&quot;$&#123;issueName&#125;&quot;,&quot;RELEASE-$&#123;fixVersion&#125;&quot;,&quot;$&#123;issueName&#125;---&gt;RELEASE-$&#123;fixVersion&#125;&quot;)                                                    &#125;                    &#125;                 &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="UAT测试流水线"><a href="#UAT测试流水线" class="headerlink" title="UAT测试流水线"></a>UAT测试流水线</h3><p>代码–&gt;编译–&gt;单测–&gt;打包–&gt;扫描–&gt;镜像–&gt;发布–&gt;接口测试–&gt;生成版本文件–&gt;邮件通知</p><p>两种方式使用docker：</p><ol><li>配置专属slave， 新建一个pod 里面起一个docker</li><li>docker in docker 配置， 使用物理机的dokcer 进行挂载，但是可能会影响整个docker的性能</li></ol><p><img src="/1660032386054.png" alt="1660032386054"></p><h3 id="获取k8s文件上传至k8s集群"><a href="#获取k8s文件上传至k8s集群" class="headerlink" title="获取k8s文件上传至k8s集群"></a>获取k8s文件上传至k8s集群</h3><ol><li><p>分装的函数详见gitlab.groovy 和kubernete.groovy文件</p></li><li><p>jave.jenkinsfile</p><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslibrary@master&#39;) _&#x2F;&#x2F;func from shareibrarydef build &#x3D; new org.devops.build()def deploy &#x3D; new org.devops.deploy()def tools &#x3D; new org.devops.tools()def gitlab &#x3D; new org.devops.gitlab()def toemail &#x3D; new org.devops.toemail()def sonar &#x3D; new org.devops.sonarqube()def sonarapi &#x3D; new org.devops.sonarapi()def nexus &#x3D; new org.devops.nexus()def artifactory &#x3D; new org.devops.artifactory() def k8s &#x3D; new org.devops.kubernetes()def runOpts&#x2F;&#x2F;envString buildType &#x3D; &quot;$&#123;env.buildType&#125;&quot;String buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot;String deployHosts &#x3D; &quot;$&#123;env.deployHosts&#125;&quot;String srcUrl &#x3D; &quot;$&#123;env.srcUrl&#125;&quot;String branchName &#x3D; &quot;$&#123;env.branchName&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;    branchName &#x3D; branch - &quot;refs&#x2F;heads&#x2F;&quot;        currentBuild.description &#x3D; &quot;Trigger by $&#123;userName&#125; $&#123;branch&#125;&quot;    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;running&quot;)    env.runOpts &#x3D; &quot;GitlabPush&quot;    &#125; else &#123;   userEmail &#x3D; &quot;2560350642@qq.com&quot;&#125;&#x2F;&#x2F;pipelinepipeline&#123;    agent &#123; node &#123; label &quot;build&quot;&#125;&#125;            stages&#123;       stage(&quot;GetCode&quot;)&#123;            steps&#123;                script&#123;                    println(&quot;$&#123;branchName&#125;&quot;)                                    tools.PrintMes(&quot;获取代码&quot;,&quot;green&quot;)                    checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;$&#123;branchName&#125;&quot;]],                                       doGenerateSubmoduleConfigurations: false,                                       extensions: [],                                       submoduleCfg: [],                                       userRemoteConfigs: [[credentialsId: &#39;gitlab-admin-user&#39;, url: &quot;$&#123;srcUrl&#125;&quot;]]])                &#125;            &#125;        &#125;        stage(&quot;Build&amp;Test&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;执行打包&quot;,&quot;green&quot;)                    artifactory.main(buildType,buildShell)                    artifactory.PushArtifact()                                                    &#x2F;&#x2F;deploy.SaltDeploy(&quot;$&#123;deployHosts&#125;&quot;,&quot;test.ping&quot;)                    &#x2F;&#x2F;deploy.AnsibleDeploy(&quot;$&#123;deployHosts&#125;&quot;,&quot;-m ping &quot;)                &#125;            &#125;       &#125;                      &#x2F;&#x2F;并行        stage(&#39;parallel01&#39;) &#123;                          parallel &#123;            stage(&quot;QA&quot;)&#123;                steps &#123;                    script&#123;                        tools.PrintMes(&quot;搜索项目&quot;,&quot;green&quot;)                        result &#x3D; sonarapi.SerarchProject(&quot;$&#123;JOB_NAME&#125;&quot;)                        println(result)                                                if (result &#x3D;&#x3D; &quot;false&quot;)&#123;                            println(&quot;$&#123;JOB_NAME&#125;---项目不存在,准备创建项目---&gt; $&#123;JOB_NAME&#125;！&quot;)                            sonarapi.CreateProject(&quot;$&#123;JOB_NAME&#125;&quot;)                        &#125; else &#123;                            println(&quot;$&#123;JOB_NAME&#125;---项目已存在！&quot;)                        &#125;                                                tools.PrintMes(&quot;配置项目质量规则&quot;,&quot;green&quot;)                        qpName&#x3D;&quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;-&quot;)[0]   &#x2F;&#x2F;Sonar%20way                        sonarapi.ConfigQualityProfiles(&quot;$&#123;JOB_NAME&#125;&quot;,&quot;java&quot;,qpName)                                            tools.PrintMes(&quot;配置质量阈&quot;,&quot;green&quot;)                        sonarapi.ConfigQualityGates(&quot;$&#123;JOB_NAME&#125;&quot;,qpName)                                            tools.PrintMes(&quot;代码扫描&quot;,&quot;green&quot;)                        sonar.SonarScan(&quot;test&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;$&#123;JOB_NAME&#125;&quot;,&quot;src&quot;,&quot;$&#123;branchName&#125;&quot;)                                                    sleep 30                        tools.PrintMes(&quot;获取扫描结果&quot;,&quot;green&quot;)                        result &#x3D; sonarapi.GetProjectStatus(&quot;$&#123;JOB_NAME&#125;&quot;)                                                                        println(result)                        if (result.toString() &#x3D;&#x3D; &quot;ERROR&quot;)&#123;                            toemail.Email(&quot;代码质量阈错误！请及时修复！&quot;,userEmail)                            error &quot; 代码质量阈错误！请及时修复！&quot;                                                                                &#125; else &#123;                            println(result)                        &#125;                    &#125;               &#125;           &#125;                      &#x2F;&#x2F;构建镜像           stage(&quot;BuildImages&quot;)&#123;                steps&#123;                    script&#123;                        tools.PrintMes(&quot;构建上传镜像&quot;,&quot;green&quot;)                        env.serviceName &#x3D; &quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;_&quot;)[0]                                               withCredentials([usernamePassword(credentialsId: &#39;aliyun-registry-admin&#39;, passwordVariable: &#39;password&#39;, usernameVariable: &#39;username&#39;)]) &#123;                                                      env.dockerImage &#x3D; &quot;registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125;&quot;                           sh &quot;&quot;&quot;                               docker login -u $&#123;username&#125; -p $&#123;password&#125;  registry.cn-beijing.aliyuncs.com                               docker build -t registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125; .                               sleep 1                               docker push registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125;                               sleep 1                               #docker rmi registry.cn-beijing.aliyuncs.com&#x2F;devopstest&#x2F;$&#123;serviceName&#125;:$&#123;branchName&#125;                            &quot;&quot;&quot;                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;              &#x2F;&#x2F;发布       stage(&quot;Deploy&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;发布应用&quot;,&quot;green&quot;)                                        &#x2F;&#x2F;下载版本库文件                                         releaseVersion &#x3D; &quot;$&#123;branchName&#125;&quot;.split(&quot;-&quot;)[-1]                    response &#x3D; gitlab.GetRepoFile(7,&quot;demo-uat%2f$&#123;releaseVersion&#125;-uat.yaml&quot;)                    &#x2F;&#x2F;println(response)                                        &#x2F;&#x2F;替换文件中内容（镜像）                    fileData &#x3D; readYaml text: &quot;&quot;&quot;$&#123;response&#125;&quot;&quot;&quot;                    println(fileData[&quot;spec&quot;][&quot;template&quot;][&quot;spec&quot;][&quot;containers&quot;][0][&quot;image&quot;])                    println(fileData[&quot;metadata&quot;][&quot;resourceVersion&quot;])                    oldImage &#x3D; fileData[&quot;spec&quot;][&quot;template&quot;][&quot;spec&quot;][&quot;containers&quot;][0][&quot;image&quot;]                     oldVersion &#x3D; fileData[&quot;metadata&quot;][&quot;resourceVersion&quot;]                    response &#x3D; response.replace(oldImage,dockerImage)                    response &#x3D; response.replace(oldVersion,&quot;&quot;)                    println(response)                                        &#x2F;&#x2F;更新gitlab文件内容                    base64Content &#x3D; response.bytes.encodeBase64().toString()                    gitlab.UpdateRepoFile(7,&quot;demo-uat%2f$&#123;releaseVersion&#125;-uat.yaml&quot;,base64Content)                                        &#x2F;&#x2F;发布kubernetes                    k8s.UpdateDeployment(&quot;demo-uat&quot;,&quot;demoapp&quot;,response)                                    &#125;            &#125;        &#125;               &#x2F;&#x2F;接口自动化测试        stage(&quot;InterfaceTest&quot;)&#123;            steps&#123;                script&#123;                    tools.PrintMes(&quot;接口测试&quot;,&quot;green&quot;)                &#125;            &#125;       &#125;                                &#125;    post &#123;        always&#123;            script&#123;                println(&quot;always&quot;)            &#125;        &#125;                success&#123;            script&#123;                println(&quot;success&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;success&quot;)                &#125;                toemail.Email(&quot;流水线成功&quot;,userEmail)                        &#125;                &#125;        failure&#123;            script&#123;                println(&quot;failure&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;failed&quot;)                &#125;                toemail.Email(&quot;流水线失败了！&quot;,userEmail)            &#125;        &#125;                aborted&#123;            script&#123;                println(&quot;aborted&quot;)                if (&quot;$&#123;runOpts&#125;&quot; &#x3D;&#x3D; &quot;GitlabPush&quot;)&#123;                    gitlab.ChangeCommitStatus(projectId,commitSha,&quot;canceled&quot;)                &#125;               toemail.Email(&quot;流水线被取消了！&quot;,userEmail)            &#125;                &#125;        &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> 流水线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins中集成jmeter</title>
      <link href="/posts/1800.html"/>
      <url>/posts/1800.html</url>
      
        <content type="html"><![CDATA[<h3 id="jemter-参数"><a href="#jemter-参数" class="headerlink" title="jemter 参数"></a>jemter 参数</h3><p>-n: 非gui模式下执行jmeter</p><p>-t: 执行测试文件坐在位置</p><p>-l: 指定测试报告结果保存的文件， jtl格式文件</p><p>-o: 指定测试报告保存的位置</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li><p>将jmeter extra目录中的ant-jmeter-1.1.1.jar拷贝至ant安装目录的lib中</p></li><li><p>创建demo文件存放jmeter脚本文件，创建demo-report文件夹存放测试报告</p></li><li><p>demo 文件下新建build.xml文件（可以将jmeter extra中的build.xml拷贝过来）</p></li><li><p>配置build.xml文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project name&#x3D;&quot;ant-jmeter-test&quot; default&#x3D;&quot;run&quot; basedir&#x3D;&quot;.&quot;&gt;  &lt;tstamp&gt;    &lt;format property&#x3D;&quot;time&quot; pattern&#x3D;&quot;yyyyMMddhhmm&quot; &#x2F;&gt;  &lt;&#x2F;tstamp&gt;  &lt;!-- 需要改成自己本地的 Jmeter 目录--&gt;  &lt;property name&#x3D;&quot;jmeter.home&quot; value&#x3D;&quot;D:\work_software\jmeter\apache-jmeter-3.2&quot; &#x2F;&gt;  &lt;!-- Jmeter生成 jtl 格式的结果报告的路径--&gt;  &lt;property name&#x3D;&quot;jmeter.result.jtl.dir&quot; value&#x3D;&quot;D:\work_software\jmeter\apache-jmeter-3.2\testcases\report\jtl&quot; &#x2F;&gt;  &lt;!-- Jmeter生成 html 格式的结果报告的路径--&gt;  &lt;property name&#x3D;&quot;jmeter.result.html.dir&quot; value&#x3D;&quot;D:\work_software\jmeter\apache-jmeter-3.2\testcases\report\html&quot; &#x2F;&gt;  &lt;!-- 生成的报告的前缀--&gt;  &lt;property name&#x3D;&quot;ReportName&quot; value&#x3D;&quot;TestReport&quot; &#x2F;&gt;  &lt;property name&#x3D;&quot;jmeter.result.jtlName&quot; value&#x3D;&quot;$&#123;jmeter.result.jtl.dir&#125;&#x2F;$&#123;ReportName&#125;$&#123;time&#125;.jtl&quot; &#x2F;&gt;  &lt;property name&#x3D;&quot;jmeter.result.htmlName&quot; value&#x3D;&quot;$&#123;jmeter.result.html.dir&#125;&#x2F;$&#123;ReportName&#125;$&#123;time&#125;.html&quot; &#x2F;&gt;   &lt;target name&#x3D;&quot;run&quot;&gt;     &lt;antcall target&#x3D;&quot;test&quot; &#x2F;&gt;     &lt;antcall target&#x3D;&quot;report&quot; &#x2F;&gt;   &lt;&#x2F;target&gt;   &lt;target name&#x3D;&quot;test&quot;&gt;     &lt;taskdef name&#x3D;&quot;jmeter&quot; classname&#x3D;&quot;org.programmerplanet.ant.taskdefs.jmeter.JMeterTask&quot; &#x2F;&gt;     &lt;jmeter jmeterhome&#x3D;&quot;$&#123;jmeter.home&#125;&quot; resultlog&#x3D;&quot;$&#123;jmeter.result.jtlName&#125;&quot;&gt;       &lt;!-- 声明要运行的脚本。&quot;*.jmx&quot;指包含此目录下的所有Jmeter脚本--&gt;       &lt;testplans dir&#x3D;&quot;D:\work_software\jmeter\apache-jmeter-3.2\testcases&quot; includes&#x3D;&quot;*.jmx&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;jmeter.save.saveservice.output_format&quot; value&#x3D;&quot;xml&quot;&#x2F;&gt;     &lt;&#x2F;jmeter&gt;   &lt;&#x2F;target&gt;    &lt;path id&#x3D;&quot;xslt.classpath&quot;&gt;     &lt;fileset dir&#x3D;&quot;$&#123;jmeter.home&#125;&#x2F;lib&quot; includes&#x3D;&quot;xalan*.jar&quot;&#x2F;&gt;    &lt;fileset dir&#x3D;&quot;$&#123;jmeter.home&#125;&#x2F;lib&quot; includes&#x3D;&quot;serializer*.jar&quot;&#x2F;&gt;  &lt;&#x2F;path&gt;  &lt;target name&#x3D;&quot;report&quot;&gt;&lt;tstamp&gt; &lt;format property&#x3D;&quot;report.datestamp&quot; pattern&#x3D;&quot;yyyy&#x2F;MM&#x2F;dd HH:mm&quot; &#x2F;&gt;&lt;&#x2F;tstamp&gt;     &lt;xslt        classpathref&#x3D;&quot;xslt.classpath&quot; rel&#x3D;&quot;external nofollow&quot;       force&#x3D;&quot;true&quot;       in&#x3D;&quot;$&#123;jmeter.result.jtlName&#125;&quot;       out&#x3D;&quot;$&#123;jmeter.result.htmlName&#125;&quot;       style&#x3D;&quot;$&#123;jmeter.home&#125;&#x2F;extras&#x2F;jmeter-results-detail-report_21.xsl&quot;&gt;       &lt;param name&#x3D;&quot;dateReport&quot; expression&#x3D;&quot;$&#123;report.datestamp&#125;&quot;&#x2F;&gt;    &lt;&#x2F;xslt&gt;    &lt;copy todir&#x3D;&quot;$&#123;jmeter.result.html.dir&#125;&quot;&gt;      &lt;fileset dir&#x3D;&quot;$&#123;jmeter.home&#125;&#x2F;extras&quot;&gt;        &lt;include name&#x3D;&quot;collapse.png&quot; &#x2F;&gt;        &lt;include name&#x3D;&quot;expand.png&quot; &#x2F;&gt;      &lt;&#x2F;fileset&gt;    &lt;&#x2F;copy&gt;  &lt;&#x2F;target&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置ant环境变量</p></li><li><p>运行ant 查看报告</p><ol><li><p>安装publishhtml插件</p></li><li><p>查看片段生成器</p></li><li><p>生成展示报告代码放入jenkinsfile中</p><pre class="line-numbers language-jenkinsfile" data-language="jenkinsfile"><code class="language-jenkinsfile">#!groovy@Library(&#39;jenkinslibrary@master&#39;) _&#x2F;&#x2F;func from shareibrarydef build &#x3D; new org.devops.build()def tools &#x3D; new org.devops.tools()def toemail &#x3D; new org.devops.toemail()&#x2F;&#x2F;envString buildType &#x3D; &quot;$&#123;env.buildType&#125;&quot;String buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot;String srcUrl &#x3D; &quot;$&#123;env.srcUrl&#125;&quot;String branchName &#x3D; &quot;$&#123;env.branchName&#125;&quot;userEmail &#x3D; &quot;1028354023@qq.com&quot;&#x2F;&#x2F;pipelinepipeline&#123;    agent &#123; node &#123; label &quot;build&quot;&#125;&#125;            stages&#123;        stage(&quot;CheckOut&quot;)&#123;            steps&#123;                script&#123;                                                           println(&quot;$&#123;branchName&#125;&quot;)                                    tools.PrintMes(&quot;获取代码&quot;,&quot;green&quot;)                    checkout([$class: &#39;GitSCM&#39;, branches: [[name: &quot;$&#123;branchName&#125;&quot;]],                                       doGenerateSubmoduleConfigurations: false,                                       extensions: [],                                       submoduleCfg: [],                                       userRemoteConfigs: [[credentialsId: &#39;gitlab-admin-user&#39;, url: &quot;$&#123;srcUrl&#125;&quot;]]])                &#125;            &#125;        &#125;        stage(&quot;Build&quot;)&#123;            steps&#123;                script&#123;                                    tools.PrintMes(&quot;执行打包&quot;,&quot;green&quot;)                    build.Build(buildType,buildShell)                                                                                &#x2F;&#x2F;展示测试报告                    publishHTML([allowMissing: false,                                  alwaysLinkToLastBuild: false,                                  keepAll: false,                                  reportDir: &#39;result&#x2F;htmlfile&#39;,                                  reportFiles: &#39;SummaryReport.html,DetailReport.html&#39;,                                  reportName: &#39;InterfaceTestReport&#39;,                                  reportTitles: &#39;&#39;])                &#125;            &#125;       &#125;    &#125;    post &#123;        always&#123;            script&#123;                println(&quot;always&quot;)            &#125;        &#125;                success&#123;            script&#123;                println(&quot;success&quot;)                toemail.Email(&quot;流水线成功&quot;,userEmail)                        &#125;                &#125;        failure&#123;            script&#123;                println(&quot;failure&quot;)                toemail.Email(&quot;流水线失败了！&quot;,userEmail)            &#125;        &#125;                aborted&#123;            script&#123;                println(&quot;aborted&quot;)                toemail.Email(&quot;流水线被取消了！&quot;,userEmail)            &#125;                &#125;        &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像仓库管理规范</title>
      <link href="/posts/40755.html"/>
      <url>/posts/40755.html</url>
      
        <content type="html"><![CDATA[<h2 id="镜像管理规范"><a href="#镜像管理规范" class="headerlink" title="镜像管理规范"></a>镜像管理规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><h4 id="仓库类型："><a href="#仓库类型：" class="headerlink" title="仓库类型："></a>仓库类型：</h4><ol><li>snapshot: 开发仓库</li><li>release： 生产正式版本仓库</li></ol><h4 id="仓库命名"><a href="#仓库命名" class="headerlink" title="仓库命名"></a>仓库命名</h4><ol><li>snapshot： 业务&#x2F;项目名称 demo-snapshot</li><li>release:  业务&#x2F;项目名称 demo-release</li></ol><h4 id="镜像命名"><a href="#镜像命名" class="headerlink" title="镜像命名"></a>镜像命名</h4><p>应用名称&#x2F;标签</p><ol><li>DEV: demo-snapshot&#x2F;demo-devops-service:branch_commitid</li><li>PRD: demo-release&#x2F;demo-devops-srvice:version_commitid</li></ol><h4 id="标签命名"><a href="#标签命名" class="headerlink" title="标签命名"></a>标签命名</h4><ol><li>分支名_提交ID</li><li>版本号_提交ID</li></ol><p>提交id 减少重复构建</p><h3 id="镜像清理策略"><a href="#镜像清理策略" class="headerlink" title="镜像清理策略"></a>镜像清理策略</h3><p>随着镜像越来越多，频繁更新导致harbor镜像仓库的容量很快爆满，release 发布后，一周后可以清除，snapshot在合并到release 后可以清理(具体时间按照需求)</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于docker配置前端流水线</title>
      <link href="/posts/29748.html"/>
      <url>/posts/29748.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于docker配置web项目实例"><a href="#基于docker配置web项目实例" class="headerlink" title="基于docker配置web项目实例"></a>基于docker配置web项目实例</h2><pre class="line-numbers language-none"><code class="language-none">pipeline &#123;    agent &#123;        docker &#123;            image &#39;node:10.20.1-alpine3.11&#39;            args &#39;-v $HOME&#x2F;.m2:&#x2F;root&#x2F;.m2&#39;        &#125;    &#125;    stages &#123;        stage(&#39;checkout&#39;) &#123;            steps &#123;                git &#39;https:&#x2F;&#x2F;github.com&#x2F;jenkins-docs&#x2F;simple-node-js-react-npm-app&#39;            &#125;        &#125;        stage(&#39;build&#39;) &#123;            steps &#123;                sh &#39;npm install&#39;                sh &#39;npm run build&#39;            &#125;        &#125;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1659524779824.png" alt="1659524779824"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在流水线中使用docker容器</title>
      <link href="/posts/41684.html"/>
      <url>/posts/41684.html</url>
      
        <content type="html"><![CDATA[<h2 id="jenkins-中使用docker进行流水线编译"><a href="#jenkins-中使用docker进行流水线编译" class="headerlink" title="jenkins 中使用docker进行流水线编译"></a>jenkins 中使用docker进行流水线编译</h2><h3 id="jenkins-中挂载docker命令"><a href="#jenkins-中挂载docker命令" class="headerlink" title="jenkins 中挂载docker命令"></a>jenkins 中挂载docker命令</h3><pre class="line-numbers language-none"><code class="language-none">docker run --name jenkins -itd  -p 8081:8080 -p 50000:50000 -v &#x2F;var&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock  -v &#x2F;usr&#x2F;bin&#x2F;docker:&#x2F;usr&#x2F;bin&#x2F;docker  jenkins&#x2F;jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解决启动权限问题"><a href="#解决启动权限问题" class="headerlink" title="解决启动权限问题"></a>解决启动权限问题</h3><pre class="line-numbers language-none"><code class="language-none">docker exec -it -u root jenkins bashusermod -aG root jenkinschmod 777 &#x2F;var&#x2F;run&#x2F;docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="测试流水线"><a href="#测试流水线" class="headerlink" title="测试流水线"></a>测试流水线</h3><ol><li>安装docker pipeline、 docker插件</li><li>新建流水线项目</li></ol><pre class="line-numbers language-none"><code class="language-none">pipeline &#123;    agent &#123;        docker &#123; image &#39;node:14-alpine&#39; &#125;    &#125;    stages &#123;        stage(&#39;Test&#39;) &#123;            steps &#123;                sh &#39;node --version&#39;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>运行流水线，成功截图如下</li></ol><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1659504549940.png" alt="1659504549940"></p><ol start="4"><li><p>改进流水线</p><pre class="line-numbers language-none"><code class="language-none">pipeline &#123;    agent &#123;        docker &#123;            image &#39;maven:3-alpine&#39;            args &#39;-v $HOME&#x2F;.m2:&#x2F;root&#x2F;.m2&#39;        &#125;    &#125;    stages &#123;        stage(&#39;Build&#39;) &#123;            steps &#123;                sh &#39;mvn -v&#39;            &#125;        &#125;    &#125;&#125;许多构建工具将下载外部依赖项并将其本地缓存以供将来重用。由于容器最初是使用“干净”文件系统创建的，因此这可能会导致管道运行速度变慢，因为它们可能无法利用后续管道运行之间的磁盘缓存。管道支持添加传递给Docker的自定义参数，允许用户指定要安装的自定义Docker卷，该卷可用于在两次管道运行之间在代理上缓存数据。以下示例将~&#x2F;.m2目录利用maven容器在两次管道运行之间进行缓存，从而避免为管道的后续运行重新下载依赖项。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>流水线中使用多个docker</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">pipeline &#123;    agent none    stages &#123;        stage(&#39;Back-end&#39;) &#123;            agent &#123;                docker &#123; image &#39;maven:3-alpine&#39;                 args &#39;-v $HOME&#x2F;.m2:&#x2F;root&#x2F;.m2&#39;&#125;            &#125;            steps &#123;                sh &#39;mvn --version&#39;            &#125;        &#125;        stage(&#39;Front-end&#39;) &#123;            agent &#123;                docker &#123; image &#39;node:14-alpine&#39;                 args &#39;-v $HOME&#x2F;.npm:&#x2F;root&#x2F;.npm &#39;&#125;            &#125;            steps &#123;                sh &#39;node --version&#39;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>查看运行信息</li></ol>   <pre class="line-numbers language-none"><code class="language-none">Started by user unknown or anonymous[Pipeline] Start of Pipeline[Pipeline] stage[Pipeline] &#123; (Back-end)[Pipeline] nodeRunning on Jenkins in &#x2F;var&#x2F;jenkins_home&#x2F;workspace&#x2F;demo-dokcer-service-test[Pipeline] &#123;[Pipeline] isUnix[Pipeline] withEnv[Pipeline] &#123;[Pipeline] sh+ docker inspect -f . maven:3-alpine.[Pipeline] &#125;[Pipeline] &#x2F;&#x2F; withEnv[Pipeline] withDockerContainerJenkins seems to be running inside container 9f0fa912ea7a6a8b94c7d02d7aedf2429aa2f12d8841f67976f7efc79a2e03e0$ docker run -t -d -u 1000:1000 -v $HOME&#x2F;.m2:&#x2F;root&#x2F;.m2 -w &#x2F;var&#x2F;jenkins_home&#x2F;workspace&#x2F;demo-dokcer-service-test --volumes-from 9f0fa912ea7a6a8b94c7d02d7aedf2429aa2f12d8841f67976f7efc79a2e03e0 -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** maven:3-alpine cat$ docker top b8f8f8c418ad25cc550a1e35e6c9b632fe6c1251dd4ed62dabbf7c23a38a7c2b -eo pid,comm[Pipeline] &#123;[Pipeline] sh+ mvn --versionApache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-03T19:39:06Z)Maven home: &#x2F;usr&#x2F;share&#x2F;mavenJava version: 1.8.0_131, vendor: Oracle CorporationJava home: &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8-openjdk&#x2F;jreDefault locale: en_US, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;4.18.0-394.el8.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;[Pipeline] &#125;$ docker stop --time&#x3D;1 b8f8f8c418ad25cc550a1e35e6c9b632fe6c1251dd4ed62dabbf7c23a38a7c2b$ docker rm -f b8f8f8c418ad25cc550a1e35e6c9b632fe6c1251dd4ed62dabbf7c23a38a7c2b[Pipeline] &#x2F;&#x2F; withDockerContainer[Pipeline] &#125;[Pipeline] &#x2F;&#x2F; node[Pipeline] &#125;[Pipeline] &#x2F;&#x2F; stage[Pipeline] stage[Pipeline] &#123; (Front-end)[Pipeline] nodeRunning on Jenkins in &#x2F;var&#x2F;jenkins_home&#x2F;workspace&#x2F;demo-dokcer-service-test[Pipeline] &#123;[Pipeline] isUnix[Pipeline] withEnv[Pipeline] &#123;[Pipeline] sh+ docker inspect -f . node:14-alpine.[Pipeline] &#125;[Pipeline] &#x2F;&#x2F; withEnv[Pipeline] withDockerContainerJenkins seems to be running inside container 9f0fa912ea7a6a8b94c7d02d7aedf2429aa2f12d8841f67976f7efc79a2e03e0$ docker run -t -d -u 1000:1000 -v $HOME&#x2F;.npm:&#x2F;root&#x2F;.npm -w &#x2F;var&#x2F;jenkins_home&#x2F;workspace&#x2F;demo-dokcer-service-test --volumes-from 9f0fa912ea7a6a8b94c7d02d7aedf2429aa2f12d8841f67976f7efc79a2e03e0 -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** node:14-alpine cat$ docker top 03a7311f1a63225f31a83f4cdcc1ff3480b1a92608fac48c199e8afe43c12334 -eo pid,comm[Pipeline] &#123;[Pipeline] sh+ node --versionv14.18.2[Pipeline] &#125;$ docker stop --time&#x3D;1 03a7311f1a63225f31a83f4cdcc1ff3480b1a92608fac48c199e8afe43c12334$ docker rm -f 03a7311f1a63225f31a83f4cdcc1ff3480b1a92608fac48c199e8afe43c12334[Pipeline] &#x2F;&#x2F; withDockerContainer[Pipeline] &#125;[Pipeline] &#x2F;&#x2F; node[Pipeline] &#125;[Pipeline] &#x2F;&#x2F; stage[Pipeline] End of PipelineFinished: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于dokcer安装jenkins</title>
      <link href="/posts/27011.html"/>
      <url>/posts/27011.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-安装jenkins"><a href="#docker-安装jenkins" class="headerlink" title="docker 安装jenkins"></a>docker 安装jenkins</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-none"><code class="language-none">docker pull jenkins&#x2F;jenkinsmkdir -p &#x2F;var&#x2F;jenkins_homechmod 777 &#x2F;var&#x2F;jenkins_homedocker run -d -p 10240:8080 -p 10241:50000 -v &#x2F;var&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime --name myjenkins jenkins&#x2F;jenkinsdocker psdocker logs -f d49d8bf74571可以看到启动正常&gt;at jenkins.install.InstallState$3.initializeState(InstallState.java:105)&lt;br&gt;at jenkins.model.Jenkins.setInstallState(Jenkins.java:1062)&lt;br&gt;at jenkins.install.InstallUtil.proceedToNextStateFrom(InstallUtil.java:96)&lt;br&gt;at jenkins.model.Jenkins.&lt;init&gt;(Jenkins.java:952)&lt;br&gt;at hudson.model.Hudson.&lt;init&gt;(Hudson.java:86)&lt;br&gt;at hudson.model.Hudson.&lt;init&gt;(Hudson.java:82)&lt;br&gt;at hudson.WebAppMain$3.run(WebAppMain.java:235)&lt;br&gt;&lt;&#x2F;pre&gt;Aug 02, 2022 7:47:40 AM hudson.WebAppMain$3 runINFO: Jenkins is fully up and running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置国内镜像源"><a href="#配置国内镜像源" class="headerlink" title="配置国内镜像源"></a>配置国内镜像源</h2><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;var&#x2F;jenkins_home&#x2F;hudson.model.UpdateCenter.xml 将里面的url修改为清华源&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;UTF-8&#39;?&gt;&lt;sites&gt;  &lt;site&gt;    &lt;id&gt;default&lt;&#x2F;id&gt;    &lt;url&gt;http:&#x2F;&#x2F;mirror.esuni.jp&#x2F;jenkins&#x2F;updates&#x2F;update-center.json&lt;&#x2F;url&gt;  &lt;&#x2F;site&gt;&lt;&#x2F;sites&gt;cd &#x2F;var&#x2F;jenkins_home&#x2F;war&#x2F;WEB-INF&#x2F;update-center-rootCAsrm -rf *vi  mirror-adapter.crt 添加如下内容-----BEGIN CERTIFICATE-----MIICcTCCAdoCCQD&#x2F;jZ7AgrzJKTANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJDTjELMAkGA1UECAwCR0QxCzAJBgNVBAcMAlNaMQ4wDAYDVQQKDAV2aWhvbzEMMAoGA1UECwwDZGV2MREwDwYDVQQDDAhkZW1vLmNvbTEjMCEGCSqGSIb3DQEJARYUYWRtaW5AamVua2lucy16aC5jb20wHhcNMTkxMTA5MTA0MDA5WhcNMjIxMTA4MTA0MDA5WjB9MQswCQYDVQQGEwJDTjELMAkGA1UECAwCR0QxCzAJBgNVBAcMAlNaMQ4wDAYDVQQKDAV2aWhvbzEMMAoGA1UECwwDZGV2MREwDwYDVQQDDAhkZW1vLmNvbTEjMCEGCSqGSIb3DQEJARYUYWRtaW5AamVua2lucy16aC5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAN+6jN8rCIjVkQ0Q7ZbJLk4IdcHor2WdskOQMhlbR0gOyb4gRX+CorjDRjDm6mj2OohqlrtRxLGYxBnXFeQGU7wWjQHyfKDghtP51G&#x2F;672lXFtzBKXukHByHjtzrDxAutKTdolyBCuIDDGJmRk+LavIBY3&#x2F;Lxh6f0ZQSeCSJYiyxAgMBAAEwDQYJKoZIhvcNAQELBQADgYEAD92l26PoJcbl9GojK2L3pyOQjeeDm&#x2F;vV9e3REgwGmoIQzlubM0mjxpCz1J73nesoAcuplTEps&#x2F;46L7yoMjptCA3TU9FZAHNQ8dbza0vm4CF9841&#x2F;FIk8tsLtwCT6ivkAi0lXGwhX0FK7FaAyU0nNeo&#x2F;EPvDwzTim4XDK9j1WGpE&#x3D;-----END CERTIFICATE-----重启jenkinsdocker restart myjenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="访问jenkins"><a href="#访问jenkins" class="headerlink" title="访问jenkins"></a>访问jenkins</h1><p>浏览器登录<a href="http://ip:10240/">http://ip:10240/</a></p><p>vi  &#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword  获取密码</p><h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jira与gitlab分支</title>
      <link href="/posts/53151.html"/>
      <url>/posts/53151.html</url>
      
        <content type="html"><![CDATA[<h2 id="jenkins中集成需求管理工具jira"><a href="#jenkins中集成需求管理工具jira" class="headerlink" title="jenkins中集成需求管理工具jira"></a>jenkins中集成需求管理工具jira</h2><h2 id="jira中问题发布与gitlabMR-marge-request"><a href="#jira中问题发布与gitlabMR-marge-request" class="headerlink" title="jira中问题发布与gitlabMR(marge request)"></a>jira中问题发布与gitlabMR(marge request)</h2><ul><li><p>效果</p><ul><li>能够实现在jara系统对应的任务下面创建分支</li><li>或者开发人员在创建分支的时候包含jiraID子关联</li></ul></li><li><p>不足</p><ul><li>插件不稳定，资源消耗大</li><li>手动创建分支，增加人员成本</li></ul></li><li><p>改进</p><ul><li>创建故事胡总和任务自动在对应的代码库创建分支</li><li>故事或者任务在关联到帆布之后自动创建release分支</li></ul></li><li><p>实现</p><ul><li>配置jira webhook 出发jenkisn 操作gitlab系统</li></ul></li></ul><p>jira分析</p><p><img src="/1659600508967.png" alt="1659600508967"></p><p>webhookevent分析</p><p><img src="/1659600564592.png" alt="1659600564592"></p><p>gitlab接口分析</p><p><img src="/1659600616097.png" alt="1659600616097"></p><p>jenkins分析</p><p><img src="/1659600726233.png" alt="1659600726233"></p><pre class="line-numbers language-none"><code class="language-none">package org.devops&#x2F;&#x2F;封装HTTP请求def HttpReq(reqType,reqUrl,reqBody)&#123;    def apiServer &#x3D; &quot;http:&#x2F;&#x2F;192.168.1.200:8050&#x2F;rest&#x2F;api&#x2F;2&quot;      result &#x3D; httpRequest authentication: &#39;jira-admin-user&#39;,            httpMode: reqType,             contentType: &quot;APPLICATION_JSON&quot;,            consoleLogResponseBody: true,            ignoreSslErrors: true,             requestBody: reqBody,            url: &quot;$&#123;apiServer&#125;&#x2F;$&#123;reqUrl&#125;&quot;            &#x2F;&#x2F;quiet: true    return result&#125;&#x2F;&#x2F;执行JQLdef RunJql(jqlContent)&#123;    apiUrl &#x3D; &quot;search?jql&#x3D;$&#123;jqlContent&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)    return response&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslibrary&#39;) _def gitlab &#x3D; new org.devops.gitlab()def jira &#x3D; new org.devops.jira()def k8s &#x3D; new org.devops.kubernetes()pipeline &#123;    agent &#123; node &#123; label &quot;master&quot;&#125;&#125;    triggers &#123;        GenericTrigger( causeString: &#39;Trigger By Jira Server --&gt;&gt;&gt;&gt;&gt; Generic Cause&#39;,                         genericRequestVariables: [[key: &#39;projectKey&#39;, regexpFilter: &#39;&#39;]],                         genericVariables: [[defaultValue: &#39;&#39;, key: &#39;webHookData&#39;, regexpFilter: &#39;&#39;, value: &#39;$&#39;]],                         printContributedVariables: true,                         printPostContent: true,                         regexpFilterExpression: &#39;&#39;,                         regexpFilterText: &#39;&#39;,                         silentResponse: true,                         token: &quot;$&#123;JOB_NAME&#125;&quot;        )    &#125;    stages&#123;        stage(&quot;FileterData&quot;)&#123;            steps&#123;                script&#123;                    response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;webHookData&#125;&quot;&quot;&quot;                    println(response)                    env.eventType &#x3D; response[&quot;webhookEvent&quot;]                    switch(eventType) &#123;                        case &quot;jira:version_created&quot;:                            env.versionName &#x3D; response[&quot;version&quot;][&quot;name&quot;]                            currentBuild.description &#x3D; &quot; Trigger by  $&#123;eventType&#125; $&#123;versionName&#125; &quot;                            break                        case [&quot;jira:issue_created&quot; , &quot;jira:issue_updated&quot; ]:                            env.issueName &#x3D; response[&#39;issue&#39;][&#39;key&#39;]                            env.userName &#x3D; response[&#39;user&#39;][&#39;name&#39;]                            env.moduleNames &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;components&#39;]                            env.fixVersion &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;fixVersions&#39;]                            currentBuild.description &#x3D; &quot; Trigger by $&#123;userName&#125; $&#123;eventType&#125; $&#123;issueName&#125; &quot;                            break                        &#x2F;*case &quot;jira:issue_updated&quot;:                            env.issueName &#x3D; response[&#39;issue&#39;][&#39;key&#39;]                            env.userName &#x3D; response[&#39;user&#39;][&#39;name&#39;]                            env.moduleNames &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;components&#39;]                            env.fixVersion &#x3D; response[&#39;issue&#39;][&#39;fields&#39;][&#39;fixVersions&#39;]                            currentBuild.description &#x3D; &quot; Trigger by $&#123;userName&#125; $&#123;eventType&#125; $&#123;issueName&#125; &quot;                            break*&#x2F;                                                    case &quot;jira:version_released&quot;:                            env.versionName &#x3D; response[&quot;version&quot;][&quot;name&quot;]                            currentBuild.description &#x3D; &quot; Trigger by  $&#123;eventType&#125; $&#123;versionName&#125; &quot;                            break                        default:                            println(&quot;hello&quot;)                    &#125;                &#125;            &#125;        &#125;                &#x2F;*stage(&quot;CreateVersionFile&quot;)&#123;            when &#123;                environment name: &#39;eventType&#39;, value: &#39;jira:version_created&#39;             &#125;                        steps&#123;                script&#123;                    &#x2F;&#x2F;获取K8s文件                    response &#x3D; k8s.GetDeployment(&quot;demo-uat&quot;,&quot;demoapp&quot;)                    response &#x3D; response.content                    &#x2F;&#x2F;文件转换                    base64Content &#x3D; response.bytes.encodeBase64().toString()                   &#x2F;&#x2F;上传文件                   gitlab.CreateRepoFile(7,&quot;demo-uat%2f$&#123;versionName&#125;-uat.yaml&quot;,base64Content)                &#125;                        &#125;        &#125;                stage(&quot;DeleteBranch&quot;)&#123;            when &#123;                environment name: &#39;eventType&#39;, value: &#39;jira:version_released&#39;               &#125;                        steps&#123;                script&#123;                    &#x2F;&#x2F;获取issuesName                    println(&quot;project%20%3D%20$&#123;projectKey&#125;%20AND%20fixVersion%20%3D%20$&#123;versionName&#125;%20AND%20issuetype%20%3D%20Task&quot;)                    response &#x3D; jira.RunJql(&quot;project%20%3D%20$&#123;projectKey&#125;%20AND%20fixVersion%20%3D%20$&#123;versionName&#125;%20AND%20issuetype%20%3D%20Task&quot;)                                        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;                    println(response)                    issues &#x3D; [:]                    for ( issue in response[&#39;issues&#39;])&#123;                        println(issue[&quot;key&quot;])                        println(issue[&quot;fields&quot;][&quot;components&quot;])                        issues[issue[&quot;key&quot;]] &#x3D; []                                                &#x2F;&#x2F;获取issue关联的模块                        for (component in issue[&quot;fields&quot;][&quot;components&quot;] )&#123;                            issues[issue[&quot;key&quot;]].add(component[&quot;name&quot;])                        &#125;                                        &#125;                                        println(issues)                                                            &#x2F;&#x2F;搜索gitlab分支是否已合并然后删除                                                            for (issue in issues.keySet())&#123;                        for (projectName in issues[issue])&#123;                            repoName &#x3D; projectName.split(&quot;-&quot;)[0]                            projectId &#x3D; gitlab.GetProjectID(repoName, projectName)                                                        try &#123;                                println(&quot;创建合并请求  RELEASE-$&#123;versionName&#125;  ---&gt; master&quot;)                                result &#x3D; gitlab.CreateMr(projectId,&quot;RELEASE-$&#123;versionName&#125;&quot;,&quot;master&quot;,&quot;RELEASE-$&#123;versionName&#125;---&gt;master&quot;)                                result &#x3D; readJSON text: &quot;&quot;&quot;$&#123;result&#125;&quot;&quot;&quot;                                mergeId &#x3D; result[&quot;iid&quot;]                                gitlab.AcceptMr(projectId,mergeId)                                                                sleep 15                            &#125; catch(e)&#123;                                println(e)                            &#125;                            response &#x3D; gitlab.SearchProjectBranches(projectId,issue)                                                        println(response[projectId][0][&#39;merged&#39;])                                                        if (response[projectId][0][&#39;merged&#39;] &#x3D;&#x3D; false)&#123;                                println(&quot;$&#123;projectName&#125; --&gt; $&#123;issue&#125; --&gt;此分支未合并暂时忽略！&quot;)                            &#125; else &#123;                                println(&quot;$&#123;projectName&#125; --&gt; $&#123;issue&#125; --&gt;此分支已合并准备清理！&quot;)                                gitlab.DeleteBranch(projectId,issue)                            &#125;                                                &#125;                    &#125;                &#125;            &#125;        &#125;*&#x2F;        stage(&quot;CreateBranchOrMR&quot;)&#123;            when &#123;                anyOf &#123;                    environment name: &#39;eventType&#39;, value: &#39;jira:issue_created&#39;   &#x2F;&#x2F;issue 创建 &#x2F;更新                    environment name: &#39;eventType&#39;, value: &#39;jira:issue_updated&#39;                 &#125;            &#125;            steps&#123;                script&#123;                    def projectIds &#x3D; []                    println(issueName)                    fixVersion &#x3D; readJSON text: &quot;&quot;&quot;$&#123;fixVersion&#125;&quot;&quot;&quot;                    println(fixVersion.size())                    &#x2F;&#x2F;获取项目Id                    def projects &#x3D; readJSON text: &quot;&quot;&quot;$&#123;moduleNames&#125;&quot;&quot;&quot;                    for ( project in projects)&#123;                        println(project[&quot;name&quot;])                        projectName &#x3D; project[&quot;name&quot;]                        currentBuild.description +&#x3D; &quot;\n project: $&#123;projectName&#125;&quot;                        groupName &#x3D; projectName.split(&quot;-&quot;)[0]                                                try &#123;                            projectId &#x3D; gitlab.GetProjectID(groupName, projectName)                            println(projectId)                            projectIds.add(projectId)                           &#125; catch(e)&#123;                            println(e)                            println(&quot;未获取到项目ID，请检查模块名称！&quot;)                        &#125;                    &#125;                     println(projectIds)                      if (fixVersion.size() &#x3D;&#x3D; 0) &#123;                        for (id in projectIds)&#123;                            println(&quot;新建特性分支--&gt; $&#123;id&#125; --&gt; $&#123;issueName&#125;&quot;)                            currentBuild.description +&#x3D; &quot;\n 新建特性分支--&gt; $&#123;id&#125; --&gt; $&#123;issueName&#125;&quot;                            gitlab.CreateBranch(id,&quot;master&quot;,&quot;$&#123;issueName&#125;&quot;)                        &#125;                                                                        &#125; else &#123;                        fixVersion &#x3D; fixVersion[0][&#39;name&#39;]                        println(&quot;Issue关联release操作,Jenkins创建合并请求&quot;)                        currentBuild.description +&#x3D; &quot;\n Issue关联release操作,Jenkins创建合并请求 \n $&#123;issueName&#125; --&gt; RELEASE-$&#123;fixVersion&#125;&quot;                                                 for (id in projectIds)&#123;                            println(&quot;创建RELEASE--&gt;$&#123;id&#125; --&gt;$&#123;fixVersion&#125;分支&quot;)                            gitlab.CreateBranch(id,&quot;master&quot;,&quot;RELEASE-$&#123;fixVersion&#125;&quot;)                                                        println(&quot;创建合并请求 $&#123;issueName&#125; ---&gt; RELEASE-$&#123;fixVersion&#125;&quot;)                            gitlab.CreateMr(id,&quot;$&#123;issueName&#125;&quot;,&quot;RELEASE-$&#123;fixVersion&#125;&quot;,&quot;$&#123;issueName&#125;---&gt;RELEASE-$&#123;fixVersion&#125;&quot;)                                                    &#125;                    &#125;                 &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动创建分支"><a href="#自动创建分支" class="headerlink" title="自动创建分支"></a>自动创建分支</h3><p><img src="/1659601319880.png" alt="1659601319880"></p><p><img src="/1659601365441.png" alt="1659601365441"></p><p><img src="/1659601383774.png" alt="1659601383774"></p><p><img src="/1659601399747.png" alt="1659601399747"></p><h3 id="自动创建合并请求"><a href="#自动创建合并请求" class="headerlink" title="自动创建合并请求"></a>自动创建合并请求</h3><p><img src="/1659601485742.png" alt="1659601485742"></p><p><img src="/1659601518681.png" alt="1659601518681"></p><p><img src="/1659601550683.png" alt="1659601550683"></p><p><img src="/1659601569263.png" alt="1659601569263"></p><h3 id="自动清理分支"><a href="#自动清理分支" class="headerlink" title="自动清理分支"></a>自动清理分支</h3><ul><li>jiararelease 发布后自动清理分支</li><li>release发布—&gt;jenkina—&gt;清理gitlab分支（已合并的特性分支）</li></ul><p><img src="/1659601736934.png" alt="1659601736934"></p><p><img src="/1659601758471.png" alt="1659601758471"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins中集成artifactory</title>
      <link href="/posts/62927.html"/>
      <url>/posts/62927.html</url>
      
        <content type="html"><![CDATA[<h1 id="jenkins中集成artifactory"><a href="#jenkins中集成artifactory" class="headerlink" title="jenkins中集成artifactory"></a>jenkins中集成artifactory</h1><h2 id="artifactory-和nexus的区别"><a href="#artifactory-和nexus的区别" class="headerlink" title="artifactory 和nexus的区别"></a>artifactory 和nexus的区别</h2><p>参考 <a href="http://t.zoukankan.com/qingbaizhinian-p-13272346.html">制品仓库的artifactory的介绍和部署 - 走看看 (zoukankan.com)</a> </p><blockquote><p>Artifactory是目前国内唯一提供原厂技术支持的企业级全语言制品管理解决方案，具有原生高可用以及热容灾备份功能，专门针对大型企业设计。而Nexus不具备相应功能，会大大提高技术人员的学习成本，以及企业的用人成本；</p><p>b. Artifactory提供元数据功能，可以真正意义上将开发运维通过制品端到端的联系起来，需求、代码提交、各项测试结果、审批流程、构建过程以及部署过程都能一目了然的显示，彻底打破了信息烟囱化的问题，而Nexus不具备此项功能；</p><p>c. Artifactory所有功能都提供Rest API，全接口方便封装，能结合用户的不同需求进行二次开发，从而打造最贴合用户行为习惯的制品管理工具，而Nexus接口不全面；</p><p>d. Artifactory包含Xray组件，能够扫描第三方组件安全漏洞，并且能够从影响范围和影响深度两个维度快速定位安全风险，大大提高企业软件开发安全性，而Nexus不具备此功能。</p><p>e. Artifactory能够管理任何形式的二进制文件，以及相关联的非二进制文件，并提供完备的访问方式和本地仓库，而Nexus此项功能不全面。</p><p>此外 nexus常用来做私服和代理仓具， artifactory常用来做制品库</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-none"><code class="language-none">docker run -id \--privileged&#x3D;true --name&#x3D;nexus3 \-p 8081:8081 \-v $&#123;LOCALDIR&#125;&#x2F;nexus3&#x2F;nexus-data:&#x2F;nexus-data \sonatype&#x2F;nexus3:3.20.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问： <a href="http://localhost:8081/artifactory/webapp/home.html">http://localhost:8081/artifactory/webapp/home.html</a>  用户名密码： admin&#x2F;password </p><p>登录系统显示如下</p><p><img src="/1666965452765.png" alt="1666965452765"></p><p>登录系统后修改密码</p><p>可以选择构建编译仓库</p><p>Artifactory 仓库主要有四种类型：远程仓库、本地仓库、虚拟仓库及分发仓库，分别应用在如下不同的场景。</p><p>远程仓库：Artifactory 仓库支持代理公网或内网二进制软件制品仓库(Artifactory, Nexus，Harbor等)，按需获取后在本地进行缓存，可大幅度提升构建效率</p><p>本地仓库：Artifactory 本地仓库用来存储本地构建产出的软件制品。本地仓库中的软件制品通常都带有丰富的元数据，并且通过基于角色的访问控制(RBAC)实现资源隔离</p><p>虚拟仓库：为满足制品管理的多团队协作需求，虚拟仓库通过打包任意数量的远程仓库和本地仓库，暴露唯一的访问入口的方式，将制品提供者和消费者之间的耦合度降到最低，提升协作效率</p><p>分发仓库：分发仓库通过JFrog Bintray SaaS服务满足软件制品公网分发的需求，提供默认的全球CDN加速服务</p><p><img src="/1666965556299.png" alt="1666965556299"></p><p><img src="/1666965612827.png" alt="1666965612827"></p><h2 id="jenkins中集成artficatory"><a href="#jenkins中集成artficatory" class="headerlink" title="jenkins中集成artficatory"></a>jenkins中集成artficatory</h2><ul><li><p>jenkins中artifactory插件</p></li><li><p>配置artifactory仓库信息</p><p><img src="/1666965796320.png" alt="1666965796320"></p><p><img src="/1666965829033.png" alt="1666965829033"></p></li></ul><h1 id="使用artifactory插件收集构建数据"><a href="#使用artifactory插件收集构建数据" class="headerlink" title="使用artifactory插件收集构建数据"></a>使用artifactory插件收集构建数据</h1><pre class="line-numbers language-none"><code class="language-none">package org.devops&#x2F;&#x2F;Maven打包构建,上传构建信息def MavenBuild(buildShell)&#123;    def server &#x3D; Artifactory.newServer url: &quot;http:&#x2F;&#x2F;192.168.1.200:30082&#x2F;artifactory&quot;    def rtMaven &#x3D; Artifactory.newMavenBuild()    def buildInfo    server.connection.timeout &#x3D; 300    server.credentialsId &#x3D; &#39;artifactory-admin-user&#39;     &#x2F;&#x2F;maven打包    rtMaven.tool &#x3D; &#39;M2&#39;     buildInfo &#x3D; Artifactory.newBuildInfo()    String newBuildShell &#x3D; &quot;$&#123;buildShell&#125;&quot;.toString()    println(newBuildShell)    rtMaven.run pom: &#39;pom.xml&#39;, goals: newBuildShell, buildInfo: buildInfo    &#x2F;&#x2F;上传build信息    server.publishBuildInfo buildInfo&#125;def main(buildType,buildShell)&#123;    if(buildType &#x3D;&#x3D; &quot;mvn&quot;)&#123;        MavenBuild(buildShell)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/1666967385494.png" alt="1666967385494"></p><h1 id="命令规范"><a href="#命令规范" class="headerlink" title="命令规范"></a>命令规范</h1><p><img src="/1666967508528.png" alt="1666967508528"></p><h1 id="使用rtUpload插件上传制品到artifactory"><a href="#使用rtUpload插件上传制品到artifactory" class="headerlink" title="使用rtUpload插件上传制品到artifactory"></a>使用rtUpload插件上传制品到artifactory</h1><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;上传制品def PushArtifact()&#123;            &#x2F;&#x2F;重命名制品    def jarName &#x3D; sh returnStdout: true, script: &quot;cd target;ls *.jar&quot;    jarName &#x3D; jarName - &quot;\n&quot;    def pom &#x3D; readMavenPom file: &#39;pom.xml&#39;    env.pomVersion &#x3D; &quot;$&#123;pom.version&#125;&quot;    env.serviceName &#x3D; &quot;$&#123;JOB_NAME&#125;&quot;.split(&quot;_&quot;)[0]    env.buildTag &#x3D; &quot;$&#123;BUILD_ID&#125;&quot;    def newJarName &#x3D; &quot;$&#123;serviceName&#125;-$&#123;pomVersion&#125;-$&#123;buildTag&#125;.jar&quot;    println(&quot;$&#123;jarName&#125;  -------&gt;&gt;&gt; $&#123;newJarName&#125;&quot;)    sh &quot; mv target&#x2F;$&#123;jarName&#125;  target&#x2F;$&#123;newJarName&#125;&quot;        &#x2F;&#x2F;上传制品    env.businessName &#x3D; &quot;$&#123;env.JOB_NAME&#125;&quot;.split(&quot;-&quot;)[0]    env.repoName &#x3D; &quot;$&#123;businessName&#125;-$&#123;JOB_NAME.split(&quot;_&quot;)[-1].toLowerCase()&#125;&quot;    println(&quot;本次制品将要上传到$&#123;repoName&#125;仓库中!&quot;)       env.uploadDir &#x3D; &quot;$&#123;repoName&#125;&#x2F;$&#123;businessName&#125;&#x2F;$&#123;serviceName&#125;&#x2F;$&#123;pomVersion&#125;&quot;        println(&#39;上传制品&#39;)    rtUpload (        serverId: &quot;artifactory&quot;,        spec:            &quot;&quot;&quot;&#123;            &quot;files&quot;: [                &#123;                &quot;pattern&quot;: &quot;target&#x2F;$&#123;newJarName&#125;&quot;,                &quot;target&quot;: &quot;$&#123;uploadDir&#125;&#x2F;&quot;                &#125;            ]            &#125;&quot;&quot;&quot;    )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="artifactory和nexus对比"><a href="#artifactory和nexus对比" class="headerlink" title="artifactory和nexus对比"></a>artifactory和nexus对比</h1><p>最近经常被问到一个问题：”我已经在用 Nexus 管理 Maven 仓库，用 Artifactory 替换它有什么好处？”</p><p>其实这个问题在社区里早已有官方的答案：<a href="https://binary-repositories-comparison.github.io/">https://binary-repositories-comparison.github.io/</a></p><p>这个 wiki 是 Artifactory，Nexus 等各自的开发团队维护的产品功能列表，目的是保证所列出的功能是公平，公正，公开的。来看看具体的对比。</p><p>语言&amp;工具支持</p><p>Artifactory</p><blockquote><p>Maven、Docker、Bower（html&amp;js）、Chef、Puppet、CocoaPods（IOS）、Conan（C&#x2F;C++）、Debian、Ruby Gems、Git LFS、Gradle、Ivy、Npm、Nuget、Opkg、Php composer、Pypi、SBT、Vagrant（box）、Rpm、Generic（通用）</p></blockquote><p>Nexus</p><blockquote><p>Bower、Java、Npm、Docker、Nuget、Pypi</p></blockquote><p> 多 Docker 镜像注册中心</p><p>Artifactory</p><blockquote><p>支持多 Docker 镜像注册中心，用户可以做 Docker 镜像的流水线 Promotion。<br>删除 Docker 镜像时不需要停服。</p></blockquote><p>Nexus 3.0</p><blockquote><p>支持 Docker 镜像注册中心。</p><p>删除 Docker 镜像时需要停服。</p></blockquote><p>是否支持 REST API</p><p>Artifactory</p><blockquote><p>全面覆盖的 REST API。与 UI 松耦合，可以基于 REST API 实现自己的 UI。</p></blockquote><p>Nexus 3.0</p><blockquote><p>部分支持。</p></blockquote><p>元数据</p><p>Artifactory</p><blockquote><p>支持自定义属性以及属性集到任何 Layout 的二进制文件上;可以基于这些属性进行过滤搜索，并且支持Restful 方式搜索；</p><p>跨地域远程代理仓库之间可以同步属性，管理异地协同开发。</p></blockquote><p>Nexus </p><blockquote><p>Nexus2 支持 Custom metadata plugin。</p><p>Nexus3 不支持。</p></blockquote><p>CI 集成</p><p>Artifactory</p><blockquote><p>收集所有构建相关环境信息。</p><p>收集发布以及依赖的模块信息。</p><p>支持构建 Promotion 升级。</p><p>建立二进制文件和构建的关系，多维度管理二进制文件生命周期。</p><p>支持可视化的正-反向依赖关系展示。</p></blockquote><p>Nexus</p><blockquote><p>不支持。</p></blockquote><p>Checksum 检查</p><p>Artifactory</p><blockquote><p>在上传时检查 Checksum，若发现该文件已经被上传过，则不重复上传。<br>若文件丢失 Checksum，会重新计算并记录。</p></blockquote><p>Nexus 3.0</p><blockquote><p>不支持。</p></blockquote><p>主动并发下载依赖</p><p>Artifactory</p><blockquote><p>支持主动并发下载相关的依赖。例如 A依赖 B，B 依赖 C，Artifactory 在下载 A 的同时，会并发的下载 B 和 C。</p></blockquote><p>Nexus 3.0</p><blockquote><p>不支持。</p></blockquote><p>任意全局查询</p><p>Artifactory</p><blockquote><p>提供 AQL（Artifactory Query Language）支持任何条件的查询，包括排序，过滤，返回字段等等。</p></blockquote><p>Nexus 3.0</p><blockquote><p>支持有限的查询，例如通过名字查询。</p></blockquote><p>深度文件查询</p><p>Artifactory</p><blockquote><p>支持在任意可解压文件里搜索类文件，并提供地址。例如：在任意 Jar 包里找到 .Class 文件。</p></blockquote><p>Nexus 3.0</p><blockquote><p>不支持。</p></blockquote><p>仓库数据统计</p><p>Artifactory</p><blockquote><p>提供仓库大小，实际存储大小，文件数量，下载量，上传者等统计</p></blockquote><p>Nexus 3.0</p><blockquote><p>不支持</p></blockquote><p>查看 Jar 文件</p><p>Artifactory</p><blockquote><p>能够查看 Jar文件里的任何内容，包括 Jar 文件里的源代码。</p></blockquote><p>Nexus 3.0</p><blockquote><p>不支持。</p></blockquote><p>仓库复制</p><p>Artifactory</p><blockquote><p>支持文件夹级别的文件实时复制。支持并发多地复制（Multi-Push）保证多地仓库的一致性。</p></blockquote><p>Nexus 3.0</p><blockquote><p>不支持。</p></blockquote><p>支持高可用</p><p>Artifactory</p><blockquote><p>支持0宕机时间的高可用集群，并且可以自由水平扩展。支持 Active-Active 高可用。</p></blockquote><p>Nexus 3.0</p><blockquote><p>支持Master-Slave。</p></blockquote><p>数据库存储</p><p>Artifactory</p><blockquote><p>安装包默认绑定 Apache Derby。支持MySQL，PostgreSQL，Oracle，MS SQL Server。</p></blockquote><p>Nexus</p><blockquote><p>安装包默认绑定 H2。</p></blockquote><p>商业支持</p><p>Artifactory</p><blockquote><p>不限制用户数量，不限制服务器硬件配置。30天免费试用，并可以适当延期。24&#x2F;7 support，4小时响应时间。</p></blockquote><p>Nexus</p><blockquote><p>按用户数量收费，不限制服务器数量。</p><p>14天免费试用，并可以适当延期。</p><p>24&#x2F;7 support。</p></blockquote><blockquote><p>谷歌云平台, 亚马逊, 苹果，Twitter, Linkedin, Netflix, Mesosphere, 甲骨文，思科，华为，腾讯，滴滴等3000+企业，都已经使用 Artifactory 管理 Maven，Docker，Yum，NPM，C&#x2F;C++等仓库。</p></blockquote><p>JFrog 开发了专门的工具支持从 Nexus 导出数据到 Artifactory，欢迎试用！</p><p>下载JFrog Artifactory 开源版（代替 Nexus）：</p><p><a href="http://www.jfrogchina.com/open-source/">http://www.jfrogchina.com/open-source/</a></p><p>下载JFrog Artifactory 企业版(免费试用)：</p><p><a href="https://www.jfrog.com/artifactory/free-trial/?lang=zh-hans#High-Availability">https://www.jfrog.com/artifactory/free-trial/?lang=zh-hans#High-Availability</a></p><p>关于JFrog</p><p>世界领先DevOps平台</p><p>公司成立于2008年，在美国、以色列、法国、西班牙，以及中国北京市拥有超过200名员工。JFrog 拥有3000多个付费客户，其中知名公司包括如腾讯、谷歌、思科、Netflix、亚马逊、苹果等。连续两年，JFrog 被德勤评选为50家发展最快的技术公司之一，并被评为硅谷增长最快的私营企业之一。</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> 制品库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipeline模板</title>
      <link href="/posts/61292.html"/>
      <url>/posts/61292.html</url>
      
        <content type="html"><![CDATA[<h2 id="pipeline简单的流程模板"><a href="#pipeline简单的流程模板" class="headerlink" title="pipeline简单的流程模板"></a>pipeline简单的流程模板</h2><p>本实例通过流水线的方式，在jenkisn里配置全局变量（npm, ant, maven, gradle）,通过项目里配置参数buildShell来控制实际的构建工具，实现用户可以选择构建工具来打包的功能</p><p>项目准备：</p><ol><li>安装 npm ant maven gradle</li><li>配置项目参数</li><li>配置系统管理—-&gt; 全局变量配置</li></ol><pre class="line-numbers language-none"><code class="language-none">#!groovyString buildShell &#x3D; &quot;$&#123;env.buildShell&#125;&quot; &#x2F;&#x2F;jenkins项目中配置的参数名称pipeline&#123;    agent any    stages&#123;        stage(&quot;build&quot;)&#123;            steps&#123;                script&#123;                    mvnHome &#x3D; tool &quot;M2&quot;                    sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn -v&quot;                    &#x2F;&#x2F; sh &quot;$&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn $&#123;buildShell&#125;&quot; &#x2F;&#x2F;使用参数的方式进行构建                &#125;            &#125;        &#125;        stage(&quot;ant&quot;)&#123;          steps&#123;                script&#123;                    try&#123;                        antHome &#x3D; tool &quot;ANT&quot;                        &#x2F;&#x2F;sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant -v&quot;                        sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant $&#123;buildShell&#125;&quot; &#x2F;&#x2F;使用参数的方式进行构建                    &#125;catch(e)&#123;                        println(e)                    &#125;                &#125;            &#125;        &#125;        stage(&quot;gradlebuild&quot;)&#123;          steps&#123;                script&#123;                    gradleHome &#x3D; tool &quot;GRADLE&quot;                    println(&quot;$&#123;gradleHome&#125;&quot;)                    sh &quot;$&#123;gradleHome&#125;&#x2F;bin&#x2F;gradle -v&quot;                    &#x2F;&#x2F;sh &quot;$&#123;gradleHome&#125;&#x2F;bin&#x2F;gradle $&#123;buildShell&#125;&quot; &#x2F;&#x2F;使用参数的方式进行构建                &#125;            &#125;        &#125;         stage(&quot;npmbuild&quot;)&#123;          steps&#123;                script&#123;                    npmHome &#x3D; tool &quot;NPM&quot;                    &#x2F;&#x2F;sh &quot;$&#123;npmHome&#125;&#x2F;bin&#x2F;npm -v&quot;                    sh &quot;$&#123;npmHome&#125;&#x2F;bin&#x2F;npm $&#123;buildShell&#125;&quot; &#x2F;&#x2F;使用参数的方式进行构建                &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jenkins 中参数配置如下</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1658835056291.png" alt="1658835056291"></p><p>jenkinsz中配置全局工具（M2 ANT GRADLE NPM）</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1658835277618.png" alt="1658835277618"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nexus制品上传-jenkins</title>
      <link href="/posts/58658.html"/>
      <url>/posts/58658.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nexus制品上传"><a href="#Nexus制品上传" class="headerlink" title="Nexus制品上传"></a>Nexus制品上传</h1><h2 id="Nexus-的作用"><a href="#Nexus-的作用" class="headerlink" title="Nexus 的作用"></a>Nexus 的作用</h2><ol><li>私服仓库： 本地maven私服加快构建速度</li><li>代理仓库： 将公网等第三方的库代理到本地</li></ol><h2 id="nexus安装"><a href="#nexus安装" class="headerlink" title="nexus安装"></a>nexus安装</h2><ol><li><p>docker pull sonatype&#x2F;nexus3 </p></li><li><p>mkdir -p &#x2F;docker&#x2F;nexus&#x2F;</p></li><li><p>chmod 755 &#x2F;docker&#x2F;nexus&#x2F; </p></li><li><p>docker run -d –restart always –name nexus3 -p 8081:8081 -v &#x2F;docker&#x2F;nexus:&#x2F;var&#x2F;nexus-data sonatype&#x2F;nexus3 </p></li><li><p>docker exec -it 6eea6c9aacb2 &#x2F;bin&#x2F;bash </p></li><li><p>cat  &#x2F;nexus-data&#x2F;admin.password  获取admin命令</p></li><li><p>登录 nexus ip:8081 后修改管理员密码</p></li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>每一个包就是一个组件，nexus中的依赖包就是组件可以是jar包，可以是war包，可以是图片等等</p><p><img src="/1658852905389.png" alt="1658852905389"></p><p><img src="/1658852953930.png" alt="1658852953930"></p><h2 id="assets-资产"><a href="#assets-资产" class="headerlink" title="assets 资产"></a>assets 资产</h2><p><img src="/1658853014961.png" alt="1658853014961"></p><h2 id="maven下载机制"><a href="#maven下载机制" class="headerlink" title="maven下载机制"></a>maven下载机制</h2><p><img src="/1658853224984.png" alt="1658853224984"></p><h2 id="组件坐标"><a href="#组件坐标" class="headerlink" title="组件坐标"></a>组件坐标</h2><p>注意gav的定义</p><p><img src="/1658853327095.png" alt="1658853327095"></p><p>maven 存储库存储两种类型的组件，稳定版和快照，实际工作中不建议用快照</p><p>新建仓库，大多情况下有两种，一种是本地，一种是代理</p><p><img src="/1658904085333.png" alt="1658904085333"></p><h2 id="mvn-deploy上传制品"><a href="#mvn-deploy上传制品" class="headerlink" title="mvn deploy上传制品"></a>mvn deploy上传制品</h2><ol><li><p>创建仓库maven-hosted</p></li><li><p>配置maven-hosted 认证</p></li><li><p>在maven的setting.xml添加私库信息</p><pre class="line-numbers language-none"><code class="language-none">&lt;servers&gt;   &lt;server&gt;     &lt;id&gt;maven-nexus-repo&lt;&#x2F;id&gt;     &lt;username&gt;admin&lt;&#x2F;username&gt;     &lt;password&gt;Nexus&lt;&#x2F;password&gt;   &lt;&#x2F;server&gt;    &lt;&#x2F;servers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明： id 为对应的nexus中仓库的id</p></li><li><p>将mvn上传的方式集成到jenkin的共享库中</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取POM中的坐标def GetGav()&#123;   &#x2F;&#x2F;上传制品    def jarName &#x3D; sh returnStdout: true, script: &quot;cd target;ls *.jar&quot;    env.jarName &#x3D; jarName - &quot;\n&quot;        def pom &#x3D; readMavenPom file: &#39;pom.xml&#39;    env.pomVersion &#x3D; &quot;$&#123;pom.version&#125;&quot;    env.pomArtifact &#x3D; &quot;$&#123;pom.artifactId&#125;&quot;    env.pomPackaging &#x3D; &quot;$&#123;pom.packaging&#125;&quot;    env.pomGroupId &#x3D; &quot;$&#123;pom.groupId&#125;&quot;        println(&quot;$&#123;pomGroupId&#125;-$&#123;pomArtifact&#125;-$&#123;pomVersion&#125;-$&#123;pomPackaging&#125;&quot;)    return [&quot;$&#123;pomGroupId&#125;&quot;,&quot;$&#123;pomArtifact&#125;&quot;,&quot;$&#123;pomVersion&#125;&quot;,&quot;$&#123;pomPackaging&#125;&quot;]&#125;&#x2F;&#x2F;Nexus plugin deploydef NexusUpload()&#123;    &#x2F;&#x2F;use nexus plugin    nexusArtifactUploader artifacts: [[artifactId: &quot;$&#123;pomArtifact&#125;&quot;,                                         classifier: &#39;&#39;,                                         file: &quot;$&#123;filePath&#125;&quot;,                                         type: &quot;$&#123;pomPackaging&#125;&quot;]],                             credentialsId: &#39;0c2b0fb5-3ef4-44fe-91d4-86906387a2c4&#39;,                             groupId: &quot;$&#123;pomGroupId&#125;&quot;,                             nexusUrl: &#39;192.168.0.131:8081&#39;,                             nexusVersion: &#39;nexus3&#39;,                             protocol: &#39;http&#39;,                             repository: &quot;$&#123;repoName&#125;&quot;,                             version: &quot;$&#123;pomVersion&#125;&quot;&#125;&#x2F;&#x2F;mvn deploydef MavenUpload()&#123;              def mvnHome &#x3D; tool &quot;M2&quot;    sh  &quot;&quot;&quot;         cd target&#x2F;        $&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn deploy:deploy-file -Dmaven.test.skip&#x3D;true  \                                -Dfile&#x3D;$&#123;jarName&#125; -DgroupId&#x3D;$&#123;pomGroupId&#125; \                                -DartifactId&#x3D;$&#123;pomArtifact&#125; -Dversion&#x3D;$&#123;pomVersion&#125;  \                                -Dpackaging&#x3D;$&#123;pomPackaging&#125; -DrepositoryId&#x3D;maven-nexus-repo \                                -Durl&#x3D;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven-nexus-repo         &quot;&quot;&quot;&#125;&#x2F;&#x2F;制品晋级def ArtifactUpdate(updateType,artifactUrl)&#123;    &#x2F;&#x2F;晋级策略    if (&quot;$&#123;updateType&#125;&quot; &#x3D;&#x3D; &quot;snapshot -&gt; release&quot;)&#123;        println(&quot;snapshot -&gt; release&quot;)        &#x2F;&#x2F;下载原始制品        sh &quot;  rm -fr updates &amp;&amp; mkdir updates &amp;&amp; cd updates &amp;&amp; wget $&#123;artifactUrl&#125; &amp;&amp; ls -l &quot;        &#x2F;&#x2F;获取artifactID                 artifactUrl &#x3D; artifactUrl -  &quot;http:&#x2F;&#x2F;192.168.1.200:30083&#x2F;repository&#x2F;maven-hostd&#x2F;&quot;        artifactUrl &#x3D; artifactUrl.split(&quot;&#x2F;&quot;).toList()                println(artifactUrl.size())        env.jarName &#x3D; artifactUrl[-1]         env.pomVersion &#x3D; artifactUrl[-2].replace(&quot;SNAPSHOT&quot;,&quot;RELEASE&quot;)        env.pomArtifact &#x3D; artifactUrl[-3]        pomPackaging &#x3D; artifactUrl[-1]        pomPackaging &#x3D; pomPackaging.split(&quot;\\.&quot;).toList()[-1]        env.pomPackaging &#x3D; pomPackaging[-1]        env.pomGroupId &#x3D; artifactUrl[0..-4].join(&quot;.&quot;)        println(&quot;$&#123;pomGroupId&#125;##$&#123;pomArtifact&#125;##$&#123;pomVersion&#125;##$&#123;pomPackaging&#125;&quot;)        env.newJarName &#x3D; &quot;$&#123;pomArtifact&#125;-$&#123;pomVersion&#125;.$&#123;pomPackaging&#125;&quot;                &#x2F;&#x2F;更改名称        sh &quot; cd updates &amp;&amp; mv $&#123;jarName&#125; $&#123;newJarName&#125; &quot;                &#x2F;&#x2F;上传制品        env.repoName &#x3D; &quot;maven-release&quot;        env.filePath &#x3D; &quot;updates&#x2F;$&#123;newJarName&#125;&quot;        NexusUpload()    &#125;&#125;def main(uploadType)&#123;    GetGav()    if (&quot;$&#123;uploadType&#125;&quot; &#x3D;&#x3D; &quot;maven&quot;)&#123;        MavenUpload()    &#125; else if (&quot;$&#123;uploadType&#125;&quot; &#x3D;&#x3D; &quot;nexus&quot;) &#123;        env.repoName &#x3D; &quot;maven-nexus-repo&quot;        env.filePath &#x3D; &quot;target&#x2F;$&#123;jarName&#125;&quot;        NexusUpload()    &#125;&#125;def MavenUpload()&#123;              def mvnHome &#x3D; tool &quot;M2&quot;    sh  &quot;&quot;&quot;         cd target&#x2F;        $&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn deploy:deploy-file -Dmaven.test.skip&#x3D;true  \                                -Dfile&#x3D;$&#123;jarName&#125; -DgroupId&#x3D;$&#123;pomGroupId&#125; \                                -DartifactId&#x3D;$&#123;pomArtifact&#125; -Dversion&#x3D;$&#123;pomVersion&#125;  \                                -Dpackaging&#x3D;$&#123;pomPackaging&#125; -DrepositoryId&#x3D;maven-nexus-repo \                                -Durl&#x3D;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven-nexus-repo         &quot;&quot;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>在pipeline打包完成后，调用函数，执行上传制品函数，参数选择maven</p><p><img src="/1659079686737.png" alt="1659079686737"></p></li></ol></li></ol><h3 id="nexus-插件上传制品"><a href="#nexus-插件上传制品" class="headerlink" title="nexus 插件上传制品"></a>nexus 插件上传制品</h3><ol><li><p>系统设置—&gt;插件管理—&gt;可用插件 选择nexus-artifact-uploader插件安装</p></li><li><p>我的视图—&gt;对应项目—流水线语法—&gt;片段生成器—&gt;nexus对应的选项，输入相关信息注意： 片段生成器都是单引号，引入到pipeline中需要使用双号</p></li></ol><p>   <img src="/1659080003445.png" alt="1659080003445"></p><ol start="3"><li><p>需要修改pom文件，注意不容version对应不同的仓库类型, 如果远程仓库时mix类型，则可以向其中传入发布版和快照， 如果为release ，则仅可以向远程仓库中传入发布版，如果为snapshot,则仅可以上传快照版，在pom文件中，版本必须大写如1.1-RELEASE 1.1-SNAPSHOT</p></li><li><p>发布版</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;  &lt;groupId&gt;com.mycompany.app&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;my-app&lt;&#x2F;artifactId&gt;  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;  &lt;version&gt;1.1-RELEASE&lt;&#x2F;version&gt;  &lt;name&gt;my-app&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>快照版</li></ol>   <pre class="line-numbers language-none"><code class="language-none">&lt;groupId&gt;com.mycompany.app&lt;&#x2F;groupId&gt; &lt;artifactId&gt;my-app&lt;&#x2F;artifactId&gt; &lt;packaging&gt;jar&lt;&#x2F;packaging&gt; &lt;version&gt;1.1-SNAPSHOT&lt;&#x2F;version&gt; &lt;name&gt;my-app&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>开始执行流水线</p></li><li><p>看到如下日志，则说明执行成功</p></li></ol><pre><code>  <pre class="line-numbers language-none"><code class="language-none">Type: jarVersion: 1.1-RELEASEFile: my-app-1.1-RELEASE.jarRepository:maven_nexus_releaseUploading: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-RELEASE&#x2F;my-app-1.1-RELEASE.jar100 % completed (2.6 kB &#x2F; 2.6 kB).Uploaded: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-RELEASE&#x2F;my-app-1.1-RELEASE.jar (2.6 kB at 6.0 kB&#x2F;s)Uploading artifact my-app-1.1-RELEASE.jar completed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  </code></pre><ol start="2"><li><p>看到如下日志，则说明版本和对应的仓库类型不一致， 示例是向发布版仓库上传快照打印的日志</p><pre class="line-numbers language-none"><code class="language-none">Version: 1.1-SNAPSHOTFile: my-app-1.1-SNAPSHOT.jarRepository:maven_nexus_releaseDownloading: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-SNAPSHOT&#x2F;maven-metadata.xmlUploading: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-SNAPSHOT&#x2F;my-app-1.1-20220730.160033-1.jar100 % completed (2.6 kB &#x2F; 2.6 kB).Failed to deploy artifacts: Could not transfer artifact com.mycompany.app:my-app:jar:1.1-20220730.160033-1 from&#x2F;to maven_nexus_release (http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release): Failed to transfer file: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-SNAPSHOT&#x2F;my-app-1.1-20220730.160033-1.jar. Return code is: 400, ReasonPhrase:Repository version policy: RELEASE does not allow version: 1.1-20220730.160033-1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>安装插件是一直是pending状态或者一直是等待状态，大概率是插件源不好导致，此时需要访问 <a href="http://ip/pluginManager/advanced%EF%BC%8C">http://ip/pluginManager/advanced，</a> 找到升级站点，将url替换为清华站点<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p>然后提交。 然后重启服务<a href="http://ip/restart">http://ip/restart</a></p><p><img src="/1659036474888.png" alt="1659036474888"></p><h2 id="制品发布-选择制品"><a href="#制品发布-选择制品" class="headerlink" title="制品发布-选择制品"></a>制品发布-选择制品</h2><ol><li><p>安装插件 maven-artifact-choicelistprovider</p></li><li><p>jenkins–我的视图—对应的项目–配置–参数化构建—添加参数—extentsible choice 添加artifactUrl参数，选择保存</p></li></ol><p><img src="/1659086813031.png" alt="1659086813031"></p><ol start="3"><li>在参数化构建中选择需要发布的版本</li></ol><p>   <img src="/1659198397205.png" alt="1659198397205"></p><ol start="4"><li>在jenkinsfiel中引入artifactUrl参数</li></ol><p><img src="/1659083972581.png" alt="1659083972581"></p><ol start="4"><li>在nexus中开放权限</li></ol><p><img src="/1659083801260.png" alt="1659083801260"></p><ol start="5"><li>开启对应的流水线</li></ol><h2 id="制品晋级"><a href="#制品晋级" class="headerlink" title="制品晋级"></a>制品晋级</h2><p>说明： 将snapshot版本晋级为release版本</p><p>准备： </p><ol><li>新建release仓库为maven_nexus_release</li><li>新建晋级流水线maven_service_UPDATE</li></ol><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>制品晋级共享库nexu.groovy中编写如下代码</li></ol>   <pre class="line-numbers language-none"><code class="language-none">vi &#x2F;src&#x2F;org&#x2F;devops&#x2F;nexus.groovy&#x2F;&#x2F;&#x2F;Nexus plugin deploydef NexusUpload()&#123;    &#x2F;&#x2F;use nexus plugin    nexusArtifactUploader artifacts: [[artifactId: &quot;$&#123;pomArtifact&#125;&quot;,                                         classifier: &#39;&#39;,                                         file: &quot;$&#123;filePath&#125;&quot;,                                         type: &quot;$&#123;pomPackaging&#125;&quot;]],                             credentialsId: &#39;0c2b0fb5-3ef4-44fe-91d4-86906387a2c4&#39;,                             groupId: &quot;$&#123;pomGroupId&#125;&quot;,                             nexusUrl: &#39;192.168.0.131:8081&#39;,                             nexusVersion: &#39;nexus3&#39;,                             protocol: &#39;http&#39;,                             repository: &quot;$&#123;repoName&#125;&quot;,                             version: &quot;$&#123;pomVersion&#125;&quot;&#125;&#x2F;&#x2F;制品晋级def ArtifactUpdate(updateType,artifactUrl)&#123;    &#x2F;&#x2F;晋级策略    if (&quot;$&#123;updateType&#125;&quot; &#x3D;&#x3D; &quot;snapshot -&gt; release&quot;)&#123;        println(&quot;snapshot -&gt; release&quot;)        &#x2F;&#x2F;下载原始制品        sh &quot;  rm -fr updates &amp;&amp; mkdir updates &amp;&amp; cd updates &amp;&amp; wget $&#123;artifactUrl&#125; &amp;&amp; ls -l &quot;        &#x2F;&#x2F;获取artifactID                 artifactUrl &#x3D; artifactUrl -  &quot;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven-nexus-repo&#x2F;&quot;        artifactUrl &#x3D; artifactUrl.split(&quot;&#x2F;&quot;).toList()        &#x2F;&#x2F; [com, mycompany, app, my-app, 1.0-SNAPSHOT, my-app-1.0-20220730.110019-1.jar]                println(artifactUrl.size())        println(&quot;晋级url&quot;)        println(artifactUrl)        env.jarName &#x3D; artifactUrl[-1]         env.pomVersion &#x3D; artifactUrl[-2].replace(&quot;SNAPSHOT&quot;,&quot;RELEASE&quot;)        env.pomVersion &#x3D; &quot;1.2-RELEASE&quot;        env.pomArtifact &#x3D; artifactUrl[-3]        pomPackaging &#x3D; artifactUrl[-1]        pomPackaging &#x3D; pomPackaging.split(&quot;\\.&quot;).toList()[-1]        env.pomPackaging &#x3D; pomPackaging[-1]        env.pomGroupId &#x3D; artifactUrl[0..2].join(&quot;.&quot;)        println(&quot;$&#123;pomGroupId&#125;##$&#123;pomArtifact&#125;##$&#123;pomVersion&#125;##$&#123;pomPackaging&#125;&quot;)        env.newJarName &#x3D; &quot;$&#123;pomArtifact&#125;-$&#123;pomVersion&#125;.$&#123;pomPackaging&#125;&quot;                &#x2F;&#x2F;更改名称        sh &quot; cd updates &amp;&amp; mv $&#123;jarName&#125; $&#123;newJarName&#125; &quot;                &#x2F;&#x2F;上传制品        env.repoName &#x3D; &quot;maven_nexus_release&quot;           env.filePath &#x3D; &quot;updates&#x2F;$&#123;newJarName&#125;&quot;        NexusUpload()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>新建制品晋级jenkinsfile</li></ol>   <pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslib&#39;) _def nexus &#x3D; new org.devops.nexus()def nexusapi &#x3D; new org.devops.nexusapi()String updateType &#x3D; &quot;$&#123;env.updateType&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;String pkgVersion &#x3D; &quot;$&#123;env.pkgVersion&#125;&quot;pipeline&#123;    agent any        stages&#123;            stage(&quot;UpdateArtifact&quot;)&#123;            steps&#123;                script&#123;                   nexus.ArtifactUpdate(updateType,artifactUrl)                                      &#x2F;&#x2F;nexusapi.GetRepoComponents(&quot;maven-hostd&quot;)                   &#x2F;&#x2F;nexusapi.GetSingleComponents(&quot;maven-hostd&quot;,&quot;com.mycompany.app&quot;,&quot;my-app&quot;,pkgVersion)                                &#125;                        &#125;                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>jenkins新建晋级流水线</li></ol><p>   <img src="/1659330053765.png" alt="1659330053765"></p><ol start="4"><li><p>选择需要晋级的制品，开始晋级任务</p><p><img src="/1659330155106.png" alt="1659330155106"></p><p><img src="/1659330192806.png" alt="1659330192806"></p></li></ol><h2 id="docker-启动失败排查"><a href="#docker-启动失败排查" class="headerlink" title="docker 启动失败排查"></a>docker 启动失败排查</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>systemctl start docker后报错：</p><pre class="line-numbers language-none"><code class="language-none">[root@bogon zhangtianqing]# systemctl start dockerJob for docker.service failed because the control process exited with error code.See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>思路：</p><ol><li><p>按照提示执行systemctl status docker.service 或者journalctl -xe，结果如下，但是都看不出来时什么问题</p><pre class="line-numbers language-none"><code class="language-none">Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt&#x2F;db.go:772 +0x82Jul 29 14:00:06 bogon containerd[1842]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).getMarked(0x203000, &#123;0x5585afab3d38, 0xc000081f00&#125;)Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;metadata&#x2F;db.go:369 +0x70Jul 29 14:00:06 bogon containerd[1842]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).GarbageCollect(0xc000209a40, &#123;0x5585afab3d38, 0xc000081&gt;Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;metadata&#x2F;db.go:285 +0x8bJul 29 14:00:06 bogon containerd[1842]: github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.(*gcScheduler).run(0xc000082de0, &#123;0x5585afab3d38, 0xc0000&gt;Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:310 +0x4eaJul 29 14:00:06 bogon containerd[1842]: created by github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.init.0.func1Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:132 +0x37dJul 29 14:00:06 bogon systemd[1]: containerd.service: Main process exited, code&#x3D;exited, status&#x3D;2&#x2F;INVALIDARGUMENTJul 29 14:00:06 bogon systemd[1]: containerd.service: Failed with result &#39;exit-code&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过docker 日志看，执行</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">dockerd --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   得到如下结果</p>   <pre class="line-numbers language-none"><code class="language-none">INFO[2022-07-29T14:04:22.235455758-04:00] Starting up                                  failed to start daemon: pid file found, ensure docker is not running or delete &#x2F;var&#x2F;run&#x2F;docker.pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>依据日志，删除对应的pid重新启动</li></ol>   <pre class="line-numbers language-none"><code class="language-none">rm -f &#x2F;var&#x2F;run&#x2F;docker.pidsystemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="虚拟机因为unmount-and-xfs-repair问题启动失败"><a href="#虚拟机因为unmount-and-xfs-repair问题启动失败" class="headerlink" title="虚拟机因为unmount and xfs_repair问题启动失败"></a>虚拟机因为unmount and xfs_repair问题启动失败</h2><p>   虚拟机突然断电，导致文件分区损坏，进入不了系统。</p><p>   解决办法：</p><ol><li><p>开机按e 进入单用户模式</p></li><li><p>找到linux行，在最后添加rd.break, 按下ctrl+x 进入救援模式</p><ol start="3"><li>ls -l &#x2F;dev&#x2F;mapper</li><li>查看&#x2F;dm0</li><li>unmount &#x2F;dev&#x2F;mapper&#x2F;cs-root  # 卸载目录</li><li>xfs_repair -L &#x2F;dev&#x2F;mapper&#x2F;cs-root  # 修复</li><li>reboot</li></ol><h2 id="nexusAPI分装到共享库"><a href="#nexusAPI分装到共享库" class="headerlink" title="nexusAPI分装到共享库"></a>nexusAPI分装到共享库</h2><ol><li><p>新建共享库文件</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;src&#x2F;org&#x2F;devops&#x2F;nexusapi.groovypackage org.devops&#x2F;&#x2F;封装HTTPdef HttpReq(reqType,reqUrl,reqBody)&#123;    def sonarServer &#x3D; &quot;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;service&#x2F;rest&quot;       result &#x3D; httpRequest authentication: &#39;0c2b0fb5-3ef4-44fe-91d4-86906387a2c4&#39;,            httpMode: reqType,             contentType: &quot;APPLICATION_JSON&quot;,            consoleLogResponseBody: true,            ignoreSslErrors: true,             requestBody: reqBody,            url: &quot;$&#123;sonarServer&#125;&#x2F;$&#123;reqUrl&#125;&quot;,            quiet: true        return result&#125;&#x2F;&#x2F;获取仓库中所有组件def GetRepoComponents(repoName)&#123;    apiUrl &#x3D; &quot;&#x2F;v1&#x2F;components?repository&#x3D;$&#123;repoName&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;    println(&quot;组件个数&quot;)    println(response[&quot;items&quot;].size())    return response[&quot;items&quot;]&#125;&#x2F;&#x2F;获取单件组件def GetComponentsId(repoName,groupId,artifactId,version)&#123;    println(&quot;获取单件组件ID&quot;)    result &#x3D; GetRepoComponents(repoName)         for (component in result)&#123;                if (component[&quot;group&quot;] &#x3D;&#x3D; groupId &amp;&amp; component[&quot;name&quot;] &#x3D;&#x3D; artifactId &amp;&amp; component[&quot;version&quot;] &#x3D;&#x3D; version  )&#123;                        componentId &#x3D; component[&quot;id&quot;]                        return componentId        &#125;    &#125;        println(componentId)&#125;&#x2F;&#x2F;获取组件信息def GetSingleComponents(repoName,groupId,artifactId,version)&#123;    println(&quot;获取单件组件信息&quot;)    componentId &#x3D; GetComponentsId(repoName,groupId,artifactId,version)    apiUrl &#x3D; &quot;&#x2F;v1&#x2F;components&#x2F;$&#123;componentId&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;    println(response[&quot;assets&quot;][&quot;downloadUrl&quot;])&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在jenkinsfile中调用</p><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslib&#39;) _def nexus &#x3D; new org.devops.nexus()def nexusapi &#x3D; new org.devops.nexusapi()String updateType &#x3D; &quot;$&#123;env.updateType&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;String pkgVersion &#x3D; &quot;$&#123;env.pkgVersion&#125;&quot;pipeline&#123;    agent any        stages&#123;            stage(&quot;UpdateArtifact&quot;)&#123;            steps&#123;                script&#123;                   nexus.ArtifactUpdate(updateType,artifactUrl)                                      nexusapi.GetRepoComponents(&quot;maven_nexus_release&quot;)                   &#x2F;&#x2F; nexusapi.GetSingleComponents(&quot;maven_nexus_release&quot;,&quot;com.mycompany.app&quot;,&quot;my-app&quot;,pkgVersion)                                &#125;                        &#125;                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行流水线调用成功截图如下</p><p><img src="/1659355127049.png" alt="1659355127049"></p></li><li><p>获取单个单个组件的信息</p></li><li><p>在jenkins中新建pkgVersion参数，值为某个版本号</p></li><li><p>打开jenkinsfile中的注释代码，开始执行</p></li><li><p>截图如下</p><p><img src="/1659355323336.png" alt="1659355323336"></p></li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> nexus </tag>
            
            <tag> 制品库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/58658.html"/>
      <url>/posts/58658.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nexus制品上传"><a href="#Nexus制品上传" class="headerlink" title="Nexus制品上传"></a>Nexus制品上传</h2><h2 id="Nexus-的作用"><a href="#Nexus-的作用" class="headerlink" title="Nexus 的作用"></a>Nexus 的作用</h2><ol><li>私服仓库： 本地maven私服加快构建速度</li><li>代理仓库： 将公网等第三方的库代理到本地</li></ol><h2 id="nexus安装"><a href="#nexus安装" class="headerlink" title="nexus安装"></a>nexus安装</h2><ol><li><p>docker pull sonatype&#x2F;nexus3 </p></li><li><p>mkdir -p &#x2F;docker&#x2F;nexus&#x2F;</p></li><li><p>chmod 755 &#x2F;docker&#x2F;nexus&#x2F; </p></li><li><p>docker run -d –restart always –name nexus3 -p 8081:8081 -v &#x2F;docker&#x2F;nexus:&#x2F;var&#x2F;nexus-data sonatype&#x2F;nexus3 </p></li><li><p>docker exec -it 6eea6c9aacb2 &#x2F;bin&#x2F;bash </p></li><li><p>cat  &#x2F;nexus-data&#x2F;admin.password  获取admin命令</p></li><li><p>登录 nexus ip:8081 后修改管理员密码</p></li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>每一个包就是一个组件，nexus中的依赖包就是组件可以是jar包，可以是war包，可以是图片等等</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1658852905389.png" alt="1658852905389"></p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1658852953930.png" alt="1658852953930"></p><h2 id="assets-资产"><a href="#assets-资产" class="headerlink" title="assets 资产"></a>assets 资产</h2><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1658853014961.png" alt="1658853014961"></p><h2 id="maven下载机制"><a href="#maven下载机制" class="headerlink" title="maven下载机制"></a>maven下载机制</h2><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1658853224984.png" alt="1658853224984"></p><h2 id="组件坐标"><a href="#组件坐标" class="headerlink" title="组件坐标"></a>组件坐标</h2><p>注意gav的定义</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1658853327095.png" alt="1658853327095"></p><p>maven 存储库存储两种类型的组件，稳定版和快照，实际工作中不建议用快照</p><p>新建仓库，大多情况下有两种，一种是本地，一种是代理</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1658904085333.png" alt="1658904085333"></p><h2 id="mvn-deploy上传制品"><a href="#mvn-deploy上传制品" class="headerlink" title="mvn deploy上传制品"></a>mvn deploy上传制品</h2><ol><li><p>创建仓库maven-hosted</p></li><li><p>配置maven-hosted 认证</p></li><li><p>在maven的setting.xml添加私库信息</p><pre class="line-numbers language-none"><code class="language-none">&lt;servers&gt;   &lt;server&gt;     &lt;id&gt;maven-nexus-repo&lt;&#x2F;id&gt;     &lt;username&gt;admin&lt;&#x2F;username&gt;     &lt;password&gt;Nexus&lt;&#x2F;password&gt;   &lt;&#x2F;server&gt;    &lt;&#x2F;servers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明： id 为对应的nexus中仓库的id</p></li><li><p>将mvn上传的方式集成到jenkin的共享库中</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取POM中的坐标def GetGav()&#123;   &#x2F;&#x2F;上传制品    def jarName &#x3D; sh returnStdout: true, script: &quot;cd target;ls *.jar&quot;    env.jarName &#x3D; jarName - &quot;\n&quot;        def pom &#x3D; readMavenPom file: &#39;pom.xml&#39;    env.pomVersion &#x3D; &quot;$&#123;pom.version&#125;&quot;    env.pomArtifact &#x3D; &quot;$&#123;pom.artifactId&#125;&quot;    env.pomPackaging &#x3D; &quot;$&#123;pom.packaging&#125;&quot;    env.pomGroupId &#x3D; &quot;$&#123;pom.groupId&#125;&quot;        println(&quot;$&#123;pomGroupId&#125;-$&#123;pomArtifact&#125;-$&#123;pomVersion&#125;-$&#123;pomPackaging&#125;&quot;)    return [&quot;$&#123;pomGroupId&#125;&quot;,&quot;$&#123;pomArtifact&#125;&quot;,&quot;$&#123;pomVersion&#125;&quot;,&quot;$&#123;pomPackaging&#125;&quot;]&#125;&#x2F;&#x2F;Nexus plugin deploydef NexusUpload()&#123;    &#x2F;&#x2F;use nexus plugin    nexusArtifactUploader artifacts: [[artifactId: &quot;$&#123;pomArtifact&#125;&quot;,                                         classifier: &#39;&#39;,                                         file: &quot;$&#123;filePath&#125;&quot;,                                         type: &quot;$&#123;pomPackaging&#125;&quot;]],                             credentialsId: &#39;0c2b0fb5-3ef4-44fe-91d4-86906387a2c4&#39;,                             groupId: &quot;$&#123;pomGroupId&#125;&quot;,                             nexusUrl: &#39;192.168.0.131:8081&#39;,                             nexusVersion: &#39;nexus3&#39;,                             protocol: &#39;http&#39;,                             repository: &quot;$&#123;repoName&#125;&quot;,                             version: &quot;$&#123;pomVersion&#125;&quot;&#125;&#x2F;&#x2F;mvn deploydef MavenUpload()&#123;              def mvnHome &#x3D; tool &quot;M2&quot;    sh  &quot;&quot;&quot;         cd target&#x2F;        $&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn deploy:deploy-file -Dmaven.test.skip&#x3D;true  \                                -Dfile&#x3D;$&#123;jarName&#125; -DgroupId&#x3D;$&#123;pomGroupId&#125; \                                -DartifactId&#x3D;$&#123;pomArtifact&#125; -Dversion&#x3D;$&#123;pomVersion&#125;  \                                -Dpackaging&#x3D;$&#123;pomPackaging&#125; -DrepositoryId&#x3D;maven-nexus-repo \                                -Durl&#x3D;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven-nexus-repo         &quot;&quot;&quot;&#125;&#x2F;&#x2F;制品晋级def ArtifactUpdate(updateType,artifactUrl)&#123;    &#x2F;&#x2F;晋级策略    if (&quot;$&#123;updateType&#125;&quot; &#x3D;&#x3D; &quot;snapshot -&gt; release&quot;)&#123;        println(&quot;snapshot -&gt; release&quot;)        &#x2F;&#x2F;下载原始制品        sh &quot;  rm -fr updates &amp;&amp; mkdir updates &amp;&amp; cd updates &amp;&amp; wget $&#123;artifactUrl&#125; &amp;&amp; ls -l &quot;        &#x2F;&#x2F;获取artifactID                 artifactUrl &#x3D; artifactUrl -  &quot;http:&#x2F;&#x2F;192.168.1.200:30083&#x2F;repository&#x2F;maven-hostd&#x2F;&quot;        artifactUrl &#x3D; artifactUrl.split(&quot;&#x2F;&quot;).toList()                println(artifactUrl.size())        env.jarName &#x3D; artifactUrl[-1]         env.pomVersion &#x3D; artifactUrl[-2].replace(&quot;SNAPSHOT&quot;,&quot;RELEASE&quot;)        env.pomArtifact &#x3D; artifactUrl[-3]        pomPackaging &#x3D; artifactUrl[-1]        pomPackaging &#x3D; pomPackaging.split(&quot;\\.&quot;).toList()[-1]        env.pomPackaging &#x3D; pomPackaging[-1]        env.pomGroupId &#x3D; artifactUrl[0..-4].join(&quot;.&quot;)        println(&quot;$&#123;pomGroupId&#125;##$&#123;pomArtifact&#125;##$&#123;pomVersion&#125;##$&#123;pomPackaging&#125;&quot;)        env.newJarName &#x3D; &quot;$&#123;pomArtifact&#125;-$&#123;pomVersion&#125;.$&#123;pomPackaging&#125;&quot;                &#x2F;&#x2F;更改名称        sh &quot; cd updates &amp;&amp; mv $&#123;jarName&#125; $&#123;newJarName&#125; &quot;                &#x2F;&#x2F;上传制品        env.repoName &#x3D; &quot;maven-release&quot;        env.filePath &#x3D; &quot;updates&#x2F;$&#123;newJarName&#125;&quot;        NexusUpload()    &#125;&#125;def main(uploadType)&#123;    GetGav()    if (&quot;$&#123;uploadType&#125;&quot; &#x3D;&#x3D; &quot;maven&quot;)&#123;        MavenUpload()    &#125; else if (&quot;$&#123;uploadType&#125;&quot; &#x3D;&#x3D; &quot;nexus&quot;) &#123;        env.repoName &#x3D; &quot;maven-nexus-repo&quot;        env.filePath &#x3D; &quot;target&#x2F;$&#123;jarName&#125;&quot;        NexusUpload()    &#125;&#125;def MavenUpload()&#123;              def mvnHome &#x3D; tool &quot;M2&quot;    sh  &quot;&quot;&quot;         cd target&#x2F;        $&#123;mvnHome&#125;&#x2F;bin&#x2F;mvn deploy:deploy-file -Dmaven.test.skip&#x3D;true  \                                -Dfile&#x3D;$&#123;jarName&#125; -DgroupId&#x3D;$&#123;pomGroupId&#125; \                                -DartifactId&#x3D;$&#123;pomArtifact&#125; -Dversion&#x3D;$&#123;pomVersion&#125;  \                                -Dpackaging&#x3D;$&#123;pomPackaging&#125; -DrepositoryId&#x3D;maven-nexus-repo \                                -Durl&#x3D;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven-nexus-repo         &quot;&quot;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>在pipeline打包完成后，调用函数，执行上传制品函数，参数选择maven</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659079686737.png" alt="1659079686737"></p></li></ol></li></ol><h3 id="nexus-插件上传制品"><a href="#nexus-插件上传制品" class="headerlink" title="nexus 插件上传制品"></a>nexus 插件上传制品</h3><ol><li><p>系统设置—&gt;插件管理—&gt;可用插件 选择nexus-artifact-uploader插件安装</p></li><li><p>我的视图—&gt;对应项目—流水线语法—&gt;片段生成器—&gt;nexus对应的选项，输入相关信息注意： 片段生成器都是单引号，引入到pipeline中需要使用双号</p></li></ol><p>   <img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659080003445.png" alt="1659080003445"></p><ol start="3"><li><p>需要修改pom文件，注意不容version对应不同的仓库类型, 如果远程仓库时mix类型，则可以向其中传入发布版和快照， 如果为release ，则仅可以向远程仓库中传入发布版，如果为snapshot,则仅可以上传快照版，在pom文件中，版本必须大写如1.1-RELEASE 1.1-SNAPSHOT</p></li><li><p>发布版</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;  &lt;groupId&gt;com.mycompany.app&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;my-app&lt;&#x2F;artifactId&gt;  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;  &lt;version&gt;1.1-RELEASE&lt;&#x2F;version&gt;  &lt;name&gt;my-app&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>快照版</li></ol>   <pre class="line-numbers language-none"><code class="language-none">&lt;groupId&gt;com.mycompany.app&lt;&#x2F;groupId&gt; &lt;artifactId&gt;my-app&lt;&#x2F;artifactId&gt; &lt;packaging&gt;jar&lt;&#x2F;packaging&gt; &lt;version&gt;1.1-SNAPSHOT&lt;&#x2F;version&gt; &lt;name&gt;my-app&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>开始执行流水线</p></li><li><p>看到如下日志，则说明执行成功</p></li></ol><pre><code>  <pre class="line-numbers language-none"><code class="language-none">Type: jarVersion: 1.1-RELEASEFile: my-app-1.1-RELEASE.jarRepository:maven_nexus_releaseUploading: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-RELEASE&#x2F;my-app-1.1-RELEASE.jar100 % completed (2.6 kB &#x2F; 2.6 kB).Uploaded: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-RELEASE&#x2F;my-app-1.1-RELEASE.jar (2.6 kB at 6.0 kB&#x2F;s)Uploading artifact my-app-1.1-RELEASE.jar completed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  </code></pre><ol start="2"><li><p>看到如下日志，则说明版本和对应的仓库类型不一致， 示例是向发布版仓库上传快照打印的日志</p><pre class="line-numbers language-none"><code class="language-none">Version: 1.1-SNAPSHOTFile: my-app-1.1-SNAPSHOT.jarRepository:maven_nexus_releaseDownloading: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-SNAPSHOT&#x2F;maven-metadata.xmlUploading: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-SNAPSHOT&#x2F;my-app-1.1-20220730.160033-1.jar100 % completed (2.6 kB &#x2F; 2.6 kB).Failed to deploy artifacts: Could not transfer artifact com.mycompany.app:my-app:jar:1.1-20220730.160033-1 from&#x2F;to maven_nexus_release (http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release): Failed to transfer file: http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven_nexus_release&#x2F;com&#x2F;mycompany&#x2F;app&#x2F;my-app&#x2F;1.1-SNAPSHOT&#x2F;my-app-1.1-20220730.160033-1.jar. Return code is: 400, ReasonPhrase:Repository version policy: RELEASE does not allow version: 1.1-20220730.160033-1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>安装插件是一直是pending状态或者一直是等待状态，大概率是插件源不好导致，此时需要访问 <a href="http://ip/pluginManager/advanced%EF%BC%8C">http://ip/pluginManager/advanced，</a> 找到升级站点，将url替换为清华站点<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p>然后提交。 然后重启服务<a href="http://ip/restart">http://ip/restart</a></p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659036474888.png" alt="1659036474888"></p><h2 id="制品发布-选择制品"><a href="#制品发布-选择制品" class="headerlink" title="制品发布-选择制品"></a>制品发布-选择制品</h2><ol><li><p>安装插件 maven-artifact-choicelistprovider</p></li><li><p>jenkins–我的视图—对应的项目–配置–参数化构建—添加参数—extentsible choice 添加artifactUrl参数，选择保存</p></li></ol><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659086813031.png" alt="1659086813031"></p><ol start="3"><li>在参数化构建中选择需要发布的版本</li></ol><p>   <img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659198397205.png" alt="1659198397205"></p><ol start="4"><li>在jenkinsfiel中引入artifactUrl参数</li></ol><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659083972581.png" alt="1659083972581"></p><ol start="4"><li>在nexus中开放权限</li></ol><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659083801260.png" alt="1659083801260"></p><ol start="5"><li>开启对应的流水线</li></ol><h2 id="制品晋级"><a href="#制品晋级" class="headerlink" title="制品晋级"></a>制品晋级</h2><p>说明： 将snapshot版本晋级为release版本</p><p>准备： </p><ol><li>新建release仓库为maven_nexus_release</li><li>新建晋级流水线maven_service_UPDATE</li></ol><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>制品晋级共享库nexu.groovy中编写如下代码</li></ol>   <pre class="line-numbers language-none"><code class="language-none">vi &#x2F;src&#x2F;org&#x2F;devops&#x2F;nexus.groovy&#x2F;&#x2F;&#x2F;Nexus plugin deploydef NexusUpload()&#123;    &#x2F;&#x2F;use nexus plugin    nexusArtifactUploader artifacts: [[artifactId: &quot;$&#123;pomArtifact&#125;&quot;,                                         classifier: &#39;&#39;,                                         file: &quot;$&#123;filePath&#125;&quot;,                                         type: &quot;$&#123;pomPackaging&#125;&quot;]],                             credentialsId: &#39;0c2b0fb5-3ef4-44fe-91d4-86906387a2c4&#39;,                             groupId: &quot;$&#123;pomGroupId&#125;&quot;,                             nexusUrl: &#39;192.168.0.131:8081&#39;,                             nexusVersion: &#39;nexus3&#39;,                             protocol: &#39;http&#39;,                             repository: &quot;$&#123;repoName&#125;&quot;,                             version: &quot;$&#123;pomVersion&#125;&quot;&#125;&#x2F;&#x2F;制品晋级def ArtifactUpdate(updateType,artifactUrl)&#123;    &#x2F;&#x2F;晋级策略    if (&quot;$&#123;updateType&#125;&quot; &#x3D;&#x3D; &quot;snapshot -&gt; release&quot;)&#123;        println(&quot;snapshot -&gt; release&quot;)        &#x2F;&#x2F;下载原始制品        sh &quot;  rm -fr updates &amp;&amp; mkdir updates &amp;&amp; cd updates &amp;&amp; wget $&#123;artifactUrl&#125; &amp;&amp; ls -l &quot;        &#x2F;&#x2F;获取artifactID                 artifactUrl &#x3D; artifactUrl -  &quot;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;repository&#x2F;maven-nexus-repo&#x2F;&quot;        artifactUrl &#x3D; artifactUrl.split(&quot;&#x2F;&quot;).toList()        &#x2F;&#x2F; [com, mycompany, app, my-app, 1.0-SNAPSHOT, my-app-1.0-20220730.110019-1.jar]                println(artifactUrl.size())        println(&quot;晋级url&quot;)        println(artifactUrl)        env.jarName &#x3D; artifactUrl[-1]         env.pomVersion &#x3D; artifactUrl[-2].replace(&quot;SNAPSHOT&quot;,&quot;RELEASE&quot;)        env.pomVersion &#x3D; &quot;1.2-RELEASE&quot;        env.pomArtifact &#x3D; artifactUrl[-3]        pomPackaging &#x3D; artifactUrl[-1]        pomPackaging &#x3D; pomPackaging.split(&quot;\\.&quot;).toList()[-1]        env.pomPackaging &#x3D; pomPackaging[-1]        env.pomGroupId &#x3D; artifactUrl[0..2].join(&quot;.&quot;)        println(&quot;$&#123;pomGroupId&#125;##$&#123;pomArtifact&#125;##$&#123;pomVersion&#125;##$&#123;pomPackaging&#125;&quot;)        env.newJarName &#x3D; &quot;$&#123;pomArtifact&#125;-$&#123;pomVersion&#125;.$&#123;pomPackaging&#125;&quot;                &#x2F;&#x2F;更改名称        sh &quot; cd updates &amp;&amp; mv $&#123;jarName&#125; $&#123;newJarName&#125; &quot;                &#x2F;&#x2F;上传制品        env.repoName &#x3D; &quot;maven_nexus_release&quot;           env.filePath &#x3D; &quot;updates&#x2F;$&#123;newJarName&#125;&quot;        NexusUpload()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>新建制品晋级jenkinsfile</li></ol>   <pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslib&#39;) _def nexus &#x3D; new org.devops.nexus()def nexusapi &#x3D; new org.devops.nexusapi()String updateType &#x3D; &quot;$&#123;env.updateType&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;String pkgVersion &#x3D; &quot;$&#123;env.pkgVersion&#125;&quot;pipeline&#123;    agent any        stages&#123;            stage(&quot;UpdateArtifact&quot;)&#123;            steps&#123;                script&#123;                   nexus.ArtifactUpdate(updateType,artifactUrl)                                      &#x2F;&#x2F;nexusapi.GetRepoComponents(&quot;maven-hostd&quot;)                   &#x2F;&#x2F;nexusapi.GetSingleComponents(&quot;maven-hostd&quot;,&quot;com.mycompany.app&quot;,&quot;my-app&quot;,pkgVersion)                                &#125;                        &#125;                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>jenkins新建晋级流水线</li></ol><p>   <img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659330053765.png" alt="1659330053765"></p><ol start="4"><li><p>选择需要晋级的制品，开始晋级任务</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659330155106.png" alt="1659330155106"></p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659330192806.png" alt="1659330192806"></p></li></ol><h2 id="docker-启动失败排查"><a href="#docker-启动失败排查" class="headerlink" title="docker 启动失败排查"></a>docker 启动失败排查</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>systemctl start docker后报错：</p><pre class="line-numbers language-none"><code class="language-none">[root@bogon zhangtianqing]# systemctl start dockerJob for docker.service failed because the control process exited with error code.See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>思路：</p><ol><li><p>按照提示执行systemctl status docker.service 或者journalctl -xe，结果如下，但是都看不出来时什么问题</p><pre class="line-numbers language-none"><code class="language-none">Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt&#x2F;db.go:772 +0x82Jul 29 14:00:06 bogon containerd[1842]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).getMarked(0x203000, &#123;0x5585afab3d38, 0xc000081f00&#125;)Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;metadata&#x2F;db.go:369 +0x70Jul 29 14:00:06 bogon containerd[1842]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).GarbageCollect(0xc000209a40, &#123;0x5585afab3d38, 0xc000081&gt;Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;metadata&#x2F;db.go:285 +0x8bJul 29 14:00:06 bogon containerd[1842]: github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.(*gcScheduler).run(0xc000082de0, &#123;0x5585afab3d38, 0xc0000&gt;Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:310 +0x4eaJul 29 14:00:06 bogon containerd[1842]: created by github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.init.0.func1Jul 29 14:00:06 bogon containerd[1842]:         &#x2F;root&#x2F;rpmbuild&#x2F;BUILD&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:132 +0x37dJul 29 14:00:06 bogon systemd[1]: containerd.service: Main process exited, code&#x3D;exited, status&#x3D;2&#x2F;INVALIDARGUMENTJul 29 14:00:06 bogon systemd[1]: containerd.service: Failed with result &#39;exit-code&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过docker 日志看，执行</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">dockerd --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   得到如下结果</p>   <pre class="line-numbers language-none"><code class="language-none">INFO[2022-07-29T14:04:22.235455758-04:00] Starting up                                  failed to start daemon: pid file found, ensure docker is not running or delete &#x2F;var&#x2F;run&#x2F;docker.pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>依据日志，删除对应的pid重新启动</li></ol>   <pre class="line-numbers language-none"><code class="language-none">rm -f &#x2F;var&#x2F;run&#x2F;docker.pidsystemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="虚拟机因为unmount-and-xfs-repair问题启动失败"><a href="#虚拟机因为unmount-and-xfs-repair问题启动失败" class="headerlink" title="虚拟机因为unmount and xfs_repair问题启动失败"></a>虚拟机因为unmount and xfs_repair问题启动失败</h2><p>   虚拟机突然断电，导致文件分区损坏，进入不了系统。</p><p>   解决办法：</p><ol><li><p>开机按e 进入单用户模式</p></li><li><p>找到linux行，在最后添加rd.break, 按下ctrl+x 进入救援模式</p><ol start="3"><li>ls -l &#x2F;dev&#x2F;mapper</li><li>查看&#x2F;dm0</li><li>unmount &#x2F;dev&#x2F;mapper&#x2F;cs-root  # 卸载目录</li><li>xfs_repair -L &#x2F;dev&#x2F;mapper&#x2F;cs-root  # 修复</li><li>reboot</li></ol><h2 id="nexusAPI分装到共享库"><a href="#nexusAPI分装到共享库" class="headerlink" title="nexusAPI分装到共享库"></a>nexusAPI分装到共享库</h2><ol><li><p>新建共享库文件</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;src&#x2F;org&#x2F;devops&#x2F;nexusapi.groovypackage org.devops&#x2F;&#x2F;封装HTTPdef HttpReq(reqType,reqUrl,reqBody)&#123;    def sonarServer &#x3D; &quot;http:&#x2F;&#x2F;192.168.0.131:8081&#x2F;service&#x2F;rest&quot;       result &#x3D; httpRequest authentication: &#39;0c2b0fb5-3ef4-44fe-91d4-86906387a2c4&#39;,            httpMode: reqType,             contentType: &quot;APPLICATION_JSON&quot;,            consoleLogResponseBody: true,            ignoreSslErrors: true,             requestBody: reqBody,            url: &quot;$&#123;sonarServer&#125;&#x2F;$&#123;reqUrl&#125;&quot;,            quiet: true        return result&#125;&#x2F;&#x2F;获取仓库中所有组件def GetRepoComponents(repoName)&#123;    apiUrl &#x3D; &quot;&#x2F;v1&#x2F;components?repository&#x3D;$&#123;repoName&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;    println(&quot;组件个数&quot;)    println(response[&quot;items&quot;].size())    return response[&quot;items&quot;]&#125;&#x2F;&#x2F;获取单件组件def GetComponentsId(repoName,groupId,artifactId,version)&#123;    println(&quot;获取单件组件ID&quot;)    result &#x3D; GetRepoComponents(repoName)         for (component in result)&#123;                if (component[&quot;group&quot;] &#x3D;&#x3D; groupId &amp;&amp; component[&quot;name&quot;] &#x3D;&#x3D; artifactId &amp;&amp; component[&quot;version&quot;] &#x3D;&#x3D; version  )&#123;                        componentId &#x3D; component[&quot;id&quot;]                        return componentId        &#125;    &#125;        println(componentId)&#125;&#x2F;&#x2F;获取组件信息def GetSingleComponents(repoName,groupId,artifactId,version)&#123;    println(&quot;获取单件组件信息&quot;)    componentId &#x3D; GetComponentsId(repoName,groupId,artifactId,version)    apiUrl &#x3D; &quot;&#x2F;v1&#x2F;components&#x2F;$&#123;componentId&#125;&quot;    response &#x3D; HttpReq(&quot;GET&quot;,apiUrl,&#39;&#39;)        response &#x3D; readJSON text: &quot;&quot;&quot;$&#123;response.content&#125;&quot;&quot;&quot;    println(response[&quot;assets&quot;][&quot;downloadUrl&quot;])&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在jenkinsfile中调用</p><pre class="line-numbers language-none"><code class="language-none">#!groovy@Library(&#39;jenkinslib&#39;) _def nexus &#x3D; new org.devops.nexus()def nexusapi &#x3D; new org.devops.nexusapi()String updateType &#x3D; &quot;$&#123;env.updateType&#125;&quot;String artifactUrl &#x3D; &quot;$&#123;env.artifactUrl&#125;&quot;String pkgVersion &#x3D; &quot;$&#123;env.pkgVersion&#125;&quot;pipeline&#123;    agent any        stages&#123;            stage(&quot;UpdateArtifact&quot;)&#123;            steps&#123;                script&#123;                   nexus.ArtifactUpdate(updateType,artifactUrl)                                      nexusapi.GetRepoComponents(&quot;maven_nexus_release&quot;)                   &#x2F;&#x2F; nexusapi.GetSingleComponents(&quot;maven_nexus_release&quot;,&quot;com.mycompany.app&quot;,&quot;my-app&quot;,pkgVersion)                                &#125;                        &#125;                &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行流水线调用成功截图如下</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659355127049.png" alt="1659355127049"></p></li><li><p>获取单个单个组件的信息</p></li><li><p>在jenkins中新建pkgVersion参数，值为某个版本号</p></li><li><p>打开jenkinsfile中的注释代码，开始执行</p></li><li><p>截图如下</p><p><img src="/Nexus%E5%88%B6%E5%93%81%E4%B8%8A%E4%BC%A0-jenkins/1659355323336.png" alt="1659355323336"></p></li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker+harbor+jenkins安装命令汇总</title>
      <link href="/posts/19046.html"/>
      <url>/posts/19046.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h1><p>1.1 sudo yum install -y yum-utils<br>1.2 yum-config-manager     –add-repo     <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><br>1.3  yum install docker-ce docker-ce-cli containerd.io<br>1.4 systemctl start docker<br>1.5 yum erase podman buildah (centos解决podman的错误)</p><h1 id="2-docker-compose"><a href="#2-docker-compose" class="headerlink" title="2. docker-compose"></a>2. docker-compose</h1><p>2.1 curl -L <a href="https://github.com/docker/compose/releases/download/1.27.4/docker-compose-%60uname">https://github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname</a> -s<code>-</code>uname -m&#96; -o &#x2F;usr&#x2F;bin&#x2F;docker-compose<br>2.2 chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p><h1 id="3-安装docker-harbor"><a href="#3-安装docker-harbor" class="headerlink" title="3. 安装docker-harbor"></a>3. 安装docker-harbor</h1><p>3.1 wget  <a href="https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-online-installer-v1.8.4.tgz">https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-online-installer-v1.8.4.tgz</a><br>3.2 tar -xf harbor-offline-installer-v2.0.0.tgz<br>3.3 mv harbor-offline-installer-v2.0.0 &#x2F;usr&#x2F;local&#x2F;harbor<br>3.4 vim &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.yml<br>3.5 hostname: 10.168.4.44:5000  #本机IP+端口<br>3.6 port: 5000<br>3.7 .&#x2F;install<br>3.8. 新建用户<br>3.9. 新建项目<br>3.10. 将用户加入项目</p><h1 id="4-docker-机器连接测试"><a href="#4-docker-机器连接测试" class="headerlink" title="4. docker 机器连接测试"></a>4. docker 机器连接测试</h1><p>4.1 vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</p><pre class="line-numbers language-none"><code class="language-none">&#123; &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;rzugk9e7.mirror.aliyuncs.com&quot;],&quot;insecure-registries&quot;: [&quot;192.168.72.130:5000&quot;] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​4.2 systemctl daemon-reload<br>​4.3 systemctl restart docker<br>​4.4 docker login<br>​4.5 docker tag nginx 192.168.72.130:5000&#x2F;jenkins&#x2F;nginx:v1.0  ip:port&#x2F;project&#x2F;tag<br>​4.6 docker push 192.168.72.130:5000&#x2F;jenkins&#x2F;nginx:v1.0<br>​4.7 查看docker 服务其上是否有该镜像</p><h1 id="5-jenkins-服务器安装jenkins"><a href="#5-jenkins-服务器安装jenkins" class="headerlink" title="5. jenkins 服务器安装jenkins"></a>5. jenkins 服务器安装jenkins</h1><p>  5.1 先安装docker<br>  5.2 wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo <a href="https://pkg.jenkins.io/redhat-stable/jenkins.repo">https://pkg.jenkins.io/redhat-stable/jenkins.repo</a><br>  5.3 rpm –import <a href="https://pkg.jenkins.io/redhat-stable/jenkins.io.key">https://pkg.jenkins.io/redhat-stable/jenkins.io.key</a><br>  5.4 yum install epel-release<br>  5.5 yum install java-11-openjdk-devel<br>  5.6 yum install jenkins<br>  5.7 yum install git<br>  5.8 systemctl start jenkins<br>  5.9 firewall-cmd –permanent –zone&#x3D;public –add-port&#x3D;8080&#x2F;tcp<br>  5.10 firewall-cmd –reload<br>  5.11 vi &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword<br>  5.22 ip+port 访问<br>  5.13 下载插件<br>  5.14 rpm -ql jenkins 查看jenkins 目录<br>  5.15 点击系统管理–&gt;管理用户–&gt;新建用户</p><p>  5.17 点击系统管理–&gt;插件管理–&gt;可选插件–&gt;搜索 Role-based Authorization Strategy 并安装<br>  5.18 点击系统管理–&gt;Configure Global Security(全局安全配置)–&gt;授权策略：修改为 Role-Base Strategy<br>  5.19 添加用户</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab+jenkins+docker+harbor实现流程自动化</title>
      <link href="/posts/16669.html"/>
      <url>/posts/16669.html</url>
      
        <content type="html"><![CDATA[<h1 id="CI-x2F-CD-K8S"><a href="#CI-x2F-CD-K8S" class="headerlink" title="CI&#x2F;CD+K8S"></a>CI&#x2F;CD+K8S</h1><h2 id="一、部署流程"><a href="#一、部署流程" class="headerlink" title="一、部署流程"></a>一、部署流程</h2><p>1、研发push到github代码库</p><p>2、Jenkins 构建，pull git代码 使用maven进行编译打包</p><p>3、打包生成的代码，生成一个新版本的镜像，push到本地docker仓库harbor</p><p>4、发布，测试机器 pull 新版本的镜像，并删除原来的容器，重新运行新版本镜像。</p><h2 id="二、环境说明"><a href="#二、环境说明" class="headerlink" title="二、环境说明"></a>二、环境说明</h2><p><strong>服务及服务器说明-Aliyun环境</strong></p><blockquote><p><strong>1、代码仓库</strong></p><p>​github 或者 git-server 或者 gitlab</p><p>​本次实验使用github仓库 <a href="https://github.com/">https://github.com/</a></p><p><img src="/image-20200512165810293.png" alt="image-20200512165810293"></p><p><strong>2、容器镜像仓库</strong></p><p>​ip:  </p><p>​公 161.117.37.192</p><p>​私 172.21.39.43</p><p>​主机名：harbor</p><p><strong>3、CI&#x2F;CD服务器</strong></p><p>​ip：        </p><p>​公 161.117.34.103</p><p>​私 172.21.39.44</p><p>​主机名：jenkins</p><p>​软件：</p><p>​jdk</p><p>​jenkins</p><p>​git</p><p>​maven</p><p>​docker</p><p><strong>4、应用服务器</strong></p><p>​ip：172.21.39.45</p><p>​主机名：docker</p><p>​软件： </p><p>​jq</p><p>​docker</p><p>​或者 k8s集群</p></blockquote><h2 id="三、部署Harbor镜像仓库"><a href="#三、部署Harbor镜像仓库" class="headerlink" title="三、部署Harbor镜像仓库"></a>三、部署Harbor镜像仓库</h2><h3 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">官方地址：https://github.com/goharbor/harbor/releases下载离线安装包：需要翻墙<span class="token comment"># wget https://storage.googleapis.com/harbor-releases/release-1.8.0/harbor-offline-installer-v1.8.0.tgz</span><span class="token comment"># yum -y install  lrzsz</span>安装compose<span class="token comment"># curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><span class="token comment"># chmod +x /usr/local/bin/docker-compose</span><span class="token comment"># tar xf harbor-offline-installer-v1.8.0.tgz</span>配置harbor<span class="token comment"># cd harbor</span><span class="token comment"># vim harbor.yml // 主机名要可以解析(需要部署dns服务器，用/etc/hosts文件没有用)，如果不可以解析，可以使用IP地址,需要修改的内容如下</span><span class="token function">hostname</span> <span class="token operator">=</span> <span class="token number">192.168</span>.1.200ui_url_protocol <span class="token operator">=</span> https（如果要用https这里就需要改，现在我们先不用https，这里不需要改）<span class="token comment"># ./install.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问测试：<a href="http://192.168.1.200/">http://192.168.1.200</a></p><p><img src="/image-20200509173109582.png" alt="image-20200509173109582"></p><p><img src="/image-20200509172959892.png" alt="image-20200509172959892"></p><p>创建仓库</p><p><img src="/image-20200509173218474.png" alt="image-20200509173218474"></p><p><img src="/image-20200509173227261.png" alt="image-20200509173227261"></p><p>创建账户</p><p><img src="/image-20200509173242826.png" alt="image-20200509173242826"></p><p><img src="/image-20200509173250977.png" alt="image-20200509173250977"></p><p>项目授权</p><p><img src="/image-20200509173311987.png" alt="image-20200509173311987"></p><p><img src="/image-20200509173319302.png" alt="image-20200509173319302"></p><h3 id="2、测试Harbor"><a href="#2、测试Harbor" class="headerlink" title="2、测试Harbor"></a>2、测试Harbor</h3><p><strong>上传测试</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/docker/daemon.json</span> <span class="token punctuation">&#123;</span> <span class="token string">"insecure-registries"</span>:<span class="token punctuation">[</span><span class="token string">"172.21.39.43:80"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># docker login 172.21.39.43:80</span>    Username: wing    Password:    WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.    Configure a credential helper to remove this warning. See    https://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>        Login Succeeded    <span class="token comment"># docker images</span>    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE    nginx               latest              be1f31be9a87        <span class="token number">13</span> days ago         109MB        <span class="token comment"># docker image tag nginx 172.21.39.43:80/jenkins/nginx:v0</span>    <span class="token comment"># docker push 172.21.39.43:80/jenkins/nginx:v0</span>    The push refers to repository <span class="token punctuation">[</span>harbor.io/library/nginx<span class="token punctuation">]</span>    92b86b4e7957: Pushed    94ad191a291b: Pushed    8b15606a9e3e: Pushed    latest: digest: sha256:204a9a8e65061b10b92ad361dd6f406248404fe60efd5d6a8f2595f18bb37aad size: <span class="token number">948</span>在web界面中查看镜像是否被上传到仓库中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何重启harbor"><a href="#如何重启harbor" class="headerlink" title="如何重启harbor"></a>如何重启harbor</h3><pre class="line-numbers language-none"><code class="language-none"># docker-compose down# vim harbor.yml# .&#x2F;prepare# docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="【扩展】重置Harbor登陆密码"><a href="#【扩展】重置Harbor登陆密码" class="headerlink" title="【扩展】重置Harbor登陆密码"></a>【扩展】重置Harbor登陆密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">harbor现使用postgresql 数据库。不再支持mysql注：    卸载重新重新安装也不可以，原因是没有删除harbor的数据，harbor数据在/data/目录下边，如果真要重新安装需要将这个也删除，备份或者迁移，请使用这个目录的数据。harbor版本为：1.8.0官方的安装包为： harbor-offline-installer-v1.8.0.tgz具体步骤：<span class="token number">1</span>、进入<span class="token punctuation">[</span>harbor-db<span class="token punctuation">]</span>容器内部     <span class="token comment"># docker exec -it harbor-db /bin/bash</span><span class="token number">2</span>、进入postgresql命令行，     psql <span class="token parameter variable">-h</span> postgresql <span class="token parameter variable">-d</span> postgres <span class="token parameter variable">-U</span> postgres  <span class="token comment">#这要输入默认密码：root123 。</span>     psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> postgres <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">5432</span>  <span class="token comment">#或者用这个可以不输入密码。</span><span class="token number">3</span>、切换到harbor所在的数据库     <span class="token comment"># \c registry</span><span class="token number">4</span>、查看harbor_user表     <span class="token comment"># select * from harbor_user;</span><span class="token number">5</span>、例如修改admin的密码，修改为初始化密码Harbor12345 ，修改好了之后再可以从web ui上再改一次。     <span class="token comment"># update harbor_user set password='a71a7d0df981a61cbb53a97ed8d78f3e', salt='ah3fdh5b7yxepalg9z45bu8zb36sszmr'  where username='admin';</span><span class="token number">6</span>、退出 <span class="token punctuation">\</span>q 退出postgresql，exit退出容器。     <span class="token comment"># \q </span>     <span class="token comment"># exit </span>完成后通过WEB UI，就可以使用admin 、Harbor12345 这个密码登录了，记得修改这个默认密码哦，避免安全问题。有更加狠点的招数，将admin账户改成别的名字，减少被攻击面：     <span class="token comment"># update harbor_user set username='wing' where user_id=1;              #更改admin用户名为wing</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Dockerfile文件"><a href="#3、Dockerfile文件" class="headerlink" title="3、Dockerfile文件"></a>3、Dockerfile文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># cd /root/jenkins/docker-file/maven-docker-test_war</span><span class="token comment"># vim Dockerfile</span><span class="token comment"># Version 1.0</span><span class="token comment"># Base images. </span>FROM tomcat<span class="token punctuation">:</span>8.0.36<span class="token punctuation">-</span>alpine<span class="token comment"># Author.</span>MAINTAINER wing &lt;276267003@qq.com<span class="token punctuation">></span><span class="token comment"># Add war.</span>ADD maven<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>test.war /usr/local/tomcat/webapps/<span class="token comment"># Define working directory.</span>WORKDIR /usr/local/tomcat/bin/<span class="token comment"># Define environment variables.</span>ENV PATH /usr/local/tomcat/bin<span class="token punctuation">:</span>$PATH<span class="token comment"># Define default command. </span>CMD <span class="token punctuation">[</span><span class="token string">"catalina.sh"</span><span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">]</span><span class="token comment"># Expose ports.</span>EXPOSE 8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Harbor权限相关"><a href="#4、Harbor权限相关" class="headerlink" title="4、Harbor权限相关"></a>4、Harbor权限相关</h3><p>harbor仓库的权限得配置一下，不然curl命令访问不到</p><p><img src="/image-20200509174138114.png" alt="image-20200509174138114"></p><h2 id="四、业务服务器"><a href="#四、业务服务器" class="headerlink" title="四、业务服务器"></a>四、业务服务器</h2><h3 id="1、安装软件"><a href="#1、安装软件" class="headerlink" title="1、安装软件"></a>1、安装软件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum install docker jq -y   //后面的脚本会用到,jq类似于sed/awk专门处理json格式的文件</span><span class="token comment"># systemctl start docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、预先配置"><a href="#2、预先配置" class="headerlink" title="2、预先配置"></a>2、预先配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在业务机器上配置：<span class="token comment"># visudo</span><span class="token comment">#</span><span class="token comment">#Defaults    requiretty</span>Defaults:root <span class="token operator">!</span>requiretty否则在机器业务机器上执行脚本时会报错：<span class="token punctuation">[</span>SSH<span class="token punctuation">]</span> executing<span class="token punctuation">..</span>.sudo: sorry, you must have a <span class="token function">tty</span> to run <span class="token function">sudo</span>docker: invalid reference format.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、Jenkins服务部署配置"><a href="#五、Jenkins服务部署配置" class="headerlink" title="五、Jenkins服务部署配置"></a>五、Jenkins服务部署配置</h2><h3 id="1、软件安装"><a href="#1、软件安装" class="headerlink" title="1、软件安装"></a>1、软件安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># yum install -y jenkins git maven</span><span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># systemctl start jenkins</span><span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep jenkins</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、预先配置-1"><a href="#2、预先配置-1" class="headerlink" title="2、预先配置"></a>2、预先配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">由于在Jenkins机器上docker是使用root用户运行的，而Jenkins是使用普通用户jenkins运行的，所以要先配置下jenkins用户可以使用docker命令。<span class="token punctuation">[</span>root@jenkins ~<span class="token punctuation">]</span><span class="token comment"># visudo</span>jenkins <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>      NOPASSWD: /usr/bin/docker另外在Jenkins机器上配置：<span class="token comment"># Disable "ssh hostname sudo &lt;cmd>", because it will show the password in clear.</span><span class="token comment">#         You have to run "ssh -t hostname sudo &lt;cmd>".</span><span class="token comment">#</span><span class="token comment">#Defaults    requiretty</span>Defaults:jenkins <span class="token operator">!</span>requiretty如果不配置这个，在执行下面脚本时，会报错误：+ <span class="token function">cp</span> <span class="token parameter variable">-f</span> /home/jenkins/.jenkins/workspace/godseyeBranchForNov/godseye-container/target/godseye-container-wisedu.war /home/jenkins/docker-file/godseye_war/godseye.war+ <span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">-u</span> jkzhao <span class="token parameter variable">-p</span> Wisedu123 <span class="token parameter variable">-e</span> 01115004@wisedu.com <span class="token number">172.16</span>.206.32sudo: sorry, you must have a <span class="token function">tty</span> to run <span class="token function">sudo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、安装插件"><a href="#3、安装插件" class="headerlink" title="3、安装插件"></a>3、安装插件</h3><p>浏览器登录Jenkins，<a href="http://161.117.34.103:8080，进行初始化配置">http://161.117.34.103:8080，进行初始化配置</a></p><p>点击“系统管理”，点击“管理插件”，搜索插件”Maven Integration”和”SSH”，进行安装。</p><h3 id="4、配置远程机器"><a href="#4、配置远程机器" class="headerlink" title="4、配置远程机器"></a>4、配置远程机器</h3><p>登录Jenkins，点击“Credentials”，点击“Add domain”。</p><p><img src="/image-20200512101026784.png" alt="image-20200512101026784"></p><p><img src="/image-20200512101109339.png" alt="image-20200512101109339"></p><p><img src="/image-20200512101120858.png" alt="image-20200512101120858"></p><p><img src="/image-20200512101145738.png" alt="image-20200512101145738"></p><p>点击“系统管理”，“系统配置”，找到“SSH remote hosts”。</p><p><img src="/image-20200512101210294.png" alt="image-20200512101210294"></p><h2 id="六、Jenkins构建Job"><a href="#六、Jenkins构建Job" class="headerlink" title="六、Jenkins构建Job"></a>六、Jenkins构建Job</h2><h3 id="1、构建Maven风格的Job"><a href="#1、构建Maven风格的Job" class="headerlink" title="1、构建Maven风格的Job"></a>1、构建Maven风格的Job</h3><p>代码地址： <a href="https://github.com/yanqiang20172017/easy-springmvc-maven.git">https://github.com/yanqiang20172017/easy-springmvc-maven.git</a></p><p><img src="/image-20200512101348331.png" alt="image-20200512101348331"></p><p>Goals and options填写：clean package -Dmaven.test.skip&#x3D;true</p><p><img src="/image-20200512101411044.png" alt="image-20200512101411044"></p><h3 id="2、配置Post-Steps"><a href="#2、配置Post-Steps" class="headerlink" title="2、配置Post Steps"></a>2、配置Post Steps</h3><p>注：脚本中用到的仓库和认证的账号需要先在harbor新建好。</p><p><img src="/image-20200512101638389.png" alt="image-20200512101638389"></p><p><strong>本次实验yum安装方式修改工作目录后的脚本：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Jenkins机器：编译完成后，build生成一个新版本的镜像，push到远程docker仓库</span> <span class="token comment"># Variables</span><span class="token assign-left variable">JENKINS_WAR_HOME</span><span class="token operator">=</span><span class="token string">'/var/lib/jenkins/workspace/maven-docker/target'</span><span class="token assign-left variable">DOCKERFILE_HOME</span><span class="token operator">=</span><span class="token string">'/var/lib/jenkins/docker-file/maven-docker-test_war'</span><span class="token assign-left variable">HARBOR_IP</span><span class="token operator">=</span><span class="token string">'172.21.39.43'</span><span class="token assign-left variable">REPOSITORIES</span><span class="token operator">=</span><span class="token string">'jenkins/maven-docker'</span><span class="token assign-left variable">HARBOR_USER</span><span class="token operator">=</span><span class="token string">'wing'</span><span class="token assign-left variable">HARBOR_USER_PASSWD</span><span class="token operator">=</span><span class="token string">'Harbor12345'</span><span class="token assign-left variable">HARBOR_USER_EMAIL</span><span class="token operator">=</span><span class="token string">'276267003@qq.com'</span> <span class="token comment"># Copy the newest war to docker-file directory.</span><span class="token punctuation">\</span>cp <span class="token parameter variable">-f</span> <span class="token variable">$&#123;JENKINS_WAR_HOME&#125;</span>/easy-springmvc-maven.war <span class="token variable">$&#123;DOCKERFILE_HOME&#125;</span>/maven-docker.war <span class="token comment"># Delete image early version.</span><span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">-u</span> <span class="token variable">$&#123;HARBOR_USER&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span>:80 <span class="token assign-left variable">IMAGE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">&#123;</span>REPOSITORIES<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;IMAGE_ID&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">sudo</span> <span class="token function">docker</span> rmi <span class="token variable">$&#123;IMAGE_ID&#125;</span><span class="token keyword">fi</span> <span class="token comment"># Build image.</span><span class="token builtin class-name">cd</span> <span class="token variable">$&#123;DOCKERFILE_HOME&#125;</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d-%H%M%S<span class="token variable">`</span></span><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span>:80/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;></span>/dev/null <span class="token comment"># Push to the harbor registry.</span><span class="token function">sudo</span> <span class="token function">docker</span> push <span class="token variable">$&#123;HARBOR_IP&#125;</span>:80/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token operator">&amp;></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>之前war包方式部署的jenkins里面的脚本：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Jenkins机器：编译完成后，build生成一个新版本的镜像，push到远程docker仓库</span> <span class="token comment"># Variables</span><span class="token assign-left variable">JENKINS_WAR_HOME</span><span class="token operator">=</span><span class="token string">'/root/.jenkins/workspace/maven-docker-test/target'</span><span class="token assign-left variable">DOCKERFILE_HOME</span><span class="token operator">=</span><span class="token string">'/root/jenkins/docker-file/maven-docker-test_war'</span><span class="token assign-left variable">HARBOR_IP</span><span class="token operator">=</span><span class="token string">'172.22.211.175'</span><span class="token assign-left variable">REPOSITORIES</span><span class="token operator">=</span><span class="token string">'jenkins/maven-docker-test'</span><span class="token assign-left variable">HARBOR_USER</span><span class="token operator">=</span><span class="token string">'wing'</span><span class="token assign-left variable">HARBOR_USER_PASSWD</span><span class="token operator">=</span><span class="token string">'Harbor12345'</span><span class="token assign-left variable">HARBOR_USER_EMAIL</span><span class="token operator">=</span><span class="token string">'276267003@qq.com'</span> <span class="token comment"># Copy the newest war to docker-file directory.</span><span class="token punctuation">\</span>cp <span class="token parameter variable">-f</span> <span class="token variable">$&#123;JENKINS_WAR_HOME&#125;</span>/easy-springmvc-maven.war <span class="token variable">$&#123;DOCKERFILE_HOME&#125;</span>/maven-docker-test.war <span class="token comment"># Delete image early version.</span><span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">-u</span> <span class="token variable">$&#123;HARBOR_USER&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span> <span class="token assign-left variable">IMAGE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">&#123;</span>REPOSITORIES<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;IMAGE_ID&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">sudo</span> <span class="token function">docker</span> rmi <span class="token variable">$&#123;IMAGE_ID&#125;</span><span class="token keyword">fi</span> <span class="token comment"># Build image.</span><span class="token builtin class-name">cd</span> <span class="token variable">$&#123;DOCKERFILE_HOME&#125;</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d-%H%M%S<span class="token variable">`</span></span><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span>/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;></span>/dev/null <span class="token comment"># Push to the harbor registry.</span><span class="token function">sudo</span> <span class="token function">docker</span> push <span class="token variable">$&#123;HARBOR_IP&#125;</span>/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token operator">&amp;></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：war包的名字为git项目的名字<br>&#x2F;root&#x2F;.jenkins&#x2F;workspace&#x2F;maven-docker-test&#x2F;target&#x2F;easy-springmvc-maven.war</p><p><strong>拉取镜像、发布</strong></p><p><img src="/image-20200512101901486.png" alt="image-20200512101901486"></p><p><img src="/image-20200512101918476.png" alt="image-20200512101918476"></p><p>Harbor2.0的API发生了变化，此处是新版脚本方式，修改了镜像tag获取的方式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取镜像，发布</span><span class="token assign-left variable">HARBOR_IP</span><span class="token operator">=</span><span class="token string">'172.21.39.43'</span><span class="token assign-left variable">REPOSITORIES</span><span class="token operator">=</span><span class="token string">'jenkins/maven-docker'</span><span class="token assign-left variable">HARBOR_USER</span><span class="token operator">=</span><span class="token string">'wing'</span><span class="token assign-left variable">HARBOR_USER_PASSWD</span><span class="token operator">=</span><span class="token string">'Harbor12345'</span> <span class="token comment"># 登录harbor</span><span class="token function">docker</span> login <span class="token parameter variable">-u</span> <span class="token variable">$&#123;HARBOR_USER&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span>:80 <span class="token comment"># Stop container, and delete the container.</span><span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"maven-docker"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CONTAINER_ID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">docker</span> stop <span class="token variable">$CONTAINER_ID</span>    <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span><span class="token keyword">else</span> <span class="token comment">#如果容器启动时失败了，就需要docker ps -a才能找到那个容器</span>    <span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"maven-docker"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CONTAINER_ID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的</span>        <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span> <span class="token comment"># Delet eeasy-springmvc-maven image early version.</span><span class="token assign-left variable">IMAGE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">&#123;</span>REPOSITORIES<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;IMAGE_ID&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">docker</span> rmi <span class="token variable">$&#123;IMAGE_ID&#125;</span><span class="token keyword">fi</span> <span class="token comment"># Pull image.</span><span class="token comment"># TAG=`curl -s http://$&#123;HARBOR_IP&#125;/api/repositories/$&#123;REPOSITORIES&#125;/tags | jq '.[-1]' | sed 's/\"//g'` </span><span class="token comment"># TAG=`curl -s http://172.21.39.43/api/repositories/jenkins/maven-docker/tags | jq '.[-1]| &#123;name:.name&#125;' | awk -F '"' '/name/&#123;print $4&#125;'`</span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> http://161.117.37.192/api/v2.0/projects/jenkins/repositories/maven-docker/artifacts <span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">'name":"'</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">'"'</span> <span class="token parameter variable">-f1</span><span class="token variable">`</span></span><span class="token function">docker</span> pull <span class="token variable">$&#123;HARBOR_IP&#125;</span>:80/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token operator">&amp;></span>/dev/null <span class="token comment"># Run.</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> maven-docker <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token variable">$&#123;HARBOR_IP&#125;</span>:80/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是旧版本的脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取镜像，发布</span><span class="token assign-left variable">HARBOR_IP</span><span class="token operator">=</span><span class="token string">'172.22.211.175'</span><span class="token assign-left variable">REPOSITORIES</span><span class="token operator">=</span><span class="token string">'jenkins/maven-docker-test'</span><span class="token assign-left variable">HARBOR_USER</span><span class="token operator">=</span><span class="token string">'wing'</span><span class="token assign-left variable">HARBOR_USER_PASSWD</span><span class="token operator">=</span><span class="token string">'Harbor12345'</span> <span class="token comment"># 登录harbor</span><span class="token function">docker</span> login <span class="token parameter variable">-u</span> <span class="token variable">$&#123;HARBOR_USER&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span> <span class="token comment"># Stop container, and delete the container.</span><span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"maven-docker-test"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CONTAINER_ID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">docker</span> stop <span class="token variable">$CONTAINER_ID</span>    <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span><span class="token keyword">else</span> <span class="token comment">#如果容器启动时失败了，就需要docker ps -a才能找到那个容器</span>    <span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"maven-docker-test"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CONTAINER_ID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的</span>        <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span> <span class="token comment"># Deleteeasy-springmvc-maven image early version.</span><span class="token assign-left variable">IMAGE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">&#123;</span>REPOSITORIES<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;IMAGE_ID&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">docker</span> rmi <span class="token variable">$&#123;IMAGE_ID&#125;</span><span class="token keyword">fi</span> <span class="token comment"># Pull image.</span><span class="token comment"># TAG=`curl -s http://$&#123;HARBOR_IP&#125;/api/repositories/$&#123;REPOSITORIES&#125;/tags | jq '.[-1]' | sed 's/\"//g'` </span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> http://172.22.211.175/api/repositories/jenkins/maven-docker-test/tags <span class="token operator">|</span> jq <span class="token string">'.[-1]| &#123;name:.name&#125;'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'"'</span> <span class="token string">'/name/&#123;print $4&#125;'</span><span class="token variable">`</span></span><span class="token function">docker</span> pull <span class="token variable">$&#123;HARBOR_IP&#125;</span>/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token operator">&amp;></span>/dev/null <span class="token comment"># Run.</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> maven-docker-test <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token variable">$&#123;HARBOR_IP&#125;</span>/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span>kubectl <span class="token builtin class-name">set</span> image <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、构建"><a href="#3、构建" class="headerlink" title="3、构建"></a>3、构建</h3><p><img src="/image-20200512102013778.png" alt="image-20200512102013778"></p><h3 id="4、控制台输出过程"><a href="#4、控制台输出过程" class="headerlink" title="4、控制台输出过程"></a>4、控制台输出过程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">执行中控制台输出Started by user adminBuilding on master <span class="token keyword">in</span> workspace /root/.jenkins/workspace/maven-docker-testNo credentials specified <span class="token operator">></span> <span class="token function">git</span> rev-parse --is-inside-work-tree <span class="token comment"># timeout=10</span>Fetching changes from the remote Git repository <span class="token operator">></span> <span class="token function">git</span> config remote.origin.url https://github.com/yanqiang20172017/easy-springmvc-maven.git <span class="token comment"># timeout=10</span>Fetching upstream changes from https://github.com/yanqiang20172017/easy-springmvc-maven.git <span class="token operator">></span> <span class="token function">git</span> <span class="token parameter variable">--version</span> <span class="token comment"># timeout=10</span> <span class="token operator">></span> <span class="token function">git</span> fetch <span class="token parameter variable">--tags</span> <span class="token parameter variable">--progress</span> https://github.com/yanqiang20172017/easy-springmvc-maven.git +refs/heads/*:refs/remotes/origin/* <span class="token operator">></span> <span class="token function">git</span> rev-parse refs/remotes/origin/master^<span class="token punctuation">&#123;</span>commit<span class="token punctuation">&#125;</span> <span class="token comment"># timeout=10</span> <span class="token operator">></span> <span class="token function">git</span> rev-parse refs/remotes/origin/origin/master^<span class="token punctuation">&#123;</span>commit<span class="token punctuation">&#125;</span> <span class="token comment"># timeout=10</span>Checking out Revision 67604f7f9f30505e3bb3e8935c745154f04aa372 <span class="token punctuation">(</span>refs/remotes/origin/master<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">git</span> config core.sparsecheckout <span class="token comment"># timeout=10</span> <span class="token operator">></span> <span class="token function">git</span> checkout <span class="token parameter variable">-f</span> 67604f7f9f30505e3bb3e8935c745154f04aa372Commit message: <span class="token string">"修改standard/1.1.2的依赖"</span> <span class="token operator">></span> <span class="token function">git</span> rev-list --no-walk 67604f7f9f30505e3bb3e8935c745154f04aa372 <span class="token comment"># timeout=10</span>Parsing POMsEstablished TCP socket on <span class="token number">36798</span><span class="token punctuation">[</span>maven-docker-test<span class="token punctuation">]</span> $ <span class="token function">java</span> <span class="token parameter variable">-cp</span> /root/.jenkins/plugins/maven-plugin/WEB-INF/lib/maven3-agent-1.12.jar:/usr/share/maven/boot/plexus-classworlds.jar org.jvnet.hudson.maven3.agent.Maven3Main /usr/share/maven /root/.jenkins/war/WEB-INF/lib/remoting-3.29.jar /root/.jenkins/plugins/maven-plugin/WEB-INF/lib/maven3-interceptor-1.12.jar /root/.jenkins/plugins/maven-plugin/WEB-INF/lib/maven3-interceptor-commons-1.12.jar <span class="token number">36798</span><span class="token operator">&lt;=</span><span class="token operator">==</span><span class="token punctuation">[</span>JENKINS REMOTING CAPACITY<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>channel startedExecuting Maven:  <span class="token parameter variable">-B</span> <span class="token parameter variable">-f</span> /root/.jenkins/workspace/maven-docker-test/pom.xml clean package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">..</span>.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> Some problems were encountered <span class="token keyword">while</span> building the effective model <span class="token keyword">for</span> springmvc-maven:easy-springmvc-maven:war:0.0.1-SNAPSHOT<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token string">'build.plugins.plugin.version'</span> <span class="token keyword">for</span> org.apache.maven.plugins:maven-war-plugin is missing. @ line <span class="token number">22</span>, <span class="token function">column</span> <span class="token number">15</span><span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> It is highly recommended to fix these problems because they threaten the stability of your build.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> For this reason, future Maven versions might no longer support building such malformed projects.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>                                                                         <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building springmvc-maven <span class="token number">0.0</span>.1-SNAPSHOT<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-clean-plugin:2.4.1:clean <span class="token punctuation">(</span>default-clean<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Deleting /root/.jenkins/workspace/maven-docker-test/target<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-resources-plugin:2.5:resources <span class="token punctuation">(</span>default-resources<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>debug<span class="token punctuation">]</span> execute contextualize<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using <span class="token string">'UTF-8'</span> encoding to copy filtered resources.<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> skip non existing resourceDirectory /root/.jenkins/workspace/maven-docker-test/src/main/resources<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-compiler-plugin:3.1:compile <span class="token punctuation">(</span>default-compile<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Changes detected - recompiling the module<span class="token operator">!</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Compiling <span class="token number">2</span> <span class="token builtin class-name">source</span> files to /root/.jenkins/workspace/maven-docker-test/target/classes<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-resources-plugin:2.5:testResources <span class="token punctuation">(</span>default-testResources<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>debug<span class="token punctuation">]</span> execute contextualize<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using <span class="token string">'UTF-8'</span> encoding to copy filtered resources.<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> skip non existing resourceDirectory /root/.jenkins/workspace/maven-docker-test/src/test/resources<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-compiler-plugin:3.1:testCompile <span class="token punctuation">(</span>default-testCompile<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Not compiling <span class="token builtin class-name">test</span> sources<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-surefire-plugin:2.10:test <span class="token punctuation">(</span>default-test<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Tests are skipped.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> Attempt to <span class="token punctuation">(</span>de-<span class="token punctuation">)</span>serialize anonymous class hudson.maven.reporters.BuildInfoRecorder<span class="token variable">$1</span><span class="token punctuation">;</span> see: https://jenkins.io/redirect/serialization-of-anonymous-classes/<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-war-plugin:2.1.1:war <span class="token punctuation">(</span>default-war<span class="token punctuation">)</span> @ easy-springmvc-maven ---<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Packaging webapp<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Assembling webapp <span class="token punctuation">[</span>easy-springmvc-maven<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>/root/.jenkins/workspace/maven-docker-test/target/easy-springmvc-maven<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Processing war project<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying webapp resources <span class="token punctuation">[</span>/root/.jenkins/workspace/maven-docker-test/src/main/webapp<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Webapp assembled <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">43</span> msecs<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building war: /root/.jenkins/workspace/maven-docker-test/target/easy-springmvc-maven.war<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> WEB-INF/web.xml already added, skipping<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD SUCCESS<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total time: <span class="token number">2</span>.647s<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at: Sun Jun 09 <span class="token number">16</span>:12:01 CST <span class="token number">2019</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Final Memory: 19M/189M<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------------------------------------Waiting <span class="token keyword">for</span> Jenkins to finish collecting data<span class="token punctuation">[</span>JENKINS<span class="token punctuation">]</span> Archiving /root/.jenkins/workspace/maven-docker-test/pom.xml to springmvc-maven/easy-springmvc-maven/0.0.1-SNAPSHOT/easy-springmvc-maven-0.0.1-SNAPSHOT.pom<span class="token punctuation">[</span>JENKINS<span class="token punctuation">]</span> Archiving /root/.jenkins/workspace/maven-docker-test/target/easy-springmvc-maven.war to springmvc-maven/easy-springmvc-maven/0.0.1-SNAPSHOT/easy-springmvc-maven-0.0.1-SNAPSHOT.war<span class="token punctuation">[</span>maven-docker-test<span class="token punctuation">]</span> $ /bin/sh <span class="token parameter variable">-xe</span> /tmp/jenkins6873694180184993727.shchannel stopped+ <span class="token assign-left variable">JENKINS_WAR_HOME</span><span class="token operator">=</span>/root/.jenkins/workspace/maven-docker-test/target+ <span class="token assign-left variable">DOCKERFILE_HOME</span><span class="token operator">=</span>/root/jenkins/docker-file/maven-docker-test_war+ <span class="token assign-left variable">HARBOR_IP</span><span class="token operator">=</span><span class="token number">172.22</span>.211.175+ <span class="token assign-left variable">REPOSITORIES</span><span class="token operator">=</span>jenkins/maven-docker-test+ <span class="token assign-left variable">HARBOR_USER</span><span class="token operator">=</span>wing+ <span class="token assign-left variable">HARBOR_USER_PASSWD</span><span class="token operator">=</span>Harbor12345+ <span class="token assign-left variable">HARBOR_USER_EMAIL</span><span class="token operator">=</span><span class="token number">276267003</span>@qq.com+ <span class="token function">cp</span> <span class="token parameter variable">-f</span> /root/.jenkins/workspace/maven-docker-test/target/easy-springmvc-maven.war /root/jenkins/docker-file/maven-docker-test_war/maven-docker-test.war+ <span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">-u</span> wing <span class="token parameter variable">-p</span> Harbor12345 <span class="token number">172.22</span>.211.175WARNING<span class="token operator">!</span> Using <span class="token parameter variable">--password</span> via the CLI is insecure. Use --password-stdin.WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeeded++ <span class="token function">sudo</span> <span class="token function">docker</span> images++ <span class="token function">grep</span> jenkins/maven-docker-test++ <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span>+ <span class="token assign-left variable">IMAGE_ID</span><span class="token operator">=</span>a6676d1090aa+ <span class="token string">'['</span> <span class="token parameter variable">-n</span> a6676d1090aa <span class="token string">']'</span>+ <span class="token function">sudo</span> <span class="token function">docker</span> rmi a6676d1090aaUntagged: <span class="token number">172.22</span>.211.175/jenkins/maven-docker-test:20190609-153307Untagged: <span class="token number">172.22</span>.211.175/jenkins/maven-docker-test@sha256:a0dbff5acc2284554aef955e32cb3325b0716c13ec66ec70b0705fe17d425d8bDeleted: sha256:a6676d1090aa51212861be156d81e2e96ab7ffb8ace2f8e4428debd1404ba8ddDeleted: sha256:675a50c43c8b6b890dd86f9ef7958f849956d922735a3a721741af7bfcc0a50dDeleted: sha256:fb5bd69c508668d13c4da89770d8c54fbc7e330c45543a80be52dc94a021730eDeleted: sha256:7e47412dc00e4b0e753cf076ac4b97bbc972c524aeae4243ef4c441a7bf9d8e4Deleted: sha256:2e6bb2e854e3a6d14b35797198758503dcd924a1c365e653daef5708659f3b6cDeleted: sha256:e036e0839cbd1676552163ab0001e9e968ef924d2d17b0b7eee245ce29f35f6bDeleted: sha256:1f35ccae7e2fec67145bd7b3f8b50d7f0a66f3386cc1d444136e24c8ef667763+ <span class="token builtin class-name">cd</span> /root/jenkins/docker-file/maven-docker-test_war++ <span class="token function">date</span> +%Y%m%d-%H%M%S+ <span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token number">20190609</span>-161201+ <span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token number">172.22</span>.211.175/jenkins/maven-docker-test:20190609-161201 <span class="token builtin class-name">.</span>+ <span class="token function">sudo</span> <span class="token function">docker</span> push <span class="token number">172.22</span>.211.175/jenkins/maven-docker-test:20190609-161201<span class="token punctuation">[</span>SSH<span class="token punctuation">]</span> script:<span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"root"</span><span class="token comment"># 拉取镜像，发布</span><span class="token assign-left variable">HARBOR_IP</span><span class="token operator">=</span><span class="token string">'172.22.211.175'</span><span class="token assign-left variable">REPOSITORIES</span><span class="token operator">=</span><span class="token string">'jenkins/maven-docker-test'</span><span class="token assign-left variable">HARBOR_USER</span><span class="token operator">=</span><span class="token string">'wing'</span><span class="token assign-left variable">HARBOR_USER_PASSWD</span><span class="token operator">=</span><span class="token string">'Harbor12345'</span> <span class="token comment"># 登录harbor</span><span class="token function">docker</span> login <span class="token parameter variable">-u</span> <span class="token variable">$&#123;HARBOR_USER&#125;</span> <span class="token parameter variable">-p</span> <span class="token variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="token variable">$&#123;HARBOR_IP&#125;</span> <span class="token comment"># Stop container, and delete the container.</span><span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"maven-docker-test"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CONTAINER_ID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">docker</span> stop <span class="token variable">$CONTAINER_ID</span>    <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span><span class="token keyword">else</span> <span class="token comment">#如果容器启动时失败了，就需要docker ps -a才能找到那个容器</span>    <span class="token assign-left variable">CONTAINER_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"maven-docker-test"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$CONTAINER_ID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment"># 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的</span>        <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span> <span class="token comment"># Deleteeasy-springmvc-maven image early version.</span><span class="token assign-left variable">IMAGE_ID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">sudo</span> <span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">&#123;</span>REPOSITORIES<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;IMAGE_ID&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">docker</span> rmi <span class="token variable">$&#123;IMAGE_ID&#125;</span><span class="token keyword">fi</span> <span class="token comment"># Pull image.</span><span class="token comment"># TAG=`curl -s http://$&#123;HARBOR_IP&#125;/api/repositories/$&#123;REPOSITORIES&#125;/tags | jq '.[-1]' | sed 's/\"//g'` </span><span class="token assign-left variable">TAG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> http://172.22.211.175/api/repositories/jenkins/maven-docker-test/tags <span class="token operator">|</span> jq <span class="token string">'.[-1]| &#123;name:.name&#125;'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'"'</span> <span class="token string">'/name/&#123;print $4&#125;'</span><span class="token variable">`</span></span><span class="token function">docker</span> pull <span class="token variable">$&#123;HARBOR_IP&#125;</span>/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span> <span class="token operator">&amp;></span>/dev/null <span class="token comment"># Run.</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> maven-docker-test <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token variable">$&#123;HARBOR_IP&#125;</span>/<span class="token variable">$&#123;REPOSITORIES&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;TAG&#125;</span><span class="token punctuation">[</span>SSH<span class="token punctuation">]</span> executing<span class="token punctuation">..</span>.WARNING<span class="token operator">!</span> Using <span class="token parameter variable">--password</span> via the CLI is insecure. Use --password-stdin.WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>Login Succeededafa55c8e5fe64bc2f652fdc3813f077173baff4e8cfd4301c5c49c75bdb3d953<span class="token punctuation">[</span>SSH<span class="token punctuation">]</span> completed<span class="token punctuation">[</span>SSH<span class="token punctuation">]</span> exit-status: <span class="token number">0</span>Finished: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins介绍和使用</title>
      <link href="/posts/2804.html"/>
      <url>/posts/2804.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins详解"><a href="#Jenkins详解" class="headerlink" title="Jenkins详解"></a>Jenkins详解</h1><h2 id="一、Jenkins介绍"><a href="#一、Jenkins介绍" class="headerlink" title="一、Jenkins介绍"></a>一、Jenkins介绍</h2><p><strong>简单历史</strong></p><p>​                                                   <img src="/1190037-20171201191826104-357945560.png" alt="img"></p><p>Jenkins的前身是Hudson，采用JAVA编写的持续集成开源工具。Hudson由Sun公司在2004年启动，第一个版本于2005年在java.net发布。2007年开始Hudson逐渐取代CruiseControl和其他的开源构建工具的江湖地位。在2008年的JavaOne大会上在开发者解决方案中获得杜克选择大奖（Duke’s Choice Award）。</p><p>在2010年11月期间，因为Oracle对Sun的收购带来了Hudson的所有权问题。主要的项目贡献者和Oracle之间，尽管达成了很多协议，但有个关键问题就是商标名称“Hudson”。甲骨文在2010年12月声明拥有该名称并申请商标的权利。  因此，2011年1月11日，有人要求投票将项目名称从“Hudson”改为“Jenkins”。2011年1月29日，该建议得到社区投票的批准，创建了Jenkins项目。</p><p>2011年2月1日，甲骨文表示，他们打算继续开发Hudson，并认为Jenkins只是一个分支，而不是重命名。因此，Jenkins和Hudson继续作为两个独立的项目，每个都认为对方是自己的分支。到2013年12月，GitHub上的Jenkins拥有567个项目成员和约1,100个公共仓库，与此相对的Hudson有32个项目成员和17个公共仓库。到现在两者的差异更多，应该说Jenkins已经全面超越了Hudson。此外，大家可能是出于讨厌Oracle的情绪，作为Java开发者天然地应该支持和使用Jenkins。</p><p>后面Hudson被Oracle捐给了Eclipse基金会，所以右边这老头有个Eclipse的光环加持。</p><p>为什么Jenkins更受大家欢迎。</p><p>由开发者主导、面向开发者 </p><p><img src="/b8434422776e4b4e8d91bfdfc21e47d6.jpeg" alt="img"></p><p>首先，曾经是Hudson开发人员中的99%都转向了Jenkins的开发，其中包括最初的创建者川口清子（Kohsuke  Kawaguchi）。他独自写了大部分代码，并且他的经验是Hudson各种高级特性的关键来源。Jenkins的开发社区更活跃。所以对很多人而言，从血统上看Hudson是后娘养的，Jenkins才是亲生的！</p><p> 治理和社区 </p><p>Jenkins开发社区的管理是很开放的。 有一个独立的董事会，其中包括来自Yahoo!,  CloudBees，Cloudera和Apture等多家公司的长期以来的Hudson开发人员。每次会议后，他们定期举行治理会议并发表意见，征询公众意见。他们还将所有代码都捐赠给公共利益软件组织（SPI），以确保社区持续开放。</p><p> 稳定性 </p><p>分手后，针对Jenkins的贡献不断持续增加，Jenkins制定了新的长期支持发布线。社区定大约每三个月发布一次稳定版本的补丁。</p><p> 插件的平台 </p><p>Jenkins支持超过1000个插件。凭借多样而强大的插件Jenkins成了整个开发生命周期中的一个中心点。</p><p>到了2017年，两者的发展差异更大了。Jenkins应该说是CI工具中公认的老大，而Hudson不仅不能与Jenkins比，跟其他CI工具比也没什么优势，完全沉沦了。</p><p>slant网站对一系列CI工具做了一次对比，其中Jenkins和Hudson的情况如下。</p><p> 1、基本面问题 </p><table><thead><tr><th>工具</th><th>Jenkins</th><th>Hudson</th></tr></thead><tbody><tr><td>最好的CI工具</td><td>1</td><td>22</td></tr><tr><td>最好的JAVA CI工具</td><td>1</td><td>7</td></tr><tr><td>最好的自托管CI工具</td><td>3</td><td>4</td></tr></tbody></table><p> 2、其他支持 </p><table><thead><tr><th>工具</th><th>Jenkins</th><th>Hudson</th></tr></thead><tbody><tr><td>对Window支持最好</td><td>1</td><td>无排名</td></tr><tr><td>最好的开源CI工具</td><td>1</td><td>无排名</td></tr><tr><td>对BitBucket的支持</td><td>2</td><td>无排名</td></tr><tr><td>对移动开发者支持最好的CI</td><td>4</td><td>无排名</td></tr></tbody></table><p> 3、更多特征 </p><table><thead><tr><th>Jenkins</th><th>Hudson</th></tr></thead><tbody><tr><td>免费且开源</td><td>与Jenkins共享了很多代码，安装还是挺简单的</td></tr><tr><td>关键的环境变量可以安全存储</td><td></td></tr><tr><td>支持多个SCM，包括SVN, Mercurial, Git。集成了GitHub和Bitbucket</td><td></td></tr><tr><td>高度可配置</td><td></td></tr><tr><td>资源和教程很多</td><td></td></tr><tr><td>安装运行简单</td><td></td></tr><tr><td>分布式的构建也能高效运行</td><td></td></tr><tr><td>可跨平台部署</td><td></td></tr><tr><td>很多高质量的插件</td><td></td></tr><tr><td>得奖无数</td><td></td></tr><tr><td>庞大的社区</td><td></td></tr></tbody></table><h4 id="1、Jenkins-功能"><a href="#1、Jenkins-功能" class="headerlink" title="1、Jenkins 功能"></a>1、Jenkins 功能</h4><ul><li>持续的软件版本发布&#x2F;测试项目。</li><li>监控外部调用执行的工作。</li></ul><h4 id="3、Jenkins-概念"><a href="#3、Jenkins-概念" class="headerlink" title="3、Jenkins 概念"></a>3、Jenkins 概念</h4><p>Jenkins是一个功能强大的应用程序，允许<strong>持续集成和持续交付项目</strong>，无论用的是什么平台。这是一个免费的开源项目，可以处理任何类型的构建或持续集成。集成Jenkins可以用于一些测试和部署技术。Jenkins是一种软件允许持续集成。</p><h4 id="4、Jenkins-目的"><a href="#4、Jenkins-目的" class="headerlink" title="4、Jenkins 目的"></a>4、Jenkins 目的</h4><ul><li><p>持续、自动地构建&#x2F;测试软件项目。</p></li><li><p>监控软件开放流程，快速问题定位及处理，提提高开发效率。</p></li></ul><h4 id="5、Jenkins-特性"><a href="#5、Jenkins-特性" class="headerlink" title="5、Jenkins 特性"></a>5、Jenkins 特性</h4><ul><li><p>开源的java语言开发持续集成工具，支持CI，CD。</p></li><li><p>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</p></li><li><p>消息通知及测试报告：集成RSS&#x2F;E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit&#x2F;TestNG测试报告。</p></li><li><p>分布式构建：支持Jenkins能够让多台计算机一起构建&#x2F;测试。</p></li><li><p>文件识别:Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</p></li><li><p>丰富的插件支持:支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</p></li></ul><h4 id="6、产品发布流程"><a href="#6、产品发布流程" class="headerlink" title="6、产品发布流程"></a>6、产品发布流程</h4><p>产品设计成型 -&gt; 开发人员开发代码 -&gt; 测试人员测试功能 -&gt; 运维人员发布上线</p><ul><li><p>持续集成（Continuous integration，简称CI）</p></li><li><p>持续交付（Continuous delivery）</p></li><li><p>持续部署（continuous deployment）</p></li></ul><h2 id="二、Jenkins-CI-x2F-CD-流程"><a href="#二、Jenkins-CI-x2F-CD-流程" class="headerlink" title="二、Jenkins CI&#x2F;CD 流程"></a>二、Jenkins CI&#x2F;CD 流程</h2><p><img src="/1352872-20180728203103959-1827013182.png" alt="img"></p><p>说明：这张图稍微更形象一点，上线之前先把代码git到版本仓库，然后通过Jenkins将Java项目通过maven去构建，这是在非容器之前，典型的自动化的一个版本上线流程。那它有哪些问题呢？</p><p>如：它的测试环境，预生产环境，测试环境。会存在一定的兼容性问题 （环境之间会有一定的差异） </p><p><img src="/1352872-20180728203917252-1861052346.png" alt="img"></p><p>说明：它这里有一个docker harbor 的镜像仓库，通常会把你的环境打包为一个镜像，通过镜像的方式来部署。</p><h2 id="三、部署Jenkins"><a href="#三、部署Jenkins" class="headerlink" title="三、部署Jenkins"></a>三、部署Jenkins</h2><table><thead><tr><th>IP</th><th>主机名</th></tr></thead><tbody><tr><td>172.16.1.2</td><td>jenkins</td></tr><tr><td>172.16.1.3</td><td>web</td></tr><tr><td>172.16.1.4</td><td>git&#x2F;gitlab</td></tr></tbody></table><h3 id="1、部署GIT"><a href="#1、部署GIT" class="headerlink" title="1、部署GIT"></a>1、部署GIT</h3><p>IP：172.16.1.4，git 服务器进行如下操作</p><h4 id="1、安装-git"><a href="#1、安装-git" class="headerlink" title="1、安装 git"></a>1、安装 git</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum install -y git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建git用户并设置密码为123456（为开发人员拉代码时设置的用户）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># useradd git</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># passwd git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># su - git  #切换到git用户下</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> repos/app.git  <span class="token comment">#在git用户家目录下创建一个repos目录，repos目录下创建各个项目的目录</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> repos/app.git<span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> <span class="token parameter variable">--bare</span> init <span class="token comment">#初始化仓库，如果不初始化，这仅仅就只是一个目录</span><span class="token comment">#查看初始化后仓库信息</span><span class="token punctuation">[</span>git@qfedu.com app.git<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-a</span><span class="token builtin class-name">.</span> <span class="token punctuation">..</span> branches config description HEAD hooks info objects refs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完仓库后，我们需要找一台机器测试是否能够成功从仓库中拉取代码，或者上传代码到该仓库。</p><p>IP：172.16.1.5，web服务器进行测试</p><h4 id="3、安装-git-客户端"><a href="#3、安装-git-客户端" class="headerlink" title="3、安装 git 客户端"></a>3、安装 git 客户端</h4><p>拉取代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum install -y git   #首先还是安装git</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p test</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd test</span><span class="token punctuation">[</span>root@qfedu.com test<span class="token punctuation">]</span><span class="token comment"># git clone git@172.16.1.4:/home/git/repos/app.git  ##测试clone远端git仓库</span><span class="token punctuation">[</span>root@qfedu.com test<span class="token punctuation">]</span><span class="token comment"># ls </span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、push-测试"><a href="#4、push-测试" class="headerlink" title="4、push 测试"></a>4、push 测试</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># touch index.html</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git commit -m "test" </span><span class="token comment">#第一次的话会有报错警告，说让配置邮箱和姓名。配置一下即可，或者直接执行给出的命令执行即可。</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git push origin master #提交到主分支（默认分支）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试成功！</p><h4 id="5、补充：配置免秘钥"><a href="#5、补充：配置免秘钥" class="headerlink" title="5、补充：配置免秘钥"></a>5、补充：配置免秘钥</h4><h5 id="1、172-16-1-5-服务器生成公钥"><a href="#1、172-16-1-5-服务器生成公钥" class="headerlink" title="1、172.16.1.5 服务器生成公钥"></a>1、172.16.1.5 服务器生成公钥</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat /root/.ssh/id_rsa.pub </span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmmIOOJCRjlcNyM9zQ4yNeSFgJhBYZUTHMJ3D6sy6IgyOQi/LW9IzBF8mVjmc9wBzQBzg9obCJ/2YiGtvgl00v8A6Clamx6XdQpHPbnVcgHznhEhaa5X0TONcyJ0/z9e8wdppafAsrgRYdpRcXfrPC7xlzDIRpjgWG9YEMzrqCDcWAoWLMYvr2GHwhFyJa5OpMNGH5NjaWJbzYlgdP5cwh/QX04xVZ0QKghQsol9HmbRbqJ8Hl8WrgDoy2BPE41XKEwR4drgUGCFXZDH4s9ZodC4zI76TWIyCeKKM0XbTNHRU6Cb6xWb/iFhpsa7m14A5usUH6RfIjzJBr3IcyUkk3 root@qfedu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2、172-16-1-4-git-服务器进行配置"><a href="#2、172-16-1-4-git-服务器进行配置" class="headerlink" title="2、172.16.1.4 git 服务器进行配置"></a>2、172.16.1.4 git 服务器进行配置</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> .ssh<span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">700</span> .ssh/  <span class="token comment"># 给予目录700权限</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> .ssh/authorized_keys  <span class="token comment"># 写入172.16.1.5服务器的公钥</span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmmIOOJCRjlcNyM9zQ4yNeSFgJhBYZUTHMJ3D6sy6IgyOQi/LW9IzBF8mVjmc9wBzQBzg9obCJ/2YiGtvgl00v8A6Clamx6XdQpHPbnVcgHznhEhaa5X0TONcyJ0/z9e8wdppafAsrgRYdpRcXfrPC7xlzDIRpjgWG9YEMzrqCDcWAoWLMYvr2GHwhFyJa5OpMNGH5NjaWJbzYlgdP5cwh/QX04xVZ0QKghQsol9HmbRbqJ8Hl8WrgDoy2BPE41XKEwR4drgUGCFXZDH4s9ZodC4zI76TWIyCeKKM0XbTNHRU6Cb6xWb/iFhpsa7m14A5usUH6RfIjzJBr3IcyUkk3 root@qfedu.com<span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">600</span> .ssh/authorized_keys  <span class="token comment"># 给予文件600权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Jenkins-安装配置"><a href="#2、Jenkins-安装配置" class="headerlink" title="2、Jenkins 安装配置"></a>2、Jenkins 安装配置</h3><h4 id="1、jenkins-安装"><a href="#1、jenkins-安装" class="headerlink" title="1、jenkins 安装"></a>1、jenkins 安装</h4><p>官网： <a href="https://jenkins.io/">https://jenkins.io</a></p><p>插件：<a href="http://updates.jenkins-ci.org/download/plugins/">http://updates.jenkins-ci.org/download/plugins/</a></p><h5 id="1、安装-java-环境（jenkins-依赖-java-环境）"><a href="#1、安装-java-环境（jenkins-依赖-java-环境）" class="headerlink" title="1、安装 java 环境（jenkins 依赖 java 环境）"></a>1、安装 java 环境（jenkins 依赖 java 环境）</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com tools<span class="token punctuation">]</span><span class="token comment"># ls                 # 查看解压包</span>jdk-8u45-linux-x64.tar.gz<span class="token punctuation">[</span>root@qfedu.com tools<span class="token punctuation">]</span><span class="token comment"># tar zxf jdk-8u45-linux-x64.tar.gz    # 解压</span><span class="token punctuation">[</span>root@qfedu.com tools<span class="token punctuation">]</span><span class="token comment"># mv jdk1.8.0_45/ /usr/local/jdk1.8    # 移动至指定目录</span><span class="token punctuation">[</span>root@qfedu.com tools<span class="token punctuation">]</span><span class="token comment"># vim /etc/profile    # 配置环境变量</span><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java<span class="token builtin class-name">export</span> <span class="token assign-left variable">MAVEN_HOME</span><span class="token operator">=</span>/usr/local/maven<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>/usr/local/java/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JRE_HOME</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin:<span class="token variable">$MAVEN_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token punctuation">[</span>root@qfedu.com tools<span class="token punctuation">]</span><span class="token comment"># source /etc/profile  # 配置生效</span><span class="token punctuation">[</span>root@qfedu.com tools<span class="token punctuation">]</span><span class="token comment"># java -version        # 查看java版本</span><span class="token function">java</span> version <span class="token string">"1.8.0_45"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_45-b14<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.45</span>-b02, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、yum-安装-jenkins"><a href="#2、yum-安装-jenkins" class="headerlink" title="2、yum 安装 jenkins"></a>2、yum 安装 jenkins</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><span class="token comment"># 导入jenkins源</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><span class="token comment"># 导入jenkins官方证书</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum install -y jenkins</span><span class="token comment"># 安装jenkins（安装的是最新的LTS版本）</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># rpm -ql jenkins   # 查看yum都安装了哪些东西</span>/etc/init.d/jenkins/etc/logrotate.d/jenkins/etc/sysconfig/jenkins/usr/lib/jenkins/usr/lib/jenkins/jenkins.war/usr/sbin/rcjenkins/var/cache/jenkins/var/lib/jenkins/var/log/jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h4><h5 id="1、查询-yum-下载-Jenkins-安装的文件"><a href="#1、查询-yum-下载-Jenkins-安装的文件" class="headerlink" title="1、查询 yum 下载 Jenkins 安装的文件"></a>1、查询 yum 下载 Jenkins 安装的文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># rpm -ql jenkins</span>/etc/init.d/jenkins         <span class="token comment"># 启动文件</span>/etc/logrotate.d/jenkins    <span class="token comment"># 日志分割配置文件</span>/etc/sysconfig/jenkins      <span class="token comment"># jenkins主配置文件</span>/usr/lib/jenkins            <span class="token comment"># 存放war包目录</span>/usr/lib/jenkins/jenkins.war   <span class="token comment"># war 包 </span>/usr/sbin/rcjenkins         <span class="token comment"># 命令</span>/var/cache/jenkins          <span class="token comment"># war包解压目录 jenkins网页代码目录</span>/var/lib/jenkins            <span class="token comment"># jenkins 工作目录</span>/var/log/jenkins            <span class="token comment"># 日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h5><p><strong>配置文件说明</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># grep "^[a-Z]" /etc/sysconfig/jenkins</span><span class="token assign-left variable">JENKINS_HOME</span><span class="token operator">=</span><span class="token string">"/var/lib/jenkins"</span>    <span class="token comment"># jenkins工作目录</span><span class="token assign-left variable">JENKINS_JAVA_CMD</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">JENKINS_USER</span><span class="token operator">=</span><span class="token string">"jenkins"</span>             <span class="token comment"># jenkinx启动用户</span><span class="token assign-left variable">JENKINS_JAVA_OPTIONS</span><span class="token operator">=</span><span class="token string">"-Djava.awt.headless=true"</span><span class="token assign-left variable">JENKINS_PORT</span><span class="token operator">=</span><span class="token string">"8080"</span>                <span class="token comment"># 端口</span><span class="token assign-left variable">JENKINS_LISTEN_ADDRESS</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">JENKINS_HTTPS_PORT</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">JENKINS_HTTPS_KEYSTORE</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">JENKINS_HTTPS_KEYSTORE_PASSWORD</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">JENKINS_HTTPS_LISTEN_ADDRESS</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">JENKINS_DEBUG_LEVEL</span><span class="token operator">=</span><span class="token string">"5"</span><span class="token assign-left variable">JENKINS_ENABLE_ACCESS_LOG</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">JENKINS_HANDLER_MAX</span><span class="token operator">=</span><span class="token string">"100"</span>          <span class="token comment"># 最大连接</span><span class="token assign-left variable">JENKINS_HANDLER_IDLE</span><span class="token operator">=</span><span class="token string">"20"</span><span class="token assign-left variable">JENKINS_ARGS</span><span class="token operator">=</span><span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、启动-jenkins"><a href="#3、启动-jenkins" class="headerlink" title="3、启动 jenkins"></a>3、启动 jenkins</h5><ul><li><p>首先需要修改一下启动脚本，文件在&#x2F;etc&#x2F;init.d&#x2F;jenkins</p></li><li><p>因为jenkins的启动脚本默认java路径为：&#x2F;usr&#x2F;bin&#x2F;java</p></li><li><p>但是我们新安装的java路径并不是在这个，所以我们需要新添加路径。如图下所示：</p></li><li><p>新路径地址为：&#x2F;usr&#x2F;local&#x2F;jdk1.8&#x2F;bin&#x2F;java</p></li></ul><p><img src="/1235834-20180831163720584-519105319.png" alt="img"></p><p>接下来启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># systemctl start jenkins</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep jenkins</span>jenkins   <span class="token number">16037</span>      <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">16</span>:20 ?        00:00:13 /usr/local/jdk1.8/bin/java <span class="token parameter variable">-Dcom.sun.akuma.Daemon</span><span class="token operator">=</span>daemonized <span class="token parameter variable">-Djava.awt.headless</span><span class="token operator">=</span>true <span class="token parameter variable">-DJENKINS_HOME</span><span class="token operator">=</span>/var/lib/jenkins <span class="token parameter variable">-jar</span> /usr/lib/jenkins/jenkins.war <span class="token parameter variable">--logfile</span><span class="token operator">=</span>/var/log/jenkins/jenkins.log <span class="token parameter variable">--webroot</span><span class="token operator">=</span>/var/cache/jenkins/war <span class="token parameter variable">--daemon</span> <span class="token parameter variable">--httpPort</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token parameter variable">--debug</span><span class="token operator">=</span><span class="token number">5</span> <span class="token parameter variable">--handlerCountMax</span><span class="token operator">=</span><span class="token number">100</span> <span class="token parameter variable">--handlerCountMaxIdle</span><span class="token operator">=</span><span class="token number">20</span>root      <span class="token number">16107</span>   <span class="token number">1215</span>  <span class="token number">0</span> <span class="token number">16</span>:39 pts/1    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto jenkins<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># netstat -lnutp|grep jenkins</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># netstat -lnutp|grep 8080</span>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::8080                 :::*                    LISTEN      <span class="token number">16037</span>/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、jenkins配置（web页面）"><a href="#3、jenkins配置（web页面）" class="headerlink" title="3、jenkins配置（web页面）"></a>3、jenkins配置（web页面）</h4><h5 id="1、管理员密码获取"><a href="#1、管理员密码获取" class="headerlink" title="1、管理员密码获取"></a>1、管理员密码获取</h5><p><img src="/1235834-20180831164228925-1838027306.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat /var/lib/jenkins/secrets/initialAdminPassword</span>5d3f57bea6e546139fc48ea28f9d5ae5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、安装插件-（选择在线安装）"><a href="#2、安装插件-（选择在线安装）" class="headerlink" title="2、安装插件 （选择在线安装）"></a>2、安装插件 （选择在线安装）</h5><p><img src="/1235834-20180831164323740-27120837.png" alt="img"></p><p>出现离线安装解决方法：</p><h6 id="1、修改-x2F-var-x2F-lib-x2F-jenkins-x2F-updates-x2F-default-json"><a href="#1、修改-x2F-var-x2F-lib-x2F-jenkins-x2F-updates-x2F-default-json" class="headerlink" title="1、修改 &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json"></a>1、修改 &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json</h6><p>jenkins 在下载插件之前会先检查网络连接，其会读取这个文件中的网址。默认是访问谷歌，肯定监测失败，所以将图下的google改为<a href="http://www.baidu.com/">www.baidu.com</a>即可，更改完重启服务。</p><p><img src="/1235834-20180831164343689-623098101.png" alt="img"></p><h6 id="2、-修改-x2F-var-x2F-lib-x2F-jenkins-x2F-hudson-model-UpdateCenter-xml"><a href="#2、-修改-x2F-var-x2F-lib-x2F-jenkins-x2F-hudson-model-UpdateCenter-xml" class="headerlink" title="2、 修改&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;hudson.model.UpdateCenter.xml"></a>2、 修改&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;hudson.model.UpdateCenter.xml</h6><p>该文件为jenkins下载插件的源地址，改地址默认jenkins默认为：<a href="https://updates.jenkins.io/update-center.json%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%9B%A0%E4%B8%BAhttps%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E6%AD%A4%E5%A4%84%E6%88%91%E4%BB%AC%E5%B0%86%E5%85%B6%E6%94%B9%E4%B8%BAhttp%E5%8D%B3%E5%8F%AF%EF%BC%8C%E4%B9%8B%E5%90%8E%E9%87%8D%E5%90%AFjenkins%E6%9C%8D%E5%8A%A1%E5%8D%B3%E5%8F%AF%E3%80%82">https://updates.jenkins.io/update-center.json，就是因为https的问题，此处我们将其改为http即可，之后重启jenkins服务即可。</a></p><p>其他国内备用地址（也可以选择使用）：</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p><a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p><p>在修复完之后，我们发现离线问题已经解决</p><p><img src="/1235834-20180831164430177-1121878419.png" alt="img"></p><p>选择安装推荐的插件：</p><p><img src="/1235834-20180831164621224-1822838670.png" alt="img"></p><h5 id="3、创建第一个管理员用户"><a href="#3、创建第一个管理员用户" class="headerlink" title="3、创建第一个管理员用户"></a>3、创建第一个管理员用户</h5><p><img src="/image-20200511143418502.png" alt="image-20200511143418502"></p><h5 id="4、url-配置"><a href="#4、url-配置" class="headerlink" title="4、url 配置"></a>4、url 配置</h5><p>之前版本没有这个选项，这里默认即可:</p><p><img src="/image-20200511144405337.png" alt="image-20200511144405337"></p><h5 id="5、安装完成"><a href="#5、安装完成" class="headerlink" title="5、安装完成"></a>5、安装完成</h5><p>出现如下页面时，表示安装完成</p><p><img src="/image-20200511144436540.png" alt="image-20200511144436540"></p><p><img src="/image-20200511144551020.png" alt="image-20200511144551020"></p><p>这里面有很多配置，下面我们只介绍我们要用到的要修改的配置（之后案例会用到的）。我们不需要全部都配置，等需要什么的时候再去研究一下即可。</p><h5 id="6、配置-jdk、git、maven"><a href="#6、配置-jdk、git、maven" class="headerlink" title="6、配置 jdk、git、maven"></a>6、配置 jdk、git、maven</h5><p>系统管理-&gt;全局工具配置</p><p>jdk：可以自动安装，但是我们已经安装了，这里写入我们jdk的路径即可</p><p><img src="/1235834-20180831165049786-1605588288.png" alt="img"></p><p>git:</p><p><img src="/1235834-20180831165130860-316104310.png" alt="img"></p><p>maven：</p><p><img src="/1235834-20180831165146493-1904811526.png" alt="img"></p><h5 id="7、jenkins-下载插件失败处理办法"><a href="#7、jenkins-下载插件失败处理办法" class="headerlink" title="7、jenkins 下载插件失败处理办法"></a>7、jenkins 下载插件失败处理办法</h5><p>jenkins 下载插件失败,提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java.io.IOException: Downloaded <span class="token function">file</span> /app/jenkins_home/plugins/jacoco.jpi.tmp does not match expected SHA-1, expected <span class="token string">'CtK02wHdFOxTutqhUQzmue6uvpg='</span>, actual <span class="token string">'YGO05utKyaaFzpGCgCE95GS0WsU='</span>at hudson.model.UpdateCenter.verifyChecksums<span class="token punctuation">(</span>UpdateCenter.java:1783<span class="token punctuation">)</span>at hudson.model.UpdateCenter.access<span class="token variable">$1100</span><span class="token punctuation">(</span>UpdateCenter.java:147<span class="token punctuation">)</span>at hudson.model.UpdateCenter<span class="token variable">$InstallationJob</span>.replace<span class="token punctuation">(</span>UpdateCenter.java:1934<span class="token punctuation">)</span>at hudson.model.UpdateCenter<span class="token variable">$UpdateCenterConfiguration</span>.install<span class="token punctuation">(</span>UpdateCenter.java:1178<span class="token punctuation">)</span>at hudson.model.UpdateCenter<span class="token variable">$DownloadJob</span>._run<span class="token punctuation">(</span>UpdateCenter.java:1653<span class="token punctuation">)</span>at hudson.model.UpdateCenter<span class="token variable">$InstallationJob</span>._run<span class="token punctuation">(</span>UpdateCenter.java:1848<span class="token punctuation">)</span>at hudson.model.UpdateCenter<span class="token variable">$DownloadJob</span>.run<span class="token punctuation">(</span>UpdateCenter.java:1624<span class="token punctuation">)</span>at java.util.concurrent.Executors<span class="token variable">$RunnableAdapter</span>.call<span class="token punctuation">(</span>Executors.java:511<span class="token punctuation">)</span>at java.util.concurrent.FutureTask.run<span class="token punctuation">(</span>FutureTask.java:266<span class="token punctuation">)</span>at hudson.remoting.AtmostOneThreadExecutor<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span>AtmostOneThreadExecutor.java:110<span class="token punctuation">)</span>at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:745<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中国源的问题。需要换个源就可，换源方法：</p><p>jenkins-&gt;系统管理-&gt;管理插件-&gt;高级<br>选择升级站点</p><p>把：<a href="http://updates.jenkins-ci.org/update-center.json">http://updates.jenkins-ci.org/update-center.json</a></p><p>换成：<a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p><p>镜像地址查询：</p><p><a href="http://mirrors.jenkins-ci.org/status.html">http://mirrors.jenkins-ci.org/status.html</a> </p><h2 id="四、使用Jenkins"><a href="#四、使用Jenkins" class="headerlink" title="四、使用Jenkins"></a>四、使用Jenkins</h2><h3 id="1、Jenkins-用户权限管理"><a href="#1、Jenkins-用户权限管理" class="headerlink" title="1、Jenkins 用户权限管理"></a>1、Jenkins 用户权限管理</h3><h4 id="1、-用户管理背景"><a href="#1、-用户管理背景" class="headerlink" title="1、 用户管理背景"></a>1、 用户管理背景</h4><p>针对开发、运维、测试针对不同角色进行不同权限划分，</p><p>基于插件： Role-based Authorization Strategy ，Authorize Project 来实现。</p><h4 id="2、-安装用户管理插件"><a href="#2、-安装用户管理插件" class="headerlink" title="2、 安装用户管理插件"></a>2、 安装用户管理插件</h4><p>安装该插件：</p><p>系统管理-&gt;管理插件-可选插件-&gt;搜索该插件选中直接安装即可。</p><p> <img src="/1235834-20180831165508676-16362769.png" alt="img"></p><h4 id="3、-开启该插件功能"><a href="#3、-开启该插件功能" class="headerlink" title="3、 开启该插件功能"></a>3、 开启该插件功能</h4><p>系统管理-&gt;全局安全设置-授权策略-&gt;选中该插件功能即可-&gt;保存</p><p> <img src="/1235834-20180831165538054-922830046.png" alt="img"></p><h4 id="4、-验证用户管理"><a href="#4、-验证用户管理" class="headerlink" title="4、 验证用户管理"></a>4、 验证用户管理</h4><p>关闭用户管理功能来进行实践测试</p><h5 id="1、策略改回原来的（全局安全配置）"><a href="#1、策略改回原来的（全局安全配置）" class="headerlink" title="1、策略改回原来的（全局安全配置）"></a>1、策略改回原来的（全局安全配置）</h5><p><img src="/1235834-20180831165635226-1917360681.png" alt="img"></p><h5 id="2、开启允许用户注册（全局安全配置）"><a href="#2、开启允许用户注册（全局安全配置）" class="headerlink" title="2、开启允许用户注册（全局安全配置）"></a>2、开启允许用户注册（全局安全配置）</h5><p><img src="/1235834-20180831165700914-329576958.png" alt="img"></p><h5 id="3、注册一个新用户"><a href="#3、注册一个新用户" class="headerlink" title="3、注册一个新用户"></a>3、注册一个新用户</h5><p><img src="/1235834-20180831165719453-1979689954.png" alt="img"></p><h5 id="4、登录之后，其默认就是管理员用户，可以进行任何操作"><a href="#4、登录之后，其默认就是管理员用户，可以进行任何操作" class="headerlink" title="4、登录之后，其默认就是管理员用户，可以进行任何操作"></a>4、登录之后，其默认就是管理员用户，可以进行任何操作</h5><p><img src="/1235834-20180831165742247-244014865.png" alt="img"></p><h5 id="5、开启-Role-Based-Strategy"><a href="#5、开启-Role-Based-Strategy" class="headerlink" title="5、开启 Role-Based Strategy"></a>5、开启 Role-Based Strategy</h5><h5 id="6、重新登录新创建-test1-用户，显示已经没有任何权限了"><a href="#6、重新登录新创建-test1-用户，显示已经没有任何权限了" class="headerlink" title="6、重新登录新创建 test1 用户，显示已经没有任何权限了"></a>6、重新登录新创建 test1 用户，显示已经没有任何权限了</h5><p><img src="/1235834-20180831165853876-101591569.png" alt="img"></p><h4 id="5、-权限划分"><a href="#5、-权限划分" class="headerlink" title="5、 权限划分"></a>5、 权限划分</h4><p>安装 Role-Based Strategy 插件后，<strong>系统管理</strong> 中多了如图下所示的一个功能，用户权限的划分就是靠他来做的。</p><p><img src="/1235834-20180831165923312-691685234.png" alt="img"></p><p><img src="/1235834-20180831165930038-36894234.png" alt="img"></p><h5 id="1、Manage-Roles（管理角色）"><a href="#1、Manage-Roles（管理角色）" class="headerlink" title="1、Manage Roles（管理角色）"></a>1、Manage Roles（管理角色）</h5><ul><li>Manage Roles：管理角色，相当于针对角色赋予不同权限，然后在将该角色分配给用户。角色就相当于一个组。其里面又有Global roles（全局）、Project roles（项目）、Slave roles（），来进行不同划分。</li></ul><p>默认如图下所示：</p><p> <img src="/1235834-20180831170007658-2106612170.png" alt="img"></p><h6 id="1、Global-roles"><a href="#1、Global-roles" class="headerlink" title="1、Global roles"></a>1、Global roles</h6><p>默认是有一个admin用户的，是所有权限都有的，所有权限都是勾选了的。</p><p>接下来我们来添加一个角色：user</p><p><img src="/1235834-20180831170026530-949346396.png" alt="img"></p><p>给其一个读的权限。</p><h6 id="2、Project-roles"><a href="#2、Project-roles" class="headerlink" title="2、Project roles"></a>2、Project roles</h6><ul><li><p>roles to add：表示项目角色</p></li><li><p>Pattern：是用来做正则匹配的（匹配的内容是Job(项目名)），比如说根据正则匹配到的项目项目角色就都有权限；</p></li></ul><p>接下来新建一个 ItemA 项目角色，改项目角色一般给其构建、取消、读取、读取空间权限，一般配置这4个即可</p><p><img src="/1235834-20180831170046126-1725883669.png" alt="img"></p><p>还可以在新建一个 ItemB 项目角色：</p><p><img src="/1235834-20180831170101681-1099638023.png" alt="img"></p><ul><li><p>Slave roles（奴隶角色）：节点相关的权限</p></li><li><p>roles to add：表示项目角色</p></li><li><p>Pattern：是用来做正则匹配的（匹配的内容是节点(slavej节点）），比如说根据正则匹配到的项目项目角色就都有权限；</p></li></ul><p><img src="/360%E6%88%AA%E5%9B%BE168212206791118.png" alt="360截图168212206791118"></p><h5 id="2、Assigin-roles（分配角色）"><a href="#2、Assigin-roles（分配角色）" class="headerlink" title="2、Assigin roles（分配角色）"></a>2、Assigin roles（分配角色）</h5><h6 id="1、给予test1用户分配-user-角色"><a href="#1、给予test1用户分配-user-角色" class="headerlink" title="1、给予test1用户分配 user 角色"></a>1、给予test1用户分配 user 角色</h6><p>这样其就有 manage roles 中刚才创建的user角色的权限了。</p><p><img src="/1235834-20180831170141093-1106115356.png" alt="img"></p><p>此时再去看 test1用户，已有查看的权限了</p><p><img src="/1235834-20180831171312583-2109653620.png" alt="img"></p><h6 id="2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）"><a href="#2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）" class="headerlink" title="2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）"></a>2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）</h6><p>比如将test1用户分配有 ItemA 项目角色，这样其就可以有刚才我们创建的 ItemA 项目角色正则匹配到的项目的权限了。</p><p><img src="/1235834-20180831171359961-22018225.png" alt="img"></p><p>test2 也为其分配一个 ItemB 项目角色</p><p><img src="/1235834-20180831171420831-1902633716.png" alt="img"></p><p>此时可以在 test1 用户这里看到 ItemA 项目角色所匹配到的项目 A-web1</p><p><img src="/1235834-20180831171437298-1904913991.png" alt="img"></p><p>新建一个B-web1项目，同理 test2 用户这里看到I temB 项目角色所匹配到的项目B-web1</p><p><img src="/1235834-20180831171454823-363550384.png" alt="img"></p><p>为了方便项目管理，可以对不同项目进行分类（借助视图）：</p><p><img src="/1235834-20180831171509279-1030579839.png" alt="img"></p><p>分类完如图下所示：</p><p><img src="/1235834-20180831171525036-576038453.png" alt="img"></p><h3 id="2、Jenkins-参数化构建"><a href="#2、Jenkins-参数化构建" class="headerlink" title="2、Jenkins 参数化构建"></a>2、Jenkins 参数化构建</h3><h4 id="1、-参数化构建背景"><a href="#1、-参数化构建背景" class="headerlink" title="1、 参数化构建背景"></a>1、 参数化构建背景</h4><p> 如果只是简单的构建，jenkins自己默认的插件可以做，但是如果我们想要在构建过程中有更多功能，比如说：选择性构建、传参、项目指定变量等等其他功能，基础的参数化构建可以实现一些简单功能，但是要想使用更多功能这时候我们就需要借助参数化构建来实现交互的功能。此处我们来借助以下插件来进行实现：</p><ul><li><p>Extended Choice Parameter（更丰富的参数化构建插件）</p></li><li><p>Git Parameter</p></li></ul><h4 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h4><p>首先还是安装该插件，去管理插件里面进行安装 Extended Choice Parameter</p><p><img src="/1235834-20180831171721299-2027054343.png" alt="img"></p><h5 id="1、项目配置"><a href="#1、项目配置" class="headerlink" title="1、项目配置"></a>1、项目配置</h5><p><img src="/1235834-20180831171807151-657567536.png" alt="img"></p><h5 id="2、选择安装过的插件"><a href="#2、选择安装过的插件" class="headerlink" title="2、选择安装过的插件"></a>2、选择安装过的插件</h5><p><img src="/1235834-20180831171825735-1550501382.png" alt="img"></p><h5 id="3、进行配置"><a href="#3、进行配置" class="headerlink" title="3、进行配置"></a>3、进行配置</h5><p>​                                                             <img src="/1235834-20180831171852747-2039805021.png" alt="img"></p><p>这里这个branch 我们就相当于给其当做一个变量，然后来为其进行传参。</p><p><img src="/1235834-20180831171908041-686186905.png" alt="img"></p><h5 id="4、构建选择执行shell进行测试"><a href="#4、构建选择执行shell进行测试" class="headerlink" title="4、构建选择执行shell进行测试"></a>4、构建选择执行shell进行测试</h5><p><img src="/1235834-20180831171925310-877234848.png" alt="img"></p><p><img src="/1235834-20180831171931759-1794610138.png" alt="img"></p><h5 id="5、参数化配置已经生效"><a href="#5、参数化配置已经生效" class="headerlink" title="5、参数化配置已经生效"></a>5、参数化配置已经生效</h5><p><img src="/1235834-20180831171946619-1779475535.png" alt="img"></p><h5 id="6、构建-test02"><a href="#6、构建-test02" class="headerlink" title="6、构建 test02"></a>6、构建 test02</h5><p>可以发现控制台的输出也是成功了的</p><p>![img](G:&#x2F;BaiduNetdiskDownload&#x2F;docker&#x2F;第13套：4天搞定Git+Jenkins+Harbor+Docker实现CICD&#x2F;CI CD 软件+笔记+资料&#x2F;CI CD 软件+笔记+资料&#x2F;第3天-Jenkins详解&#x2F;assets&#x2F;1235834-20180831172008888-985342835.png)</p><p><img src="/image-20200823112054238.png" alt="image-20200823112054238"></p><h5 id="7、数据来源选择文件"><a href="#7、数据来源选择文件" class="headerlink" title="7、数据来源选择文件"></a>7、数据来源选择文件</h5><p>在jenkins所在服务器进行如下操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /opt/jenkins.property   # 建立一个文件</span><span class="token assign-left variable">abc</span><span class="token operator">=</span>t1,t2,t3,t4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> web 端配置：</p><p><img src="/1235834-20180831172044249-467635589.png" alt="img"></p><p>进行测试：</p><p>构建前：（可以发现也是生效的）</p><p><img src="/1235834-20180831172105902-1561453754.png" alt="img"></p><p>构建后查看结果：（也是成功的）</p><p>![img](G:&#x2F;BaiduNetdiskDownload&#x2F;docker&#x2F;第13套：4天搞定Git+Jenkins+Harbor+Docker实现CICD&#x2F;CI CD 软件+笔记+资料&#x2F;CI CD 软件+笔记+资料&#x2F;第3天-Jenkins详解&#x2F;assets&#x2F;1235834-20180831172117350-824962931.png)</p><p><img src="/image-20200823112204773.png" alt="image-20200823112204773"></p><h4 id="3、Git-插件"><a href="#3、Git-插件" class="headerlink" title="3、Git 插件"></a>3、Git 插件</h4><p>再用 git 时使用该插件是非常方便的。</p><h5 id="1、安装插件-Git-Parameter"><a href="#1、安装插件-Git-Parameter" class="headerlink" title="1、安装插件 Git Parameter"></a>1、安装插件 Git Parameter</h5><p><img src="/1235834-20180831172312057-1192977432.png" alt="img"></p><h5 id="2、进行配置"><a href="#2、进行配置" class="headerlink" title="2、进行配置"></a>2、进行配置</h5><p>在配置之前我们先来说一个坑，当我们在配置git中写了远端地址后，会有如下报错：</p><p><img src="/1235834-20180831172344503-595645026.png" alt="img"></p><p>这是因为 jenkins 我们 yum 装的运行用户是 jenkins 用户，此处是 jenkins 用户去 git 仓库进行拉取，而 jenkins 用户的话默认是 &#x2F;bin&#x2F;false 的，不但不能登录，也没有 git 命令权限，所以肯定是失败的。</p><p>解决此问题两种办法：</p><ul><li><p>更改jenkins用户为root用户；</p></li><li><p>更改jenkins用户为正常的普通用户&#x2F;bin&#x2F;bash，将其的公钥加入到git服务器的git用户中。</p></li></ul><p>此处暂时先用第一种解决办法，更改 jenkins 的运行用户为 root 用户，通过如下方式进行更改：</p><ul><li><p>将&#x2F;etc&#x2F;sysconfig&#x2F;jenkins文件由<img src="/1235834-20180831172403790-793357643.png" alt="img">改为<img src="/1235834-20180831172419499-231798333.png" alt="img"></p></li><li><p>然后再重启即可。</p></li></ul><h5 id="3、进行相关配置"><a href="#3、进行相关配置" class="headerlink" title="3、进行相关配置"></a>3、进行相关配置</h5><p><img src="/1235834-20180905174228683-1325675254.png" alt="img"></p><h5 id="4、配置-git-仓库"><a href="#4、配置-git-仓库" class="headerlink" title="4、配置 git 仓库"></a>4、配置 git 仓库</h5><p><img src="/1235834-20180905174238241-1229199729.png" alt="img"></p><p>凭据这里有两种方式：</p><p>第一种：选择无</p><ul><li>其实就是基于免秘钥的。</li></ul><p>第二种：用户（其实就是git用户）</p><p><img src="/1235834-20180905174257903-1112577737.png" alt="img"></p><p>当构建时给一个选择列表，这个变量是代表分支。有哪些分支传递给这个变量。</p><p><img src="/1235834-20180905174314569-1455405236.png" alt="img"></p><h5 id="5、进行构建"><a href="#5、进行构建" class="headerlink" title="5、进行构建"></a>5、进行构建</h5><h6 id="1、列表中已经有了可选的分支"><a href="#1、列表中已经有了可选的分支" class="headerlink" title="1、列表中已经有了可选的分支"></a>1、列表中已经有了可选的分支</h6><p><img src="/1235834-20180905174352937-817873860.png" alt="img"></p><h6 id="2、构建成功"><a href="#2、构建成功" class="headerlink" title="2、构建成功"></a>2、构建成功</h6><p>![img](G:&#x2F;BaiduNetdiskDownload&#x2F;docker&#x2F;第13套：4天搞定Git+Jenkins+Harbor+Docker实现CICD&#x2F;CI CD 软件+笔记+资料&#x2F;CI CD 软件+笔记+资料&#x2F;第3天-Jenkins详解&#x2F;assets&#x2F;1235834-20180905174410958-2125207362.png)</p><p><img src="/image-20200823112303658.png" alt="image-20200823112303658"></p><h6 id="3、新建分支增添内容再来验证插件"><a href="#3、新建分支增添内容再来验证插件" class="headerlink" title="3、新建分支增添内容再来验证插件"></a>3、新建分支增添内容再来验证插件</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git branch </span>* master<span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git branch test</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git checkout test</span>Switched to branch <span class="token string">'test'</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git branch</span>  master* <span class="token builtin class-name">test</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># touch a</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git commit -m "a"</span><span class="token punctuation">[</span>test c286460<span class="token punctuation">]</span> a <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">0</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">0</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span> create mode <span class="token number">100644</span> a<span class="token punctuation">[</span>root@qfedu.com app<span class="token punctuation">]</span><span class="token comment"># git push origin test</span>Counting objects: <span class="token number">3</span>, done.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, <span class="token number">231</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">2</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To git@172.16.1.3:/home/git/repos/app.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      <span class="token builtin class-name">test</span> -<span class="token operator">></span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、jenkins-构建查看"><a href="#4、jenkins-构建查看" class="headerlink" title="4、jenkins 构建查看"></a>4、jenkins 构建查看</h6><p><img src="/1235834-20180905174449507-511735917.png" alt="img"></p><p>可以发现已经有了我们新建的分支。</p><p>构建成功！！</p><p><img src="/1235834-20180905174509176-598896431.png" alt="img"></p><h3 id="3、Jenkins-Master-Slave-架构"><a href="#3、Jenkins-Master-Slave-架构" class="headerlink" title="3、Jenkins Master-Slave 架构"></a>3、Jenkins Master-Slave 架构</h3><p><img src="/1235834-20180905174647968-1070498866.png" alt="img"></p><ul><li><p>jenkins的Master-slave分布式架构主要是为了解决jenkins单点构建任务多、负载较高、性能不足的场景。</p></li><li><p>Master&#x2F;Slave相当于Server和agent的概念。Master提供web接口让用户来管理job和slave，job可以运行在master本机或者被分配到slave上运行构建。一个master（jenkins服务所在机器）可以关联多个slave用来为不同的job或相同的job的不同配置来服务。</p></li></ul><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><p><strong>前提：slave 所在服务器必须有 java环境</strong></p><p>jenkins web 端进行操作：</p><p>系统管理-&gt;管理节点-&gt;新建节点</p><p>1、进行基础配置</p><p>配置选项中的内容是可变的，根据情况来</p><p><img src="/1235834-20180905174740210-1910187239.png" alt="img"></p><p><img src="/1235834-20180905174812065-1298673844.png" alt="img"></p><p>注意这里需要配置凭据，也就是配置slave所在服务器用户和密码</p><p><img src="/1235834-20180905174833717-113155048.png" alt="img"></p><p>之后保存，如果无误的话就会直接启动了，如图下所示是有问题的</p><p> <img src="/1235834-20180905174858307-1689117384.png" alt="img"></p><p>通过看输出日志，发现是 jdk 的问题，一般来说，其会判断 slave 所在服务器有没有 jdk，如果有就会进行检测，如下图所示，就是没有检查到（因为jdk是我们自己装的，路径并不是默认的路径）。</p><p><img src="/1235834-20180905174933937-2072546466.png" alt="img"></p><p>没有检查到的话其就会去oracle官网下载，来为 slave 所在服务器进行安装，但是因为中国的原因，被墙了，所以也会下载失败，最终就导致彻底失败了，失败如图下：</p><p> <img src="/1235834-20180905175013098-1305201866.png" alt="img"></p><p>有两种方法解决：推荐方法1：</p><p>方法1：</p><p>在配置时高级的选项里指定java路径：如下图所示：</p><p><img src="/1235834-20180905175036117-145610379.png" alt="img"></p><p>方法2：</p><p>为 java 路径做一个软链接，保证 jenkins 可以检测到 java。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ln -s /usr/local/jdk1.8/bin/java /usr/bin/java</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ll /usr/bin/java </span>lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">26</span> Jul <span class="token number">25</span> <span class="token number">17</span>:33 /usr/bin/java -<span class="token operator">></span> /usr/local/jdk1.8/bin/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 之后在看已经成功了！</p><p><img src="/1235834-20180905175117966-1877923320.png" alt="img"></p><p><img src="/1235834-20180905175129896-1990617523.png" alt="img"></p><p>并且也可以在 slave 所在服务器看到：</p><p><img src="/1235834-20180905175143501-1725798918.png" alt="img"></p><p>jar 包就是负责接收 master 任务的。</p><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><p>在项目 job 中进行配置：</p><p>可通过标签或者名称进行匹配（标签可在安装时配置）</p><p><img src="/1235834-20180905175239298-1454561108.png" alt="img"></p><h4 id="3、构建"><a href="#3、构建" class="headerlink" title="3、构建"></a>3、构建</h4><p><img src="/1235834-20180905175325125-311183582.png" alt="img"></p><p>可以发现控制台的日志，其也是 slave 构建的</p><p><img src="/1235834-20180905175346873-1882059918.png" alt="img"></p><p>之后查看构建完的工作目录，也有预想中的文件。</p><p><img src="/1235834-20180905175404104-944359554.png" alt="img"></p><p>这样基本上就实现了借助 jenkins 的 slave 去构建 job了。</p><p>目前是在 slave 构建也在 slave 上部署，之后我们可以通过脚本，比如借助 rsync、ansible 等部署在其他服务器上。</p><h4 id="4、扩展"><a href="#4、扩展" class="headerlink" title="4、扩展"></a>4、扩展</h4><p>可以为slave服务器在配置时候加上标签，这样也会方便我们选择，用法也不单单局限在一台服务器上，可以让多台 slave 去竞选。</p><h3 id="4、Jenkins-pipeline"><a href="#4、Jenkins-pipeline" class="headerlink" title="4、Jenkins pipeline"></a>4、Jenkins pipeline</h3><h4 id="1、概览"><a href="#1、概览" class="headerlink" title="1、概览"></a>1、概览</h4><p><img src="/1235834-20180905175950688-621991737.png" alt="img"></p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><p>在对 jenkins 进行初始化安装时，默认已经安装了 jenkins 的相关插件，如下图所示：</p><p><img src="/1235834-20180905180059074-2046998049.png" alt="img"></p><h4 id="3、实操"><a href="#3、实操" class="headerlink" title="3、实操"></a>3、实操</h4><h5 id="1、新建任务"><a href="#1、新建任务" class="headerlink" title="1、新建任务"></a>1、新建任务</h5><p><img src="/1235834-20180905180134440-703318370.png" alt="img"></p><h5 id="2、编写-pipeline-脚本"><a href="#2、编写-pipeline-脚本" class="headerlink" title="2、编写 pipeline 脚本"></a>2、编写 pipeline 脚本</h5><p><img src="/1235834-20180905180200172-202457638.png" alt="img"></p><p>可以借助流水线语法去做。</p><p>test 流水线脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">&#123;</span>   def mvnHome   stage<span class="token punctuation">(</span><span class="token string">'git checkout'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">#for display purposes</span>        checkout<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$class</span><span class="token builtin class-name">:</span> <span class="token string">'GitSCM'</span>, branches: <span class="token punctuation">[</span><span class="token punctuation">[</span>name: <span class="token string">'*/master'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, doGenerateSubmoduleConfigurations: false, extensions: <span class="token punctuation">[</span><span class="token punctuation">]</span>, submoduleCfg: <span class="token punctuation">[</span><span class="token punctuation">]</span>, userRemoteConfigs: <span class="token punctuation">[</span><span class="token punctuation">[</span>url: <span class="token string">'git@172.16.1.3:/home/git/repos/app.git'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'maven Build'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">echo</span> <span class="token string">"maven build........."</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'deploy'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">echo</span> <span class="token string">"deploy..........."</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">echo</span> <span class="token string">"test..........."</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、构建测试"><a href="#3、构建测试" class="headerlink" title="3、构建测试"></a>3、构建测试</h5><p><img src="/1235834-20180905180243809-1620313434.png" alt="img"></p><p>可以去服务器上验证一下（git checkout）刚才拉取下来的代码：</p><p><img src="/1235834-20180905180256704-210794930.png" alt="img"></p><p>补充：</p><ul><li><p>可以从代码版本管理仓库中读取 pipeline 脚本（相当于将 pipeline 脚本放在仓库中）我们可以选择git。</p></li><li><p>首先需要将 pipeline 脚本提交到我们新建的 git仓库中（步骤再此忽略。）</p></li></ul><p>jenkins 项目中需要进行如下配置：</p><p>其中脚本路径的配置，一定要和版本仓库中的路径相一致。</p><p><img src="/1235834-20180905180344737-1469717868.png" alt="img"></p><p>之后如果要更改步骤，不需要再更改 jenkins 的步骤，直接更改文件即可。</p><p>补充：</p><p>此外之前的测试一直是在 master上构建的，我们还可以通过在 jenkinsfile 中指定节点在相应节点去构建</p><p>具体在 jenkinsfile 的 node 后进行指定：</p><p>如下图所示：</p><p><img src="/1235834-20180905180411824-506078483-1581427002304.png" alt="img"></p><p>格式为：node (“节点名称”)</p><p><strong>具体配置详解请参考</strong> <a href="https://jenkins.io/doc/book/pipeline/">https://jenkins.io/doc/book/pipeline/</a></p><h3 id="5、Jenkins-构建邮件状态通知"><a href="#5、Jenkins-构建邮件状态通知" class="headerlink" title="5、Jenkins 构建邮件状态通知"></a>5、Jenkins 构建邮件状态通知</h3><h4 id="1、-前提"><a href="#1、-前提" class="headerlink" title="1、 前提"></a>1、 前提</h4><p>前提：服务器开启邮箱服务</p><p><img src="/1235834-20180905180750936-201397371-1581427002304.png" alt="img"></p><h4 id="2、-基础配置"><a href="#2、-基础配置" class="headerlink" title="2、 基础配置"></a>2、 基础配置</h4><p>需要安装一个插件：</p><p>插件： Email Extension Plugin</p><p>进行配置：</p><p>系统管理-&gt;系统设置-&gt;相关配置如下图：</p><p><img src="/1235834-20180905180920720-1267268825-1581427002304.png" alt="img"></p><p><img src="/1235834-20180905181032556-219409886-1581427002304.png" alt="img"></p><p>可以在此处进行测试发送！检验配置是否正确</p><p><img src="/1235834-20180905181105795-859970074-1581427002304.png" alt="img"></p><h4 id="3、-配置到项目中"><a href="#3、-配置到项目中" class="headerlink" title="3、 配置到项目中"></a>3、 配置到项目中</h4><p>在项目的配置中选择构建后操作</p><p><img src="/1235834-20180905181815334-1545576302-1581427002304.png" alt="img"></p><p>选择我们对应的插件</p><p><img src="/1235834-20180905181902914-1329981046-1581427002304.png" alt="img"></p><p>填写发件人信息</p><p><img src="/1235834-20180905181920357-2050627859-1581427002304.png" alt="img"></p><p>配置构建成功发送邮件</p><p><img src="/1235834-20180905181944795-1066960449-1581427002304.png" alt="img"></p><p>控制台也有邮件发送成功输出</p><p><img src="/1235834-20180905182332647-1761846010-1581427002304.png" alt="img"></p><p>检查实际是否接收到邮件</p><h3 id="6、Jenkins-流水线自动化发布PHP项目"><a href="#6、Jenkins-流水线自动化发布PHP项目" class="headerlink" title="6、Jenkins 流水线自动化发布PHP项目"></a>6、Jenkins 流水线自动化发布PHP项目</h3><h4 id="1、前提"><a href="#1、前提" class="headerlink" title="1、前提"></a>1、前提</h4><p><strong>环境为</strong>：lnmp</p><p><strong>PHP项目</strong>：wordpress（此处我们下载一个wordpress的源码。将其模拟为我们的代码上传到我们的git仓库）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.name "Administrator"</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.email '18611142071@163.com'</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git status</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git clone git@192.168.152.138:plat-sp/wordpress.git</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># tar xf wordpress-5.2.1.tar.gz</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd wordpress</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># mv /root/wordpress/* .</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m 'new1'</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git push  -u origin master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>部署节点</strong>： node 节点需要在系统管理中配置节点</p><h4 id="2、配置-1"><a href="#2、配置-1" class="headerlink" title="2、配置"></a>2、配置</h4><h5 id="1、创建job"><a href="#1、创建job" class="headerlink" title="1、创建job"></a>1、创建job</h5><p><img src="/1235834-20180905183039989-769081353-1581427002305.png" alt="img"></p><h5 id="2、参数化构建"><a href="#2、参数化构建" class="headerlink" title="2、参数化构建"></a>2、参数化构建</h5><p><img src="/1235834-20180905183208466-356358757-1581427002305.png" alt="img"></p><h5 id="3、配置pipeline脚本-（直接配置或者git获取）"><a href="#3、配置pipeline脚本-（直接配置或者git获取）" class="headerlink" title="3、配置pipeline脚本 （直接配置或者git获取）"></a>3、配置pipeline脚本 （直接配置或者git获取）</h5><p><img src="/360%E6%88%AA%E5%9B%BE18620330175141-1581427002305.png" alt="360截图18620330175141"></p><p><img src="/360%E6%88%AA%E5%9B%BE18260727588956-1581427002305.png" alt="360截图18260727588956"></p><h5 id="4、保存"><a href="#4、保存" class="headerlink" title="4、保存"></a>4、保存</h5><h4 id="3、编写-jenkinsfile"><a href="#3、编写-jenkinsfile" class="headerlink" title="3、编写 jenkinsfile"></a>3、编写 jenkinsfile</h4><p>接下里编写jenkinsfile文件：</p><p>jenkinsfile-PHP：</p><p>源码文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">(</span><span class="token string">"jenkins-slave2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   stage<span class="token punctuation">(</span><span class="token string">'git checkout'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       checkout<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$class</span><span class="token builtin class-name">:</span> <span class="token string">'GitSCM'</span>, branches: <span class="token punctuation">[</span><span class="token punctuation">[</span>name: <span class="token string">'$&#123;branch&#125;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, doGenerateSubmoduleConfigurations: false, extensions: <span class="token punctuation">[</span><span class="token punctuation">]</span>, submoduleCfg: <span class="token punctuation">[</span><span class="token punctuation">]</span>, userRemoteConfigs: <span class="token punctuation">[</span><span class="token punctuation">[</span>url: <span class="token string">'git@192.168.152.138:plat-sp/wordpress.git'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'code copy'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">''</span>'rm <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;WORKSPACE&#125;</span>/.git        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/backup/web-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%F"</span><span class="token variable">)</span></span>        <span class="token function">mv</span> /home/wwwroot/default/* /data/backup/web-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%F"</span><span class="token variable">)</span></span>        <span class="token function">cp</span> <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;WORKSPACE&#125;</span>/* /home/wwwroot/default/<span class="token string">''</span>'   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">sh</span> <span class="token string">"curl http://192.168.152.153/status.html"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">node</span> <span class="token punctuation">(</span><span class="token string">"slave01-172.16.1.2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   stage<span class="token punctuation">(</span><span class="token string">'git checkout'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       checkout<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$class</span><span class="token builtin class-name">:</span> <span class="token string">'GitSCM'</span>, branches: <span class="token punctuation">[</span><span class="token punctuation">[</span>name: <span class="token string">'$&#123;branch&#125;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, doGenerateSubmoduleConfigurations: false, extensions: <span class="token punctuation">[</span><span class="token punctuation">]</span>, submoduleCfg: <span class="token punctuation">[</span><span class="token punctuation">]</span>, userRemoteConfigs: <span class="token punctuation">[</span><span class="token punctuation">[</span>url: <span class="token string">'git@172.16.1.3:/home/git/repos/wordpress'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'code copy'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">''</span>'rm <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;WORKSPACE&#125;</span>/.git        <span class="token function">mv</span> /usr/share/nginx/html/wp.com /data/backup/wp.com-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%F_%T"</span><span class="token variable">)</span></span>        <span class="token function">cp</span> <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;WORKSPACE&#125;</span> /usr/share/nginx/html/wp.com<span class="token string">''</span>'   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">sh</span> <span class="token string">"curl http://wp.test.com/status.html"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面为带解释版，但不可以使用，部分注释会造成问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">(</span><span class="token string">"slave01-172.16.1.2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment"># 绑定到该节点去执行</span>   stage<span class="token punctuation">(</span><span class="token string">'git checkout'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment"># 拉代码</span>       checkout<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$class</span><span class="token builtin class-name">:</span> <span class="token string">'GitSCM'</span>, branches: <span class="token punctuation">[</span><span class="token punctuation">[</span>name: <span class="token string">'$&#123;branch&#125;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, doGenerateSubmoduleConfigurations: false, extensions: <span class="token punctuation">[</span><span class="token punctuation">]</span>, <span class="token function">su</span>bmoduleCfg: <span class="token punctuation">[</span><span class="token punctuation">]</span>, userRemoteConfigs: <span class="token punctuation">[</span><span class="token punctuation">[</span>url: <span class="token string">'git@172.16.1.3:/home/git/repos/wordpress'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token comment"># $class: 'GitSCM' git插件获取代码的工具</span>   <span class="token comment"># branches 分支名称</span>   <span class="token comment"># doGenerateSubmoduleConfigurations 是否包含子模块配置</span>   <span class="token comment"># extensions 扩展功能</span>   <span class="token comment"># submoduleCfg  子模块配置</span>   <span class="token comment"># userRemoteConfigs 远程用户配置（仓库地址）</span>   stage<span class="token punctuation">(</span><span class="token string">'code copy'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 复制代码</span>        <span class="token function">sh</span> <span class="token string">''</span>'rm <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;WORKSPACE&#125;</span>/.git   <span class="token comment"># 删除拉下来的项目的.git敏感文件</span>        <span class="token function">mv</span> /usr/share/nginx/html/wp.com /data/backup/wp.com-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%F_%T"</span><span class="token variable">)</span></span>  <span class="token comment"># 备份旧文件</span>        <span class="token function">cp</span> <span class="token parameter variable">-rf</span> <span class="token variable">$&#123;WORKSPACE&#125;</span> /usr/share/nginx/html/wp.com<span class="token string">''</span>'  <span class="token comment"># 新文件复制到站点目录</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 测试</span>       <span class="token function">sh</span> <span class="token string">"curl http://wp.test.com/status.html"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、构建"><a href="#4、构建" class="headerlink" title="4、构建"></a>4、构建</h4><p>构建概览：</p><p><img src="/1235834-20180905184051509-1764641810-1581427002305.png" alt="img"></p><p>控制台输出详情：</p><p><img src="/1235834-20180905184107686-644530379-1581427002305.png" alt="img"></p><p><img src="/1235834-20180905184123455-512468351-1581427002305.png" alt="img"></p><p>可以看到每一步的执行详情，最后也是成功的！！！！！！</p><p>此外我们可以查看服务器及网页实际体验效果进行验证。</p><h3 id="7、Jenkins流水线自动化发布Java项目"><a href="#7、Jenkins流水线自动化发布Java项目" class="headerlink" title="7、Jenkins流水线自动化发布Java项目"></a>7、Jenkins流水线自动化发布Java项目</h3><h4 id="1、前提-1"><a href="#1、前提-1" class="headerlink" title="1、前提"></a>1、前提</h4><p><strong>插件</strong>：Maven Integration plugin</p><p><strong>环境：</strong>maven、tomcat，git</p><p>用的博客系统代码：</p><p>git clone <a href="https://github.com/b3log/solo.git">https://github.com/b3log/solo.git</a></p><p>远端git服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p solo</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd solo/</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git --bare init</span>Initialized empty Git repository <span class="token keyword">in</span> /home/git/repos/solo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本地web：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git remote -v</span>origin    git@172.16.1.3:/home/git/repos/solo <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin    git@172.16.1.3:/home/git/repos/solo <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git remote rm origin</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git init</span>Reinitialized existing Git repository <span class="token keyword">in</span> /root/solo/.git/<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git remote add origin git@172.16.1.3:/home/git/repos/solo</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add .</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m "java solo all"</span><span class="token comment"># On branch master</span>nothing to commit, working directory clean<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git push origin master</span>Counting objects: <span class="token number">29058</span>, done.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">9854</span>/9854<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">29058</span>/29058<span class="token punctuation">)</span>, <span class="token number">47.77</span> MiB <span class="token operator">|</span> <span class="token number">39.28</span> MiB/s, done.Total <span class="token number">29058</span> <span class="token punctuation">(</span>delta <span class="token number">15768</span><span class="token punctuation">)</span>, reused <span class="token number">29058</span> <span class="token punctuation">(</span>delta <span class="token number">15768</span><span class="token punctuation">)</span>To git@172.16.1.3:/home/git/repos/solo * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为solo需要改如下配置才可以访问：（改serverhost为指定的域名）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /root/solo/src/main/resources/latke.properties</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/1235834-20180905184545173-2047374097-1581427002305.png" alt="img"></p><p>然后再重新提交上去</p><p><strong>部署节点：</strong> node 节点需要在系统管理中配置节点</p><h4 id="2、配置-2"><a href="#2、配置-2" class="headerlink" title="2、配置"></a>2、配置</h4><h5 id="1、新建job"><a href="#1、新建job" class="headerlink" title="1、新建job"></a>1、新建job</h5><p><img src="/1235834-20180905184625352-2046318711-1581427002305.png" alt="img"></p><h5 id="2、参数化构建-1"><a href="#2、参数化构建-1" class="headerlink" title="2、参数化构建"></a>2、参数化构建</h5><p><img src="/1235834-20180905184640513-596342130-1581427002305.png" alt="img"></p><h5 id="3、配置git仓库（针对jenkinsfile）"><a href="#3、配置git仓库（针对jenkinsfile）" class="headerlink" title="3、配置git仓库（针对jenkinsfile）"></a>3、配置git仓库（针对jenkinsfile）</h5><p><img src="/1235834-20180905184651748-234872141-1581427002305.png" alt="img"></p><h4 id="3、编写Jenkinsfile"><a href="#3、编写Jenkinsfile" class="headerlink" title="3、编写Jenkinsfile"></a>3、编写Jenkinsfile</h4><p>源码配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">(</span><span class="token string">"slave02-172.16.1.3"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment"># def mvnHome = '/usr/local/maven'</span>   stage<span class="token punctuation">(</span><span class="token string">'git checkout'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        checkout<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$class</span><span class="token builtin class-name">:</span> <span class="token string">'GitSCM'</span>, branches: <span class="token punctuation">[</span><span class="token punctuation">[</span>name: <span class="token string">'$&#123;branch&#125;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, doGenerateSubmoduleConfigurations: false, extensions: <span class="token punctuation">[</span><span class="token punctuation">]</span>, submoduleCfg: <span class="token punctuation">[</span><span class="token punctuation">]</span>, userRemoteConfigs: <span class="token punctuation">[</span><span class="token punctuation">[</span>url: <span class="token string">'git@172.16.1.3:/home/git/repos/solo'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'maven build'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">''</span>'export <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java        /usr/local/maven/bin/mvn clean package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span class="token string">''</span>'   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'deploy'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sh</span> <span class="token string">''</span>'    <span class="token assign-left variable">JENKINS_NODE_COOKIE</span><span class="token operator">=</span>dontkillme    <span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java        <span class="token assign-left variable">TOMCAT_NAME</span><span class="token operator">=</span>tomcat        <span class="token assign-left variable">TOMCAT_HOME</span><span class="token operator">=</span>/usr/local/<span class="token variable">$TOMCAT_NAME</span>        <span class="token assign-left variable">WWWROOT</span><span class="token operator">=</span><span class="token variable">$TOMCAT_HOME</span>/webapps/ROOT        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$WWWROOT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>           <span class="token function">mv</span> <span class="token variable">$WWWROOT</span> /data/backup/<span class="token variable">$&#123;TOMCAT_NAME&#125;</span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%F_%T"</span><span class="token variable">)</span></span>        <span class="token keyword">fi</span>        <span class="token function">unzip</span> <span class="token variable">$&#123;WORKSPACE&#125;</span>/target/*.war <span class="token parameter variable">-d</span> <span class="token variable">$WWWROOT</span>        <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> $TOMCAT_NAME <span class="token operator">|</span><span class="token function">egrep</span> <span class="token parameter variable">-v</span> <span class="token string">"grep|<span class="token variable">$$</span>"</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token punctuation">\</span>'<span class="token punctuation">&#123;</span>print $2<span class="token punctuation">&#125;</span><span class="token punctuation">\</span>'<span class="token variable">)</span></span>        <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$PID</span>        /bin/bash <span class="token variable">$TOMCAT_HOME</span>/bin/startup.sh       <span class="token string">''</span>'    <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sh</span> <span class="token string">"curl http://192.168.152.138:8080/status.html"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"test ok!!!!!!!"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面为带解释版，但不可以使用，部分注释会造成问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token punctuation">(</span><span class="token string">"slave02-172.16.1.3"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment"># 绑定到该节点构建</span>   <span class="token comment"># def mvnHome = '/usr/local/maven'</span>   stage<span class="token punctuation">(</span><span class="token string">'git checkout'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment"># 拉代码</span>        checkout<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$class</span><span class="token builtin class-name">:</span> <span class="token string">'GitSCM'</span>, branches: <span class="token punctuation">[</span><span class="token punctuation">[</span>name: <span class="token string">'$&#123;branch&#125;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>, doGenerateSubmoduleConfigurations: false, extensions: <span class="token punctuation">[</span><span class="token punctuation">]</span>, submoduleCfg: <span class="token punctuation">[</span><span class="token punctuation">]</span>, userRemoteConfigs: <span class="token punctuation">[</span><span class="token punctuation">[</span>url: <span class="token string">'git@172.16.1.3:/home/git/repos/solo'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'maven build'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># maven build</span>        <span class="token function">sh</span> <span class="token string">''</span>'export <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java    <span class="token comment"># 在指定java环境变量</span>        /usr/local/maven/bin/mvn clean package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span class="token string">''</span>'   <span class="token comment"># 构建maven包 clean package表示构建之前会清理之前构建的包，-Dmaven.test.skip=true表示跳过单元测试</span>   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'deploy'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment"># 部署</span>        <span class="token function">sh</span> <span class="token string">''</span>'        <span class="token assign-left variable">JENKINS_NODE_COOKIE</span><span class="token operator">=</span>dontkillme  <span class="token comment"># tomcat启动时会衍生出一些子进程，然后才能成功启动，但是jenkins会在构建结束杀掉tomcat的那些衍生子进程，造成tomcat启动失败，此处加上这个参数可以解决这个问题。</span>        <span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java        <span class="token assign-left variable">TOMCAT_NAME</span><span class="token operator">=</span>tomcat        <span class="token assign-left variable">TOMCAT_HOME</span><span class="token operator">=</span>/usr/local/<span class="token variable">$TOMCAT_NAME</span>        <span class="token assign-left variable">WWWROOT</span><span class="token operator">=</span><span class="token variable">$TOMCAT_HOME</span>/webapps/ROOT        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$WWWROOT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token comment"># 如果目录存在，先备份</span>           <span class="token function">mv</span> <span class="token variable">$WWWROOT</span> /data/backup/<span class="token variable">$&#123;TOMCAT_NAME&#125;</span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%F_%T"</span><span class="token variable">)</span></span>        <span class="token keyword">fi</span>        <span class="token function">unzip</span> <span class="token variable">$&#123;WORKSPACE&#125;</span>/target/*.war <span class="token parameter variable">-d</span> <span class="token variable">$WWWROOT</span>   <span class="token comment"># 项目包解压到站点目录</span>        <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> $TOMCAT_NAME <span class="token operator">|</span><span class="token function">egrep</span> <span class="token parameter variable">-v</span> <span class="token string">"grep|<span class="token variable">$$</span>"</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token punctuation">\</span>'<span class="token punctuation">&#123;</span>print $2<span class="token punctuation">&#125;</span><span class="token punctuation">\</span>'<span class="token variable">)</span></span>   <span class="token comment"># 重启tomcat</span>        <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$PID</span>        /bin/bash <span class="token variable">$TOMCAT_HOME</span>/bin/startup.sh<span class="token string">''</span>'   <span class="token punctuation">&#125;</span>   stage<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 测试</span>        <span class="token comment"># sh "curl http://wp.test.com/status.html"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"test ok!!!!!!!"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、构建-1"><a href="#4、构建-1" class="headerlink" title="4、构建"></a>4、构建</h4><p><img src="/1235834-20180905184913443-2058202273-1581427002305.png" alt="img"></p><h4 id="5、访问"><a href="#5、访问" class="headerlink" title="5、访问"></a>5、访问</h4><p><img src="/1235834-20180905184940777-1980161350-1581427002305.png" alt="img"></p><p><strong>报错处理</strong></p><p>pipeline script from SCM方式下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Started by user ***java.io.FileNotFoundException    at jenkins.plugins.git.GitSCMFile<span class="token variable">$3</span>.invoke<span class="token punctuation">(</span>GitSCMFile.java:167<span class="token punctuation">)</span>    at jenkins.plugins.git.GitSCMFile<span class="token variable">$3</span>.invoke<span class="token punctuation">(</span>GitSCMFile.java:159<span class="token punctuation">)</span>    at jenkins.plugins.git.GitSCMFileSystem<span class="token variable">$3</span>.invoke<span class="token punctuation">(</span>GitSCMFileSystem.java:193<span class="token punctuation">)</span>    <span class="token punctuation">..</span>.lFinished: FAILURE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/4276633-a4aee92aa7677655-1581427002305.png" alt="img"></p><p>​                                                  <strong>原因是git工程下，没有找到Script Path路径下的脚本文件</strong>。</p><h3 id="8、Jenkins-结合-gitlab-使用"><a href="#8、Jenkins-结合-gitlab-使用" class="headerlink" title="8、Jenkins 结合 gitlab 使用"></a>8、Jenkins 结合 gitlab 使用</h3><h4 id="1、创建一个新的任务"><a href="#1、创建一个新的任务" class="headerlink" title="1、创建一个新的任务"></a>1、创建一个新的任务</h4><p><img src="/1190037-20171201192354042-830010134-1581427002305.png" alt="img"></p><p>输入项目的名称，选择构建只有分风格的软件</p><p><img src="/1190037-20171201192401401-883929242-1581427002305.png" alt="img"></p><h4 id="2、将Jenkins与gitlab联合"><a href="#2、将Jenkins与gitlab联合" class="headerlink" title="2、将Jenkins与gitlab联合"></a>2、将Jenkins与gitlab联合</h4><h5 id="1、Jenkins创建公钥和私钥"><a href="#1、Jenkins创建公钥和私钥" class="headerlink" title="1、Jenkins创建公钥和私钥"></a>1、Jenkins创建公钥和私钥</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen </span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:5SGYye8oxCKFJjddb4W8JC0RAQhBWCvuG8aZL8eMJs4 root@JenkinsThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+<span class="token operator">|</span><span class="token operator">==</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">=</span>* <span class="token punctuation">..</span>      <span class="token operator">|</span><span class="token operator">|</span><span class="token punctuation">..</span>.o <span class="token assign-left variable">oo</span><span class="token operator">==</span>.       <span class="token operator">|</span><span class="token operator">|</span>+.<span class="token operator">=</span> <span class="token builtin class-name">.</span> <span class="token operator">=</span>++.o      <span class="token operator">|</span><span class="token operator">|</span>++ o   o.+ <span class="token builtin class-name">.</span>     <span class="token operator">|</span><span class="token operator">|</span><span class="token punctuation">..</span>. o   S <span class="token builtin class-name">.</span>      <span class="token operator">|</span><span class="token operator">|</span>o.oo   o         <span class="token operator">|</span><span class="token operator">|</span> B+ <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>        <span class="token operator">|</span><span class="token operator">|</span>++++ <span class="token builtin class-name">.</span>           <span class="token operator">|</span><span class="token operator">|</span>+Eo.             <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat .ssh/id_rsa.pub </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat .ssh/id_rsa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、在gitlab中添加公钥id-rsa-pub"><a href="#2、在gitlab中添加公钥id-rsa-pub" class="headerlink" title="2、在gitlab中添加公钥id_rsa.pub"></a>2、在gitlab中添加公钥id_rsa.pub</h5><p><img src="/1190037-20171201192426354-684435689-1581427002305.png" alt="img"></p><h5 id="3、在jenkins中添加私钥id-rsa"><a href="#3、在jenkins中添加私钥id-rsa" class="headerlink" title="3、在jenkins中添加私钥id_rsa"></a>3、在jenkins中添加私钥id_rsa</h5><p>​         在首页中，点击项目名称的下拉监听</p><p><img src="/1190037-20171201192438933-1952523900-1581427002305.png" alt="img"></p><p>​         选择源码管理，先将gitlab的项目地址复制过来</p><p><img src="/1190037-20171201192448667-1624864487-1581427002305.png" alt="img"></p><p>​         选择SSH密钥和证书，然后选择直接输入，将私钥复制到下框中即可</p><p>​         添加完成后，点击保存</p><p><img src="/1190037-20171201192456448-898723804-1581427002305.png" alt="img"></p><p>​         选择刚才创建的证书，完成后，选择构建</p><p><img src="/1190037-20171201192504808-1018752536-1581427002305.png" alt="img"></p><p><strong>选择构建</strong></p><p>​         拉到最底部，选择使用shell脚本</p><p><img src="/1190037-20171201192512214-519514729-1581427002305.png" alt="img"></p><p>​         脚本内容</p><p><img src="/1190037-20171201192518948-2060407751-1581427002305.png" alt="img"></p><p>​         创建测试环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /data/www</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># chown -R jenkins.jenkins /data/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​         选择构建后的操作，让每次构建完成后都将结果发送给管理员</p><p><img src="/1190037-20171201192536214-662773016-1581427002307.png" alt="img"></p><h4 id="3、测试手动集成"><a href="#3、测试手动集成" class="headerlink" title="3、测试手动集成"></a>3、测试手动集成</h4><p>回到主页，点击右侧的按钮进行测试</p><p><img src="/1190037-20171201192552839-1669748311-1581427002307.png" alt="img"></p><p>部署完成</p><p><img src="/1190037-20171201192558886-1289295614-1581427002307.png" alt="img"></p><p>查看部署日志</p><p><img src="/1190037-20171201192606261-1352544543-1581427002307.png" alt="img"></p><p>查看部署结果</p><pre class="line-numbers language-none"><code class="language-none">[root@qfedu.com ~]# ll &#x2F;data&#x2F;www&#x2F;总用量 4-rw-r--r-- 1 jenkins jenkins 4 11月 30 21:22 flag-rw-r--r-- 1 jenkins jenkins 0 11月 30 21:22 README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、自动测试（gitlab主动通知Jenkins测试）"><a href="#4、自动测试（gitlab主动通知Jenkins测试）" class="headerlink" title="4、自动测试（gitlab主动通知Jenkins测试）"></a>4、自动测试（gitlab主动通知Jenkins测试）</h4><p>该功能会使用到一个插件 <strong>gitlab plugin</strong></p><p>配置gitlab认证</p><p><img src="/1190037-20171201192624433-157495203-1581427002307.png" alt="img"></p><p>添加一个新的凭证</p><p><img src="/1190037-20171201192631683-372513748-1581427002307.png" alt="img"></p><p>   从gitlab的设置中将 token复制过来（需要手动创建token）</p><p><img src="/360%E6%88%AA%E5%9B%BE18620331606393-1581427002307.png" alt="360截图18620331606393"></p><p> 将复制的token粘贴到api token中，点ok</p><p><img src="/1190037-20171201192651667-606045732-1581427002307.png" alt="img"></p><p> 在系统配置中找到<strong>Gitlab</strong> 将信息进行填写，Credentials 选择刚刚创建对的即可</p><p><img src="/1190037-20171201192700729-449236192-1581427002307.png" alt="img"></p><p>打开项目，编辑项目的构建触发器</p><p><img src="/1190037-20171201192710183-1810385177-1581427002307.png" alt="img"></p><p>在gitlab上配置连接jenkins ，将Jenkins的Secret token 与Build URL 复制到gitlab中</p><p>注意： 在项目设置中的集成</p><p><img src="/1190037-20171201192718448-1860661215-1581427002307.png" alt="img"></p><p>保存之前先进程测试，测试成功后进行保存</p><p><img src="/1190037-20171201192726448-895582851-1581427002307.png" alt="img"></p><p> 在gitlab进行上传文件，可以测试。</p><p>在日志中显示是 Started by GitLab push by Administrator 即表示自动集成成功</p><p><img src="/1190037-20171201192733104-716903443-1581427002307.png" alt="img"></p><h4 id="5、错误解决"><a href="#5、错误解决" class="headerlink" title="5、错误解决"></a>5、错误解决</h4><ul><li><p><strong>错误提示：</strong></p><pre class="line-numbers language-none"><code class="language-none">#很多朋友使用最新版本的gitlab做自动部署时，在增加web钩子那一步，#点击test  push events时会报错：Url is blocked: Requests to the local network are not allowed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/b36a6a1bc5d58b0186618d020a801cc7-1581427002307.png" alt="Gitlab+Jenkins实现自动部署"></p></li><li><p>解决方法：</p><p>这是因为新版的gitlab为了安全默认禁止了本地局域网地址调用web hook<br>我们在设置里允许就行，具体步骤如下：</p><p><img src="/2ac7f84e086f61d521781c3027576b1e-1581427002308.png" alt="Gitlab+Jenkins实现自动部署"><br><img src="/f13e07e857b8d7677bb04f2631692e06-1581427002308.png" alt="Gitlab+Jenkins实现自动部署"></p></li></ul><p><img src="/360%E6%88%AA%E5%9B%BE17370510273154-1581427002308.png" alt="360截图17370510273154"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CICD基础</title>
      <link href="/posts/24454.html"/>
      <url>/posts/24454.html</url>
      
        <content type="html"><![CDATA[<h1 id="CI-x2F-CD基础"><a href="#CI-x2F-CD基础" class="headerlink" title="CI&#x2F;CD基础"></a>CI&#x2F;CD基础</h1><h2 id="一、代码上线方案"><a href="#一、代码上线方案" class="headerlink" title="一、代码上线方案"></a>一、代码上线方案</h2><h4 id="1、早期手动部署代码"><a href="#1、早期手动部署代码" class="headerlink" title="1、早期手动部署代码"></a>1、早期手动部署代码</h4><ul><li><p>纯手动Scp、Rsync上传代码。</p></li><li><p>纯手动登陆，Git pull 或者 Svn update。</p></li><li><p>纯手动xftp、ftp、filezilla上传代码。</p></li><li><p>开发发送压缩包，rz上传，解压部署代码。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>全程运维参与，占用大量时间。</p></li><li><p>如果节点多，上线速度慢。</p></li><li><p>人为失误多，目录管理混乱。 </p></li><li><p>回滚不及时，或者难以回退。</p></li></ul><p><strong>上线方案示意图：</strong></p><p><img src="/1190037-20171201192743261-564020995-1581427002308.png" alt="img"></p><h4 id="2、合理化上线方案"><a href="#2、合理化上线方案" class="headerlink" title="2、合理化上线方案"></a>2、合理化上线方案</h4><ul><li><p>开发人员(rd)需在个人电脑搭建LAMP环境测试开发好的网站代码，并且在办公室或 IDC机房的测试环境测试通过，最好有专职测试人员(ts)。</p></li><li><p>程序代码上线要规定时间，例如：三天上线一次，如网站需经常更新可每天下午 20 点上线，这个看网站业务性质而定，原则就是影响用户体验最小。</p></li><li><p>代码上线之前需备份，网站程序出了问题方便回退，另外，从上线技巧上讲，上传代码时尽可能先传到服务器网站临时目录，传完整后一步mv过去，或者通过In做软链接— 线上更新代码的思路。如果严格更新，把应用服务器从集群节点平滑下线，然后更新。</p></li><li><p>尽量由运维人员管理上线，对于代码的功能性，开发人员更在意，而对于代码的性能优化和上线后服务器的稳定，运维更在意服务器的稳定，因此，如果网站宕机问题归运维管，就要让运维上线，这样更规范科学。否则，开发随意更新，出了问题运维负责，这样就错了，运维永远无法抬头。</p></li></ul><p><img src="/1190037-20171201192752386-122301749-1581427002308.png" alt="img"></p><p>​     <strong>web代码规范化上线流程图</strong></p><h4 id="3、大型企业上线制度和流程"><a href="#3、大型企业上线制度和流程" class="headerlink" title="3、大型企业上线制度和流程"></a>3、大型企业上线制度和流程</h4><p><strong>JAVA代码环境</strong>上线时，有数台机器同时需要更新或者分批更新 </p><ul><li><p>本地开发人员取svn代码。当天上线提交到trunk，否则，长期项目单开分支开发，然后在合并主线(trunk)</p></li><li><p>办公内网开发测试时，由开发人员或配置管理员通过部署平台jenkins实现统一部署，（即在部署平台上控制开发机器从svn取代码，编译，打包，发布到开发机，包名如idc_dep.war）.</p></li><li><p>开发人员通知或和测试人员一起测试程序，没有问题后，由配置管理员打上新的tag标记。这里要注意，不同环境的配置文件是随代码同时发布的。</p></li><li><p>配置管理员，根据上一步的tag标记，checkout出上线代码，并配置好IDC测试环境的所有配置，执行编译，打包(mvn,ant)(php不需要打包)，然后发布到IDC内的统一分发服务器。</p></li><li><p>配置管理员或SA上线人员，把分发的程序代码内容推送到相关测试服务器（包名如idc_test.war），然后通知开发及测试人员进行测试。如果有问题向上回退，继续修改。</p></li><li><p>如果IDC测试没有问题，继续打好tag标记，此时，配置管理员，根据上步的tag标记，checkout出测试好的代码，并配置好IDC正式环境的所有配置，执行编译，打包(mvn,ant)(php不需要打包)，然后发布到IDC内的统一分发服务器主机，准备批量发布。</p></li><li><p>配置管理员或SA上线人员，把分发的内容推送到相关正式服务器（包名如idc_product.war）,然后通知开发及测试人员进行测试。如果有问题直接发布回滚指令。</p></li></ul><p> IDC正式上线的过程对于JAVA程序，可以是AB组分组上线的思路，即平滑下线一半的服务器，然后发布更新代码，重启测试，无问题后，挂上更新后的服务器，同时再平滑下线另一半的服务器，然后发布更新代码测试（或者直接发布后，重启，挂上线）</p><h4 id="4-、php程序代码上线的具体方案"><a href="#4-、php程序代码上线的具体方案" class="headerlink" title="4 、php程序代码上线的具体方案"></a>4 、php程序代码上线的具体方案</h4><p> 对于PHP上线方法：发布代码时（也需要测试流程）可以直接发布到正式线临时目录 ，然后mv或更改link的方式发布到正式上线目录 ，不需要重启http服务。这是新朗，赶集的上线方案。</p><h4 id="5-、Java程序代码上线的具体方案"><a href="#5-、Java程序代码上线的具体方案" class="headerlink" title="5 、Java程序代码上线的具体方案"></a>5 、Java程序代码上线的具体方案</h4><p>对于java上线方法:较大公司需要分组平滑上线（如从负载均衡器上摘掉一半的服务器），发布代码后，重启服务器测试，没问题后，挂上上好线的一半，再下另外一半。如果前端有DNS智能解析，上线还可以分地区上线若干服务器，逐渐普及到全国的服务器，这个被称为“灰度发布”，在后面门户网站上线的知识里我们在讲解。</p><h4 id="6-、代码上线解决方案注意事项"><a href="#6-、代码上线解决方案注意事项" class="headerlink" title="6 、代码上线解决方案注意事项"></a>6 、代码上线解决方案注意事项</h4><p>上线的流程里，办公室测试环境–&gt;IDC测试环境–&gt;正式生产环境，所有环境中的所有软件均应版本统一，其次尽量单一，否则将后患无穷，开发测试成功，IDC测试就可能有问题（如:操作系统，web服务器，jdk,php,tomcat,resin等版本）</p><ul><li><p>开发团队小组办公内部测试环境测试（该测试环境属于开发小组维护，或定时自动更新代码），代码有问题返回给某开发人员重新开发。</p></li><li><p>有专门的测试工程师，程序有问题直接返回给开发人员（此时返回的一般为程序的BUG，称为BUG库），无问题进行IDC测试</p></li><li><p>IDC测试由测试人员和运维人员参与，叫IDCtest,进行程序的压力测试，有问题直接返回给开发人员，无问题进行线上环境上线。</p></li><li><p>数台服务器代码分发上线方案举例（JAVA程序）</p><p>A:假设同业务服务器有6台，将服务器分为A,B两组，A组三台，B组三台，先对A组进行从负载均衡器上平滑下线，B组正常提供服务，避免服务器因上线影响业务。</p><p>B:下线过程是通过脚本将A组服务器从RS池（LVS,NGINX,HAPROXY,F5等均有平滑方案）中踢出，避免负裁均衡器将请求发送给A组服务器（此时的时间应该为网站流量少时，一般为晚上）</p><p>C:将代码分发到A组服务器的站点目录下，对A组服务器上线并重启服务，并由专业的测试人员进行访问测试，测试成功后，挂上A组的服务器，同时下线B组服务器，B组代码上线操作测试等和A组相同，期间也要观察上线提供服务的服务器状况，有问题及时回滚。</p></li><li><p>如果是PHP程序，则上线可以简单化，直接将上线代码（最好全量）发布到所有上线服务器的特定目录后，分发完成后，一次性mv或ln到站点目录，当然测试也是少不了的。测试除了人员测试外，还有各种测试脚本测试各个相关业务接口。</p></li></ul><h2 id="二、理解持续集成、持续交付、持续部署"><a href="#二、理解持续集成、持续交付、持续部署" class="headerlink" title="二、理解持续集成、持续交付、持续部署"></a>二、理解持续集成、持续交付、持续部署</h2><p>软件开发的连续方法基于自动执行脚本，以最大限度地减少在开发应用程序时引入错误的可能性。从新代码的开发到部署，它们需要较少的人为干预甚至根本不需要干预。它涉及在每次小迭代中不断构建，测试和部署代码更改，从而减少基于有缺陷或失败的先前版本开发新代码的机会。有三种主要方法，分别为持续集成、持续交付、持续部署，每种方法都根据最适合您的策略进行应用。</p><p><img src="/1352872-20180728202111287-1863851599.png" alt="img"></p><h3 id="1、持续集成"><a href="#1、持续集成" class="headerlink" title="1、持续集成"></a>1、持续集成</h3><p><strong>代码合并，构建，部署，测试都在一起，不断地执行这个过程，并对结果反馈</strong>。</p><p>持续集成（英语：Continuous integration，缩写为 <strong>CI</strong>），一种软件工程流程，将所有工程师对于软件的工作复本，每天集成数次到共用主线（mainline）上。</p><p>这个名称最早由葛来迪·布区（Grady Booch）在他的布区方法中提出，但是他并没有提到要每天集成数次。之后成为极限编程（extreme programming，缩写为XP）的一部分。在测试驱动开发（TDD）的作法中，通常还会搭配自动单元测试。</p><p>持续集成的提出，主要是为了解决软件进行系统集成时面临的各项问题，极限编程称这些问题为集成地狱（integration hell）。</p><p><img src="/1190037-20171201191840448-1304029709.png" alt="img"></p><p>持续集成主要是强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。简单来讲就是：频繁地（一天多次）将代码集成到主干。</p><p><strong>持续集成的目的</strong></p><ul><li><p>及早发现集成错误且由于修订的内容较小所以易于追踪，这可以节省项目的时间与成本。</p></li><li><p>避免发布日期的前一分钟发生混乱，当每个人都会尝试为他们所造成的那一点点不兼容的版本做检查。</p></li><li><p>当单元测试失或发生错误，若开发人员需要在不除错的情况下还原代码库到一个没有问题的状态，只需要放弃一小部分的更改 (因为集成的次数频繁)。</p></li><li><p>让 “最新” 的程序可保持可用的状态供测试、展示或发布用。</p></li><li><p>频繁的提交代码会促使开发人员创建模块化，低复杂性的代码。</p></li><li><p>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li></ul><h3 id="2、持续交付"><a href="#2、持续交付" class="headerlink" title="2、持续交付"></a>2、持续交付</h3><p><strong>部署到测试环境、预生产环境</strong></p><p>持续交付（英语：Continuous delivery，缩写为 <strong>CD</strong>），是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以释出的状况。</p><p>它的目标在于让软件的建置、测试与释出变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。</p><p><img src="/1190037-20171201191850511-1013536040.png" alt="img"></p><p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p><h3 id="3、持续部署"><a href="#3、持续部署" class="headerlink" title="3、持续部署"></a>3、持续部署</h3><p><strong>将最终产品发布到生成环境，给用户使用</strong></p><p>持续部署（英语：Continuous Deployment，缩写为 <strong>CD</strong>），是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</p><p>有时候，持续部署也与持续交付混淆。持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付意味着所有的变更都可以被部署到生产环境中，但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。</p><p><img src="/1190037-20171201191900433-349001067.png" alt="img"></p><p>持续部署即在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="三、Maven-私服-Nexus3"><a href="#三、Maven-私服-Nexus3" class="headerlink" title="三、Maven 私服 Nexus3"></a>三、Maven 私服 Nexus3</h2><h3 id="1、Maven和Nexus3-简介"><a href="#1、Maven和Nexus3-简介" class="headerlink" title="1、Maven和Nexus3 简介"></a>1、Maven和Nexus3 简介</h3><p>Maven是一个采用纯Java编写的开源项目管理工具</p><p>采用一种被称之为Project Object Model(POM)概念来管理项目，所有的项目配置信息都被定义在一个叫做POM.xml的文件中, 通过该文件Maven可以管理项目的整个生命周期，包括清除、编译，测试，报告、打包、部署等等。</p><p>目前Apache下绝大多数项目都已经采用Maven进行管理. 而Maven本身还支持多种插件, 可以方便更灵活的控制项目, 开发人员的主要任务应该是关注商业逻辑并去实现它, 而不是把时间浪费在学习如何在不同的环境中去依赖jar包,项目部署等。</p><p>Maven和ant都是软件构建工具（软件管理工具),Maven比Ant更加强大，已经取代了ant,jar包的声明式依赖描述。Maven有jar包的仓库。</p><p>私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p><p>　　<img src="/1167086-20180825103130887-988863302.jpg" alt="img"></p><p>公司如果没有maven私服，则需要用手动打jar包的方式添加依赖</p><h3 id="2、安装-Maven"><a href="#2、安装-Maven" class="headerlink" title="2、安装 Maven"></a>2、安装 Maven</h3><h4 id="1、下载-maven"><a href="#1、下载-maven" class="headerlink" title="1、下载 maven"></a>1、下载 maven</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、解压安装"><a href="#2、解压安装" class="headerlink" title="2、解压安装"></a>2、解压安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># tar xf apache-maven-3.5.4-bin.tar.gz -C /usr/local/</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ln -s apache-maven-3.5.4/ maven</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、安装-java-环境"><a href="#3、安装-java-环境" class="headerlink" title="3、安装 java 环境"></a>3、安装 java 环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># tar xf jdk-8u201-linux-x64.tar.gz -C /usr/local/</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ln -s jdk1.8.0_201/ java</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、添加环境变量"><a href="#4、添加环境变量" class="headerlink" title="4、添加环境变量"></a>4、添加环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加如下内容（这里的MAVEN_HOME需要改为你自己的maven解压目录）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java<span class="token builtin class-name">export</span> <span class="token assign-left variable">MAVEN_HOME</span><span class="token operator">=</span>/usr/local/maven<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>/usr/local/java/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JRE_HOME</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin:<span class="token variable">$MAVEN_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重载环境变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、验证-maven-安装"><a href="#5、验证-maven-安装" class="headerlink" title="5、验证 maven 安装"></a>5、验证 maven 安装</h4><p>输入命令 mvn -version 看到如下内容说明安装成功了。</p><p><img src="/1167086-20180825104448130-1294323799.jpg" alt="img"></p><h3 id="3、安装-nexus3"><a href="#3、安装-nexus3" class="headerlink" title="3、安装 nexus3"></a>3、安装 nexus3</h3><h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h4><p>专业版的nexus收费，下载开源版 Nexus OSS,下载地址为 <a href="https://www.sonatype.com/download-oss-sonatype">https://www.sonatype.com/download-oss-sonatype</a></p><p><img src="/1167086-20180825105031180-667090550.jpg" alt="img"></p><p>Wing下载的时候可以获取链接用迅雷下载，我是直接把https改成了http下载，下载下来的包大小不一样，我暂时使用的是小一点的120多M的安装包</p><h4 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># tar -zxf nexus-3.13.0-01-unix.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压后会多出两个目录，nexus-3.13.0-01和sonatype-work。</p><h4 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd nexus-3.13.0-01/bin/</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ./nexus start</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/1167086-20180825105844833-1628287044.jpg" alt="img"></p><p>看到如图所示内容表明我们已经启动成功了，游览器输入<a href="http://localhost:8081即可访问。">http://localhost:8081即可访问。</a></p><p><strong>注意：</strong></p><p>启动后如果你立即访问可能发现什么都没有，不要急这个启动需要一定时间，<strong>1分钟后再尝试访问</strong></p><p><img src="/1167086-20180825110836868-96057072.jpg" alt="img">　</p><p><strong>登录</strong> ： </p><p>点击右上角的sign in登录，输入账户<strong>admin</strong></p><p>密码:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /root/sonatype-work/nexus3/admin.password</span>91c37108-809a-495b-942d-3932b9b33e04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、仓库介绍"><a href="#4、仓库介绍" class="headerlink" title="4、仓库介绍"></a>4、仓库介绍</h4><p>点击“设置-Repositories”，就可以看到仓库，分三种类型：</p><p><img src="/image-20200509104646789.png" alt="image-20200509104646789"></p><ul><li><p><strong>proxy</strong>：是远程仓库的代理。比如说在nexus中配置了一个central repository的proxy，当用户向这个proxy请求一个artifact，这个proxy就会先在本地查找，如果找不到的话，就会从远程仓库下载，然后返回给用户，相当于起到一个中转的作用。　　　　</p></li><li><p><strong>Hosted</strong>：是宿主仓库，用户可以把自己的一些构件，deploy到hosted中，也可以手工上传构件到hosted里。比如说oracle的驱动程序，ojdbc6.jar，在central repository是获取不到的，就需要手工上传到hosted里，一般用来存放公司自己的jar包；</p></li><li><p><strong>Group</strong>：是仓库组，在maven里没有这个概念，是nexus特有的。目的是将上述多个仓库聚合，对用户暴露统一的地址，这样用户就不需要在pom中配置多个地址，只要统一配置group的地址就可以了右边那个Repository Path可以点击进去，看到仓库中artifact列表。不过要注意浏览器缓存，<strong>当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可</strong>。</p><p><strong>maven-public：</strong>maven-central、maven-release和maven-snapshot三个库的合集。</p><p><strong>maven-release：</strong>用来存放release版本的jar包。</p><p><strong>maven-snapshot：</strong>用来存放snapshot版本的jar包。</p></li></ul><p><strong>关于Maven的Snapshot版本与Release版本</strong></p><ol><li><p>Snapshot版本代表不稳定、尚处于开发中的版本 </p></li><li><p>Release版本则代表稳定的版本 </p></li><li><p>什么情况下该用SNAPSHOT?<br>协同开发时，如果A依赖构件B，由于B会更新，B应该使用SNAPSHOT来标识自己。这种做法的必要性可以反证如下：</p></li></ol><p>a.如果B不用SNAPSHOT，而是每次更新后都使用一个稳定的版本，那版本号就会升得太快，每天一升e68a84e8a2ade79fa5e9819331333363396362甚至每个小时一升，这就是对版本号的滥用。 </p><p>b.如果B不用SNAPSHOT,  但一直使用一个单一的Release版本号，那当B更新后，A可能并不会接受到更新。因为A所使用的repository一般不会频繁更新release版本的缓存（即本地repository)，所以B以不换版本号的方式更新后，A在拿B时发现本地已有这个版本，就不会去远程Repository下载最新的B </p><ol start="4"><li>不用Release版本，在所有地方都用SNAPSHOT版本行不行？<br>不行。正式环境中不得使用snapshot版本的库。  比如说，今天你依赖某个snapshot版本的第三方库成功构建了自己的应用，明天再构建时可能就会失败，因为今晚第三方可能已经更新了它的snapshot库。你再次构建时，Maven会去远程repository下载snapshot的最新版本，你构建时用的库就是新的jar文件了，这时正确性就很难保证了。</li></ol><h4 id="5、向-nexus3-私服上传-jar-包"><a href="#5、向-nexus3-私服上传-jar-包" class="headerlink" title="5、向 nexus3 私服上传 jar 包"></a>5、向 nexus3 私服上传 jar 包</h4><h5 id="1、准备环境"><a href="#1、准备环境" class="headerlink" title="1、准备环境"></a>1、准备环境</h5><h6 id="1、创建3rd-part库"><a href="#1、创建3rd-part库" class="headerlink" title="1、创建3rd_part库"></a>1、创建<code>3rd_part</code>库</h6><p>使用默认用户 <strong>admin&#x2F;admin123</strong> 登陆</p><p><img src="/20180303135907573.png" alt="这里写图片描述"></p><p>点击左侧的<code>repository\repositories</code>后,在右侧点击<code>create repository</code></p><p><img src="/20180303135924229.png" alt="这里写图片描述"></p><p>然后选择<code>maven2(hosted)</code>,填写如下</p><p><img src="/20180303135934168.png" alt="这里写图片描述"></p><p>跳到首页后选择<code>maven-public</code></p><p><img src="/2018030313595437.png" alt="这里写图片描述"></p><p>将<code>3rd_part</code>移到<code>member</code>中,即将<code>3rd_part</code>由<code>maven-public</code>管理，点击save</p><p><img src="/20180303140006220.png" alt="这里写图片描述"></p><p>至此,创建仓库完成</p><h6 id="2、创建-3rd-part-管理用户"><a href="#2、创建-3rd-part-管理用户" class="headerlink" title="2、创建 3rd_part 管理用户"></a>2、创建 <code>3rd_part</code> 管理用户</h6><p>创建用户: 用户名&#x2F;密码-<code>dev/dev123</code></p><p><img src="/20180303154313780.png" alt="这里写图片描述"></p><h5 id="2、直接浏览器"><a href="#2、直接浏览器" class="headerlink" title="2、直接浏览器"></a>2、直接浏览器</h5><p>使用<code>dev/dev123</code>登陆，点击<code>upload</code></p><p><img src="/20180303141603409.png" alt="这里写图片描述"></p><p>填写上传jar包的信息后，点击<code>upload</code></p><p><img src="/20180303141617257.png" alt="这里写图片描述"></p><p>可以看到已经上传成功</p><p><img src="/20180303141629234.png" alt="这里写图片描述"></p><h3 id="4、常见错误"><a href="#4、常见错误" class="headerlink" title="4、常见错误"></a>4、常见错误</h3><p>问题1：上传报错误码405，Failed to transfer file。</p><p>​      解决：仔细查看报错信息就会发现，是上传的url错了,原因就是repository的地址写错了。</p><p>问题2：错误码401或者403</p><p>​      解决：其实403错误就是“禁止访问”的含义，所以问题的根源肯定在授权上面。Maven在默认情况下会使用deployment帐号(默认密码deploy)登录的系统，但是关键的Nexus中Releases仓库默认的Deployment Policy是“Disable Redeploy”，所以无法部署的问题在这个地方，方法是将其修改为“Allow Redeploy”就可以了。401就是Maven settings.xml没有设置密码</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式版本控制</title>
      <link href="/posts/24097.html"/>
      <url>/posts/24097.html</url>
      
        <content type="html"><![CDATA[<h1 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h1><h2 id="一、Git、Github、Gitlab-的区别"><a href="#一、Git、Github、Gitlab-的区别" class="headerlink" title="一、Git、Github、Gitlab 的区别"></a>一、Git、Github、Gitlab 的区别</h2><p>(SVN和gitee后续补充）</p><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 </p><p>git            是一套软件 可以做本地私有仓库</p><p>github   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库</p><p>gitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库</p><h2 id="二、Git-与-SVN-区别"><a href="#二、Git-与-SVN-区别" class="headerlink" title="二、Git 与 SVN 区别"></a>二、Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p><p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p><p><strong>Git 与 SVN 区别</strong></p><ol><li>Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li><li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li><li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li><li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li><li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><p>git   是分布式的版本控制器  没有客户端和服务器端的概念</p><p>svn 它是C&#x2F;S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失</p><h2 id="三、部署Git-服务"><a href="#三、部署Git-服务" class="headerlink" title="三、部署Git 服务"></a>三、部署Git 服务</h2><p><strong>创建git仓库</strong></p><p>git-server上的操作：</p><pre class="line-numbers language-none"><code class="language-none">[root@qfedu.com ~]# yum install git git-core gitweb -y[root@qfedu.com ~]# useradd git[root@qfedu.com ~]# passwd git[root@qfedu.com ~]# mkdir &#x2F;git-root&#x2F;[root@qfedu.com ~]# cd &#x2F;git-root&#x2F;[root@qfedu.com git-root]# git init --bare shell.gitInitialized empty Git repository in &#x2F;git-root&#x2F;shell.git&#x2F;注意：git init 和 git init --bare 的区别:使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.用&quot;git init&quot;初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因[root@qfedu.com git-root]# chown -R git:git shell.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>git仓库测试</strong></p><p>git-client上的操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id git@192.168.1.178</span><span class="token punctuation">[</span>root@qfedu.com shell<span class="token punctuation">]</span><span class="token comment"># git config --global user.email "you@example.com"</span><span class="token punctuation">[</span>root@qfedu.com shell<span class="token punctuation">]</span><span class="token comment"># git config --global user.name "Your Name"</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git clone git@192.168.1.178:/git-root/shell.git</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ls</span>rh  shell<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd shell/</span><span class="token punctuation">[</span>root@qfedu.com shell<span class="token punctuation">]</span><span class="token comment"># vim test.sh</span><span class="token punctuation">[</span>root@qfedu.com shell<span class="token punctuation">]</span><span class="token comment"># git add test.sh</span><span class="token punctuation">[</span>root@qfedu.com shell<span class="token punctuation">]</span><span class="token comment"># git commit -m 'first commit'</span><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> 33c5fbf<span class="token punctuation">]</span> first commit <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> test1.sh<span class="token punctuation">[</span>root@qfedu.com shell<span class="token punctuation">]</span><span class="token comment"># git push origin master</span>Counting objects: <span class="token number">3</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">230</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To git@192.168.1.178:/git-root/shell.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Git工作流程"><a href="#四、Git工作流程" class="headerlink" title="四、Git工作流程"></a>四、Git工作流程</h2><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。 </li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p> 　　Git 的工作流程示意图：</p><p><img src="/805129-20160710102658467-1520443599.png" alt="img"></p><h2 id="五、Git基本概念"><a href="#五、Git基本概念" class="headerlink" title="五、Git基本概念"></a>五、Git基本概念</h2><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><p>　　工作区、版本库中的暂存区和版本库之间的关系的示意图：</p><p><img src="/805129-20160710103123608-1172715931.jpg" alt="img"></p><ul><li><p>　　图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 </p></li><li><p>　　图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 </p></li><li><p>　　图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git&#x2F;objects” 目录下，里面包含了创建的各种对象及内容。 </p></li><li><p>　　当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 </p></li><li><p>　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 </p></li><li><p>　　当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 </p></li><li><p>　　当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。 </p></li><li><p>　　当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 </p></li><li><p>　　当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p></li></ul><h2 id="六、Git-客户端安装使用"><a href="#六、Git-客户端安装使用" class="headerlink" title="六、Git 客户端安装使用"></a>六、Git 客户端安装使用</h2><h3 id="1、-Git-安装配置"><a href="#1、-Git-安装配置" class="headerlink" title="1、 Git 安装配置"></a>1、 Git 安装配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum -y install git git-all git-core</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git --version</span><span class="token function">git</span> version <span class="token number">2.18</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2、Git-配置"><a href="#2、Git-配置" class="headerlink" title="2、Git 配置"></a>2、Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p><p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><h4 id="1、Git-用户信息"><a href="#1、Git-用户信息" class="headerlink" title="1、Git 用户信息"></a>1、Git 用户信息</h4><p>配置个人的用户名称和电子邮件地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.name "qfedu"</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.email test@qq.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git&#x2F;config 文件里。</p><h4 id="2、文本编辑器"><a href="#2、文本编辑器" class="headerlink" title="2、文本编辑器"></a>2、文本编辑器</h4><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global core.editor emacs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、差异分析工具"><a href="#3、差异分析工具" class="headerlink" title="3、差异分析工具"></a>3、差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global merge.tool vimdiff</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p><p>当然，你也可以指定使用自己开发的工具</p><h4 id="4、查看配置信息"><a href="#4、查看配置信息" class="headerlink" title="4、查看配置信息"></a>4、查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --list</span><span class="token assign-left variable">http.postbuffer</span><span class="token operator">=</span>2M<span class="token assign-left variable">user.name</span><span class="token operator">=</span>runoob<span class="token assign-left variable">user.email</span><span class="token operator">=</span>test@runoob.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 &#x2F;etc&#x2F;gitconfig 和 ~&#x2F;.gitconfig），不过最终 Git 实际采用的是最后一个。</p><p>这些配置我们也可以在 <strong>~&#x2F;.gitconfig</strong> 或 <strong>&#x2F;etc&#x2F;gitconfig</strong> 看到，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim ~/.gitconfig </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示内容如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>http<span class="token punctuation">]</span>    postBuffer <span class="token operator">=</span> 2M<span class="token punctuation">[</span>user<span class="token punctuation">]</span>    name <span class="token operator">=</span> <span class="token function">git</span>    email <span class="token operator">=</span> test@qfedu.com.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config user.name</span><span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、Git-使用"><a href="#3、Git-使用" class="headerlink" title="3、Git 使用"></a>3、Git 使用</h3><h4 id="1、ssh-链接"><a href="#1、ssh-链接" class="headerlink" title="1、ssh 链接"></a>1、ssh 链接</h4><p>客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全</p><h4 id="2、http-链接（两种方式实现）"><a href="#2、http-链接（两种方式实现）" class="headerlink" title="2、http 链接（两种方式实现）"></a>2、http 链接（两种方式实现）</h4><h5 id="1、修改代码里的-git-x2F-config-文件添加登录用户名密码"><a href="#1、修改代码里的-git-x2F-config-文件添加登录用户名密码" class="headerlink" title="1、修改代码里的 .git&#x2F;config 文件添加登录用户名密码"></a>1、修改代码里的 .git&#x2F;config 文件添加登录用户名密码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd .git</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat config</span><span class="token punctuation">[</span>core<span class="token punctuation">]</span>repositoryformatversion <span class="token operator">=</span> <span class="token number">0</span>filemode <span class="token operator">=</span> <span class="token boolean">true</span>bare <span class="token operator">=</span> <span class="token boolean">false</span>logallrefupdates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>remote <span class="token string">"origin"</span><span class="token punctuation">]</span>fetch <span class="token operator">=</span> +refs/heads/*:refs/remotes/origin/*url <span class="token operator">=</span> http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git<span class="token punctuation">[</span>branch <span class="token string">"master"</span><span class="token punctuation">]</span>remote <span class="token operator">=</span> originmerge <span class="token operator">=</span> refs/heads/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、-执行命令设置登录用户和密码"><a href="#2、-执行命令设置登录用户和密码" class="headerlink" title="2、 执行命令设置登录用户和密码"></a>2、 执行命令设置登录用户和密码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cd到根目录，执行</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项</span>  <span class="token punctuation">[</span>credential<span class="token punctuation">]</span>           helper <span class="token operator">=</span> store<span class="token comment"># cd到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git pull </span>  Username <span class="token keyword">for</span> <span class="token string">'http://172.17.0.39:sauser/ansible.git'</span><span class="token builtin class-name">:</span>   xxxx@xxxx.com Password <span class="token keyword">for</span> <span class="token string">'https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git'</span><span class="token builtin class-name">:</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat .git-credentials</span>  https://Username:Password@qfedu.com.oschina.net<span class="token comment"># 之后pull/push代码都不再需要输入账号密码了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、设置身份验证"><a href="#3、设置身份验证" class="headerlink" title="3、设置身份验证"></a>3、设置身份验证</h4><p><strong>注意：</strong>设定本机用户名，绑定邮箱，让远程服务器知道机器的身份</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.name "user_name" </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git config --global user.email "XXXXX@XX.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、本地项目与远程服务器项目之间的交互"><a href="#4、本地项目与远程服务器项目之间的交互" class="headerlink" title="4、本地项目与远程服务器项目之间的交互"></a>4、本地项目与远程服务器项目之间的交互</h4><p>1、如果你没有最新的代码，希望从头开始</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd BGBInspector_V01        # clone 之后进入该项目的文件夹 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># touch　README.md           # 新建readme文件 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add README.md          # 将新的文件添加到git的暂存区 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git push -u origin master  # 将本地的更改提交到远程服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git init           # 初始化 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git remote add origin git@master:/git-test/shell.git  #添加远程项目"shell"库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库"shell"</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add .                   #添加该文件夹中所有的文件到git的暂存区 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m ‘note’        #提交所有代码到本机的版本库 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git push -u origin master   #将本地的更改提交到远程服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，</p></li><li><p>建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来</p></li><li><p>git pull&#x3D;git fetch+git merge</p><p>实验如下：</p><pre class="line-numbers language-none"><code class="language-none">本地代码内容如下：[root@node1 shell]# cat mem.sh free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;echo helloecho ni hao远程Git服务器代码内容如下：[root@node1 shell]# cat mem.sh free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;echo helloecho ni haoecho ha ha本地机器做fetch操作：[root@node1 shell]# git fetch origin master:testremote: Enumerating objects: 5, done.remote: Counting objects: 100% (5&#x2F;5), done.remote: Compressing objects: 100% (2&#x2F;2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3&#x2F;3), done.From master:&#x2F;git-test&#x2F;shell * [new branch]      master     -&gt; test   b522245..10f9569  master     -&gt; origin&#x2F;masterfetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在查看本地文件并没有发生变化[root@node1 shell]# ls  mem.sh[root@node1 shell]# cat mem.sh free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;echo helloecho ni hao用diff查看本地master分支和fetch下来的test分支有什么区别：[root@node1 shell]# git diff master testdiff --git a&#x2F;mem.sh b&#x2F;mem.shindex 7ce0803..c0c8cef 100644--- a&#x2F;mem.sh+++ b&#x2F;mem.sh@@ -1,3 +1,4 @@ free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39; echo hello echo ni hao+echo ha ha如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并[root@node1 shell]# git merge Updating eb8645c..10f9569Fast-forward mem.sh | 1 + 1 file changed, 1 insertion(+)[root@node1 shell]# cat mem.sh free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;echo helloecho ni haoecho ha ha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5、常用的git-命令"><a href="#5、常用的git-命令" class="headerlink" title="5、常用的git 命令"></a>5、常用的git 命令</h4><p><img src="/011500266295799.jpg" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git init                      # 初始化 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add main.cpp              # 将某一个文件添加到暂存区 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add .                     # 将文件夹下的所有的文件添加到暂存区 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git log                       # 查看所有的版本日志 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git status                    # 查看现在暂存区的状况 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git diff                      # 查看现在文件与上一个提交-commit版本的区别 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git reset --hard HEAD^        # 回到上一个版本 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git pull origin master        # 从主分支pull到本地 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git push -u origin master     # 从本地push到主分支 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git pull                      # pull默认主分支 </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git push                      # push默认主分支 ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、版本穿梭"><a href="#6、版本穿梭" class="headerlink" title="6、版本穿梭"></a>6、版本穿梭</h4><h5 id="1、版本回退"><a href="#1、版本回退" class="headerlink" title="1、版本回退"></a>1、版本回退</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用 git log 命令查看：</span><span class="token comment"># 每一个提交的版本都唯一对应一个 commit 版本号，</span><span class="token comment"># 使用 git reset 命令退到上一个版本：</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git reset --hard HEAD^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git reflog                    # 查看命令历史，以便确定要回到哪个版本</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、分支管理"><a href="#2、分支管理" class="headerlink" title="2、分支管理"></a>2、分支管理</h5><p>1、创建分支    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git checkout -b dev     #创建dev分支，然后切换到dev分支</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git branch dev git checkout dev</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git branch              #命令查看当前分支,</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git branch              #命令会列出所有分支，当前分支前面会标一个*号</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git branch * dev   master</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add readme.txt git commit -m "branch test"  # 在dev分支上正常提交.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、分支切换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git checkout master     #切换回master分支</span><span class="token comment"># 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、合并分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git merge dev           #把dev分支的工作成果合并到master分支上</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git merge               #命令用于合并指定分支到当前分支。</span><span class="token comment"># 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git branch -d dev       #删除dev分支了：</span>删除后，查看branch，就只剩下master分支了.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3、解决冲突"><a href="#3、解决冲突" class="headerlink" title="3、解决冲突"></a>3、解决冲突</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git checkout -b feature1        # 创建新的feature1分支</span><span class="token comment"># 修改readme.txt最后一行，改为：</span>Creating a new branch is quick AND simple.<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add readme.txt              # 在feature1分支上提交</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m "AND simple"</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git checkout master             #切换到master分支</span>Switched to branch <span class="token string">'master'</span> Your branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">1</span> commit.Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。在master分支上把readme.txt文件的最后一行改为：Creating a new branch is quick <span class="token operator">&amp;</span> simple.<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add readme.txt </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m "&amp; simple"</span>现在，master分支和feature1分支各自都分别有新的提交这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：<span class="token function">git</span> merge feature1 Auto-merging readme.txt CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> readme.txt Automatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readme.txt文件存在冲突，必须手动解决冲突后再提交。<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git status 可以显示冲突的文件;</span>直接查看readme.txt的内容：Git is a distributed version control system.Git is <span class="token function">free</span> software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEAD Creating a new branch is quick <span class="token operator">&amp;</span> simple. <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Creating a new branch is quick AND simple. <span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> feature1Git用<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span>，<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>，<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>标记出不同分支的内容，我们修改后保存再提交：<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add readme.txt  </span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m "conflict fixed" </span><span class="token punctuation">[</span>master 59bc1cb<span class="token punctuation">]</span> conflict fixed最后，删除feature1分支：<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git branch -d feature1 </span>Deleted branch feature1 <span class="token punctuation">(</span>was 75a857c<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Github-远程仓库"><a href="#七、Github-远程仓库" class="headerlink" title="七、Github 远程仓库"></a>七、Github 远程仓库</h2><p>1、github.com 注册账户</p><p>2、github 上创建仓库</p><p>3、本地服务器生成 ssh 公钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen -t rsa -C 'meteor@163.com'  # 邮箱要与github上注册的相同</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cat .ssh/id_rsa.pub </span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、 github 添加 ssh 公钥 </p><p>复制以上的公钥，在 github 中添加ssh key</p><p>5、测试连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum install git</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># ssh -T git@qfedu.comhub.com</span>The authenticity of <span class="token function">host</span> <span class="token string">'github.com (13.250.177.223)'</span> can<span class="token string">'t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>github.com,13.250.177.223<span class="token string">' (RSA) to the list of known hosts.Hi meteor! You'</span>ve successfully authenticated, but GitHub does not provide shell access.<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、连接远程仓库（创建一个测试存储库）</p><p><img src="/git_remote_method.png" alt="it_remote_metho"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在 github 网站新建一个仓库，命名为linux</span>~~~<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd /opt</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># mkdir linux</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># mkdir linux</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># cd linux</span>~~~<span class="token comment"># git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git init</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># touch README</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git add README</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git commit -m 'first commit'</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git remote add origin git@qfedu.comhub.com:userhub/linux.git</span>~~~<span class="token comment"># 若出现origin已经存在的错误，删除origin</span><span class="token punctuation">[</span>root@qfedu.com linux<span class="token punctuation">]</span><span class="token comment"># git remote rm origin</span><span class="token comment"># 现在继续执行push到远端</span>~~~<span class="token punctuation">[</span>root@qfedu.com linux<span class="token punctuation">]</span><span class="token comment"># git remote add origin git@qfedu.comhub.com:userhub/linux.git</span><span class="token punctuation">[</span>root@qfedu.com linux<span class="token punctuation">]</span><span class="token comment"># git push -u origin master</span>Counting objects: <span class="token number">3</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">205</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To git@qfedu.comhub.com:fakehydra/linux-.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> master分支 master 设置为跟踪来自 origin 的远程分支 master。<span class="token comment"># 注意</span><span class="token comment"># 设置存储库链接</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git remote set-url origin git@qfedu.comhub.com:userhub/linux.git</span><span class="token comment"># 如果 push 失败，合并分支到 master 再 push</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># git pull --rebase origin master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、Gitlab-Server-部署"><a href="#八、Gitlab-Server-部署" class="headerlink" title="八、Gitlab Server 部署"></a>八、Gitlab Server 部署</h2><h3 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h3><p>关闭防火墙、SELinux</p><p>开启邮件服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># systemctl start  postfix</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable postfix</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、部署-Gitlab"><a href="#2、部署-Gitlab" class="headerlink" title="2、部署 Gitlab"></a>2、部署 Gitlab</h3><h4 id="1、安装-gitlab-依赖包"><a href="#1、安装-gitlab-依赖包" class="headerlink" title="1、安装 gitlab 依赖包"></a>1、安装 gitlab 依赖包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">centos7:<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python</span><span class="token comment"># gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python</span>centos8:<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、添加官方源"><a href="#2、添加官方源" class="headerlink" title="2、添加官方源"></a>2、添加官方源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为官方源太慢，可以使用国内清华yum源，配置如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/yum.repos.d/gitlab-ce.repo</span><span class="token punctuation">[</span>gitlab-ce<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Gitlab CE Repository<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el<span class="token variable">$releasever</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、安装-Gitlab"><a href="#3、安装-Gitlab" class="headerlink" title="3、安装 Gitlab"></a>3、安装 Gitlab</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gitlab-ce                    # 自动安装最新版</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># yum -y install gitlab-ce-x.x.x# 安装指定版本Gitlab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、配置-Gitlab"><a href="#4、配置-Gitlab" class="headerlink" title="4、配置 Gitlab"></a>4、配置 Gitlab</h4><h5 id="1、查看Gitlab版本"><a href="#1、查看Gitlab版本" class="headerlink" title="1、查看Gitlab版本"></a>1、查看Gitlab版本</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># head -1 /opt/gitlab/version-manifest.txt</span>gitlab-ce <span class="token number">10.1</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、Gitlab-配置登录链接"><a href="#2、Gitlab-配置登录链接" class="headerlink" title="2、Gitlab 配置登录链接"></a>2、Gitlab 配置登录链接</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置登录链接</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span>***<span class="token comment">## GitLab URL</span><span class="token comment">##! URL on which GitLab will be reachable.</span><span class="token comment">##! For more details on configuring external_url see:</span><span class="token comment">##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab</span><span class="token comment"># 没有域名，可以设置为本机IP地址</span>external_url <span class="token string">'http://172.17.0.61'</span>***<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># grep "^external_url" /etc/gitlab/gitlab.rb</span>external_url <span class="token string">'http://172.17.0.61'</span>     <span class="token comment">#绑定监听的域名或IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、初始化-Gitlab"><a href="#3、初始化-Gitlab" class="headerlink" title="3、初始化 Gitlab"></a>3、初始化 Gitlab</h5><p><strong>配置语言环境</strong></p><p>gitlab要求语言环境为英文环境，必须切换，切换方法如下：</p><pre class="line-numbers language-none"><code class="language-none">注意：可以先尝试以下方案语言环境问题：如果碰到之后的解决方案如下，需要重新登录 [root@wing ~]# echo &quot;export LC_ALL&#x3D;en_US.UTF-8&quot;  &gt;&gt;  &#x2F;etc&#x2F;profile 如果上面的方案不可以，再使用下面的方案： # yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y# cat &gt; &#x2F;etc&#x2F;profile.d&#x2F;locale.sh&lt;&lt;-EOF export LANG&#x3D;en_US.UTF-8 export LANGUAGE&#x3D;en_US.UTF-8 export LC_COLLATE&#x3D;C export LC_CTYPE&#x3D;en_US.UTF-8 EOF# source &#x2F;etc&#x2F;profile.d&#x2F;locale.sh退出终端重新登陆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次使用配置时间较长</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl reconfigure   </span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4、启动-Gitlab-服务"><a href="#4、启动-Gitlab-服务" class="headerlink" title="4、启动 Gitlab 服务"></a>4、启动 Gitlab 服务</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl start</span>ok: run: gitaly: <span class="token punctuation">(</span>pid <span class="token number">22896</span><span class="token punctuation">)</span> 2922sok: run: gitlab-monitor: <span class="token punctuation">(</span>pid <span class="token number">22914</span><span class="token punctuation">)</span> 2921sok: run: gitlab-workhorse: <span class="token punctuation">(</span>pid <span class="token number">22882</span><span class="token punctuation">)</span> 2922sok: run: logrotate: <span class="token punctuation">(</span>pid <span class="token number">22517</span><span class="token punctuation">)</span> 2987sok: run: nginx: <span class="token punctuation">(</span>pid <span class="token number">22500</span><span class="token punctuation">)</span> 2993sok: run: node-exporter: <span class="token punctuation">(</span>pid <span class="token number">22584</span><span class="token punctuation">)</span> 2974sok: run: postgres-exporter: <span class="token punctuation">(</span>pid <span class="token number">22946</span><span class="token punctuation">)</span> 2919sok: run: postgresql: <span class="token punctuation">(</span>pid <span class="token number">22250</span><span class="token punctuation">)</span> 3047sok: run: prometheus: <span class="token punctuation">(</span>pid <span class="token number">22931</span><span class="token punctuation">)</span> 2920sok: run: redis: <span class="token punctuation">(</span>pid <span class="token number">22190</span><span class="token punctuation">)</span> 3053sok: run: redis-exporter: <span class="token punctuation">(</span>pid <span class="token number">22732</span><span class="token punctuation">)</span> 2962sok: run: sidekiq: <span class="token punctuation">(</span>pid <span class="token number">22472</span><span class="token punctuation">)</span> 3005sok: run: unicorn: <span class="token punctuation">(</span>pid <span class="token number">22433</span><span class="token punctuation">)</span> 3011s<span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># lsof -i:80</span>COMMAND   PID       <span class="token environment constant">USER</span>   FD   TYPE DEVICE SIZE/OFF NODE NAMEnginx   <span class="token number">22500</span>       root    7u  IPv4  <span class="token number">50923</span>      0t0  TCP *:http <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>nginx   <span class="token number">22501</span> gitlab-www    7u  IPv4  <span class="token number">50923</span>      0t0  TCP *:http <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、Gitlab-设置-HTTPS-方式-（缺少配置）"><a href="#5、Gitlab-设置-HTTPS-方式-（缺少配置）" class="headerlink" title="5、Gitlab 设置 HTTPS 方式 （缺少配置）"></a>5、Gitlab 设置 HTTPS 方式 （缺少配置）</h5><ul><li>如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span>letsencrypt<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> //如果因为这行报错，改成false即可letsencrypt<span class="token punctuation">[</span><span class="token string">'contact_emails'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'276267003@qq.com'</span><span class="token punctuation">]</span>     <span class="token comment"># 添加联系人的电子邮件地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="6、Gitlab-添加smtp邮件功能"><a href="#6、Gitlab-添加smtp邮件功能" class="headerlink" title="6、Gitlab 添加smtp邮件功能"></a>6、Gitlab 添加smtp邮件功能</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span>postfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： <span class="token comment">### Email Settings</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_enabled'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'15652533044@163.com'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_display_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'gitlab'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_reply_to'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'15652533044@163.com'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_subject_suffix'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'[gitlab]'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.163.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">465</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"15652533044@163.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"kktohrvdryglbjjh"</span> <span class="token comment">#这是我的qq邮箱授权码</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.163.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">#修改配置后需要初始化配置，先关掉服务再重新初始化</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl stop</span>ok: down: gitaly: 0s, normally upok: down: gitlab-monitor: 1s, normally upok: down: gitlab-workhorse: 0s, normally upok: down: logrotate: 1s, normally upok: down: nginx: 0s, normally upok: down: node-exporter: 1s, normally upok: down: postgres-exporter: 0s, normally upok: down: postgresql: 0s, normally upok: down: prometheus: 0s, normally upok: down: redis: 0s, normally upok: down: redis-exporter: 1s, normally upok: down: sidekiq: 0s, normally upok: down: unicorn: 1s, normally up<span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl reconfigure  </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl start</span>ok: run: gitaly: <span class="token punctuation">(</span>pid <span class="token number">37603</span><span class="token punctuation">)</span> 0sok: run: gitlab-monitor: <span class="token punctuation">(</span>pid <span class="token number">37613</span><span class="token punctuation">)</span> 0sok: run: gitlab-workhorse: <span class="token punctuation">(</span>pid <span class="token number">37625</span><span class="token punctuation">)</span> 0sok: run: logrotate: <span class="token punctuation">(</span>pid <span class="token number">37631</span><span class="token punctuation">)</span> 0sok: run: nginx: <span class="token punctuation">(</span>pid <span class="token number">37639</span><span class="token punctuation">)</span> 1sok: run: node-exporter: <span class="token punctuation">(</span>pid <span class="token number">37644</span><span class="token punctuation">)</span> 0sok: run: postgres-exporter: <span class="token punctuation">(</span>pid <span class="token number">37648</span><span class="token punctuation">)</span> 1sok: run: postgresql: <span class="token punctuation">(</span>pid <span class="token number">37652</span><span class="token punctuation">)</span> 0sok: run: prometheus: <span class="token punctuation">(</span>pid <span class="token number">37660</span><span class="token punctuation">)</span> 1sok: run: redis: <span class="token punctuation">(</span>pid <span class="token number">37668</span><span class="token punctuation">)</span> 0sok: run: redis-exporter: <span class="token punctuation">(</span>pid <span class="token number">37746</span><span class="token punctuation">)</span> 0sok: run: sidekiq: <span class="token punctuation">(</span>pid <span class="token number">37750</span><span class="token punctuation">)</span> 1sok: run: unicorn: <span class="token punctuation">(</span>pid <span class="token number">37757</span><span class="token punctuation">)</span> 0s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7、Gitlab-发送邮件测试"><a href="#7、Gitlab-发送邮件测试" class="headerlink" title="7、Gitlab 发送邮件测试"></a>7、Gitlab 发送邮件测试</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rails console </span><span class="token punctuation">[</span>root@wing ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rails console</span>--------------------------------------------------------------------- GitLab:       <span class="token number">12.10</span>.1 <span class="token punctuation">(</span>e658772bd63<span class="token punctuation">)</span> FOSS GitLab Shell: <span class="token number">12.2</span>.0 PostgreSQL:   <span class="token number">11.7</span>---------------------------------------------------------------------Loading production environment <span class="token punctuation">(</span>Rails <span class="token number">6.0</span>.2<span class="token punctuation">)</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:003:<span class="token operator"><span class="token file-descriptor important">0</span>></span> irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:004:<span class="token operator"><span class="token file-descriptor important">0</span>></span> Notify.test_email<span class="token punctuation">(</span><span class="token string">'15652533044@163.com'</span>, <span class="token string">'Message Subject'</span>, <span class="token string">'Message Body'</span><span class="token punctuation">)</span>.deliver_now  //输入测试命令，回车Notify<span class="token comment">#test_email: processed outbound mail in 5.2ms</span>Delivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail <span class="token punctuation">(</span><span class="token number">1430</span>.1ms<span class="token punctuation">)</span>Date: Mon, 04 May <span class="token number">2020</span> <span class="token number">16</span>:13:30 +0800From: gitlab <span class="token operator">&lt;</span><span class="token number">276267003</span>@qq.com<span class="token operator">></span>Reply-To: gitlab <span class="token operator">&lt;</span><span class="token number">276267003</span>@qq.com<span class="token operator">></span>To: <span class="token number">276267003</span>@qq.comMessage-ID: <span class="token operator">&lt;</span>5eafceaa250a_1d063fb777add9a08601a@wing.mail<span class="token operator">></span>Subject: Message SubjectMime-Version: <span class="token number">1.0</span>Content-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8Content-Transfer-Encoding: 7bitAuto-Submitted: auto-generatedX-Auto-Response-Suppress: All<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD HTML 4.0 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/REC-html40/loose.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>Message Body<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token operator">=</span><span class="token operator">></span> <span class="token comment">#&lt;Mail::Message:70056859616080, Multipart: false, Headers: &lt;Date: Mon, 04 May 2020 16:13:30 +0800>, &lt;From: gitlab &lt;276267003@qq.com>>, &lt;Reply-To: gitlab &lt;276267003@qq.com>>, &lt;To: 276267003@qq.com>, &lt;Message-ID: &lt;5eafceaa250a_1d063fb777add9a08601a@wing.mail>>, &lt;Subject: Message Subject>, &lt;Mime-Version: 1.0>, &lt;Content-Type: text/html; charset=UTF-8>, &lt;Content-Transfer-Encoding: 7bit>, &lt;Auto-Submitted: auto-generated>, &lt;X-Auto-Response-Suppress: All>></span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:005:<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去qq邮箱web界面查看是否收到邮件</p><p><img src="/image-20200504161843613.png" alt="image-20200504161843613"></p><h3 id="3、Gitlab-的使用"><a href="#3、Gitlab-的使用" class="headerlink" title="3、Gitlab 的使用"></a>3、Gitlab 的使用</h3><p><strong>在浏览器中输入 <a href="http://192.168.1.178/">http://192.168.1.178/</a> ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)</strong></p><h4 id="1、Gitlab-命令行修改密码"><a href="#1、Gitlab-命令行修改密码" class="headerlink" title="1、Gitlab 命令行修改密码"></a>1、Gitlab 命令行修改密码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rails console production</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:001:<span class="token operator"><span class="token file-descriptor important">0</span>></span>user <span class="token operator">=</span> User.where<span class="token punctuation">(</span>id: <span class="token number">1</span><span class="token punctuation">)</span>.first      <span class="token comment"># id为1的是超级管理员</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:002:<span class="token operator"><span class="token file-descriptor important">0</span>></span>user.password <span class="token operator">=</span> <span class="token string">'yourpassword'</span>      <span class="token comment"># 密码必须至少8个字符</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:003:<span class="token operator"><span class="token file-descriptor important">0</span>></span>user.save<span class="token operator">!</span>                          <span class="token comment"># 如没有问题 返回true</span><span class="token builtin class-name">exit</span> <span class="token comment"># 退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、Gitlab服务管理"><a href="#2、Gitlab服务管理" class="headerlink" title="2、Gitlab服务管理"></a>2、Gitlab服务管理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl start                        # 启动所有 gitlab 组件；</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl stop                         # 停止所有 gitlab 组件；</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl restart                      # 重启所有 gitlab 组件；</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl status                       # 查看服务状态；</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl reconfigure                  # 初始化服务；</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl tail                         # 查看日志；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、登陆-Gitlab"><a href="#3、登陆-Gitlab" class="headerlink" title="3、登陆 Gitlab"></a>3、登陆 Gitlab</h4><p><img src="/1.png" alt="1"></p><p><strong>如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx[‘listen_port’] &#x3D; 8000 ，然后再次 gitlab-ctl reconfigure即可</strong></p><p><strong>登录 gitlab 如下所示(首次登陆设置 root 密码)：</strong><br><img src="/2.1.png" alt="1"></p><h4 id="4、创建项目组-group"><a href="#4、创建项目组-group" class="headerlink" title="4、创建项目组 group"></a>4、创建项目组 group</h4><p>组名为plat-sp ,<br><img src="/2.2.png" alt="1"></p><p><img src="/3.png" alt="1"></p><h4 id="5、去掉用户的自动注册功能（安全）"><a href="#5、去掉用户的自动注册功能（安全）" class="headerlink" title="5、去掉用户的自动注册功能（安全）"></a>5、去掉用户的自动注册功能（安全）</h4><p>admin are -&gt; settings -&gt; Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录<br><img src="/4.png" alt="1"></p><h2 id="九、Gitlab-开发代码提交处理流程"><a href="#九、Gitlab-开发代码提交处理流程" class="headerlink" title="九、Gitlab 开发代码提交处理流程"></a>九、Gitlab 开发代码提交处理流程</h2><h3 id="1、公司代码提交合并流程"><a href="#1、公司代码提交合并流程" class="headerlink" title="1、公司代码提交合并流程"></a>1、公司代码提交合并流程</h3><ul><li><p>PM（项目主管&#x2F;项目经理）在gitlab创建任务，分配给开发人员</p></li><li><p>开发人员领取任务后，在本地使用git clone拉取代码库</p></li><li><p>开发人员创建开发分支（git checkout -b dev），并进行开发</p></li><li><p>开发人员完成之后，提交到本地仓库（git commit ）</p></li><li><p>开发人员在gitlab界面上申请分支合并请求（Merge request）</p></li><li><p>PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</p></li><li><p>开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue</p></li></ul><h3 id="2、创建项目管理用户-Tompson"><a href="#2、创建项目管理用户-Tompson" class="headerlink" title="2、创建项目管理用户 Tompson"></a>2、创建项目管理用户 Tompson</h3><p><img src="/5.png" alt="1"><br>同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。</p><h3 id="3、将-Tompson-用户添加到组中，指定T为本组的-owner"><a href="#3、将-Tompson-用户添加到组中，指定T为本组的-owner" class="headerlink" title="3、将 Tompson 用户添加到组中，指定T为本组的 owner"></a>3、将 Tompson 用户添加到组中，指定T为本组的 owner</h3><p><img src="/6.png" alt="1"></p><h3 id="4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer"><a href="#4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer" class="headerlink" title="4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer"></a>4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer</h3><p><img src="/7.png" alt="1"></p><h3 id="5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project"><a href="#5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project" class="headerlink" title="5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project"></a>5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project</h3><p><img src="/10.png" alt="1"></p><h3 id="6、指定项目的存储路径和项目名称"><a href="#6、指定项目的存储路径和项目名称" class="headerlink" title="6、指定项目的存储路径和项目名称"></a>6、指定项目的存储路径和项目名称</h3><p><img src="/11.png" alt="1"></p><p>把客户端的公钥添加到这里之后才会出现下图的内容</p><p><img src="/12.png" alt="1"></p><h3 id="7、为项目创建-Dev分支"><a href="#7、为项目创建-Dev分支" class="headerlink" title="7、为项目创建 Dev分支"></a>7、为项目创建 Dev分支</h3><p>注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作</p><p><img src="/13.png" alt="1"></p><p><img src="/14.png" alt="1"></p><h3 id="8、在-client-上添加-Tompson-的用户"><a href="#8、在-client-上添加-Tompson-的用户" class="headerlink" title="8、在 client 上添加 Tompson 的用户"></a>8、在 client 上添加 Tompson 的用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># useradd Tompson</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># useradd Hellen</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># useradd Eric</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># useradd test</span><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># su - Tompson</span><span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ ssh-keygenGenerating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/Tompson/.ssh/id_rsa<span class="token punctuation">)</span>: Created directory <span class="token string">'/home/Tompson/.ssh'</span><span class="token builtin class-name">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /home/Tompson/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /home/Tompson/.ssh/id_rsa.pub.The key fingerprint is:SHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cnThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+<span class="token operator">|</span><span class="token assign-left variable">XX</span><span class="token operator">==</span>o<span class="token operator">=</span>.          <span class="token operator">|</span><span class="token operator">|</span>*BOo+.o          <span class="token operator">|</span><span class="token operator">|</span>E*<span class="token operator">=</span>.  <span class="token builtin class-name">.</span>          <span class="token operator">|</span><span class="token operator">|</span>*+.<span class="token operator">=</span> + <span class="token builtin class-name">.</span>         <span class="token operator">|</span><span class="token operator">|</span><span class="token operator">=</span>oo <span class="token operator">=</span> <span class="token builtin class-name">.</span> S        <span class="token operator">|</span><span class="token operator">|</span>.oo              <span class="token operator">|</span><span class="token operator">|</span>.o               <span class="token operator">|</span><span class="token operator">|</span>o<span class="token punctuation">..</span>.             <span class="token operator">|</span><span class="token operator">|</span>.<span class="token operator">+=</span>.             <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、将-Tompson-的公钥复制到-gitlab-中"><a href="#9、将-Tompson-的公钥复制到-gitlab-中" class="headerlink" title="9、将 Tompson 的公钥复制到 gitlab 中"></a>9、将 Tompson 的公钥复制到 gitlab 中</h3><p>使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key<br><img src="/8.png" alt="1"></p><p><img src="/9.png" alt="1"></p><h3 id="10、为-Tompson-用户配置-git"><a href="#10、为-Tompson-用户配置-git" class="headerlink" title="10、为 Tompson 用户配置 git"></a>10、为 Tompson 用户配置 git</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"222@qq.com"</span><span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"tom"</span><span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> clone git@192.168.60.119:plat-sp/chathall.gitCloning into <span class="token string">'chathall'</span><span class="token punctuation">..</span>.The authenticity of <span class="token function">host</span> <span class="token string">'192.168.60.119 (192.168.60.119)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.ECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span><span class="token number">192.168</span>.60.119' <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts.remote: Counting objects: <span class="token number">3</span>, done.remote: Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.<span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token punctuation">[</span>Tompson@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> chathall/<span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">ls</span>Readme.txt<span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、创建新文件，添加内容，并提交到-master-分支"><a href="#11、创建新文件，添加内容，并提交到-master-分支" class="headerlink" title="11、创建新文件，添加内容，并提交到 master 分支"></a>11、创建新文件，添加内容，并提交到 master 分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">vim</span> test.sh<span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.sh <span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"gitlab test"</span><span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'201805101649'</span><span class="token punctuation">[</span>master 80edf6b<span class="token punctuation">]</span> <span class="token number">201805101649</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> test.sh<span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master Counting objects: <span class="token number">4</span>, done.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">305</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To git@192.168.60.119:plat-sp/chathall.git   <span class="token number">4611654</span><span class="token punctuation">..</span>80edf6b  master -<span class="token operator">></span> masterBranch master <span class="token builtin class-name">set</span> up to track remote branch master from origin.<span class="token punctuation">[</span>Tompson@qfedu.com chathall<span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12、使用-Eric-用户登录，并-clone-项目"><a href="#12、使用-Eric-用户登录，并-clone-项目" class="headerlink" title="12、使用 Eric 用户登录，并 clone 项目"></a>12、使用 Eric 用户登录，并 clone 项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>git@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># su - Eric</span><span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ ssh-keygen <span class="token parameter variable">-C</span> Eric@domain.cnGenerating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/Eric/.ssh/id_rsa<span class="token punctuation">)</span>: Created directory <span class="token string">'/home/Eric/.ssh'</span><span class="token builtin class-name">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /home/Eric/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /home/Eric/.ssh/id_rsa.pub.The key fingerprint is:SHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cnThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>*O<span class="token operator">=</span><span class="token punctuation">..</span>B*o**+o+oo. <span class="token operator">|</span><span class="token operator">|</span>*.+<span class="token punctuation">..</span> *o.*oooo <span class="token builtin class-name">.</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token builtin class-name">.</span> + + <span class="token punctuation">..</span>oo E <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span><span class="token operator">|</span><span class="token operator">|</span>  o   o <span class="token operator">=</span><span class="token punctuation">..</span>    <span class="token builtin class-name">.</span> <span class="token operator">|</span><span class="token operator">|</span>   <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>  S+ <span class="token builtin class-name">.</span>     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>   <span class="token builtin class-name">.</span>      <span class="token operator">|</span><span class="token operator">|</span>   <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>           <span class="token operator">|</span><span class="token operator">|</span>    o            <span class="token operator">|</span><span class="token operator">|</span>   <span class="token builtin class-name">.</span>             <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn<span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目"><a href="#13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目" class="headerlink" title="13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目"></a>13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"Eric@domain.cn"</span><span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Eric"</span><span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ <span class="token function">git</span> clone git@192.168.60.119:plat-sp/chathall.gitCloning into <span class="token string">'chathall'</span><span class="token punctuation">..</span>.The authenticity of <span class="token function">host</span> <span class="token string">'192.168.60.119 (192.168.60.119)'</span> can't be established.ECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.ECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>? <span class="token function">yes</span>remote: Counting objects: <span class="token number">6</span>, done.remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.remote: Total <span class="token number">6</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">6</span>/6<span class="token punctuation">)</span>, done.<span class="token punctuation">[</span>Eric@qfedu.com ~<span class="token punctuation">]</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限"><a href="#14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限" class="headerlink" title="14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)"></a>14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> checkout dev Branch dev <span class="token builtin class-name">set</span> up to track remote branch dev from origin.Switched to a new branch <span class="token string">'dev'</span><span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">ls</span>Readme.txt  test.sh<span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">vim</span> eric.sh <span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">cat</span> eric.sh<span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"brahch test"</span><span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'201805101658'</span><span class="token punctuation">[</span>dev <span class="token number">6687039</span><span class="token punctuation">]</span> <span class="token number">201805101658</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin dev Counting objects: <span class="token number">5</span>, done.Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">306</span> bytes <span class="token operator">|</span> <span class="token number">0</span> bytes/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: To create a merge request <span class="token keyword">for</span> dev, visit:remote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D<span class="token operator">=</span>devremote: To git@192.168.60.119:plat-sp/chathall.git   80edf6b<span class="token punctuation">..</span><span class="token number">6687039</span>  dev -<span class="token operator">></span> devBranch dev <span class="token builtin class-name">set</span> up to track remote branch dev from origin.<span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$<span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> checkout master Switched to branch <span class="token string">'master'</span><span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$ <span class="token function">git</span> branch   dev* master<span class="token punctuation">[</span>Eric@qfedu.com chathall<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求"><a href="#15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求" class="headerlink" title="15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求"></a>15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求</h3><p><img src="/15.png" alt="1"></p><p><strong>提交合并请求：</strong><br><img src="/16.png" alt="1"></p><h3 id="16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支"><a href="#16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支" class="headerlink" title="16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支"></a>16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支</h3><p><img src="/17.png" alt="1"></p><p><img src="/18.png" alt="1"></p><h2 id="十、Gitlab-备份与恢复"><a href="#十、Gitlab-备份与恢复" class="headerlink" title="十、Gitlab 备份与恢复"></a>十、Gitlab 备份与恢复</h2><h3 id="1、查看系统版本和软件版本"><a href="#1、查看系统版本和软件版本" class="headerlink" title="1、查看系统版本和软件版本"></a>1、查看系统版本和软件版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com gitlab<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release </span>CentOS Linux release <span class="token number">7.3</span>.1611 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span> <span class="token punctuation">[</span>root@qfedu.com gitlab<span class="token punctuation">]</span><span class="token comment"># cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><span class="token number">8.15</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、数据备份"><a href="#2、数据备份" class="headerlink" title="2、数据备份"></a>2、数据备份</h3><h4 id="1、查看备份相关的配置项"><a href="#1、查看备份相关的配置项" class="headerlink" title="1、查看备份相关的配置项"></a>1、查看备份相关的配置项</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'manage_backup_path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'backup_path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/data/gitlab/backups"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p><h4 id="2、执行备份命令进行备份"><a href="#2、执行备份命令进行备份" class="headerlink" title="2、执行备份命令进行备份"></a>2、执行备份命令进行备份</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># /opt/gitlab/bin/gitlab-rake gitlab:backup:create </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、添加到-crontab-中定时执行"><a href="#3、添加到-crontab-中定时执行" class="headerlink" title="3、添加到 crontab 中定时执行"></a>3、添加到 crontab 中定时执行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># crontab -e</span><span class="token number">0</span> <span class="token number">2</span> * * * <span class="token function">bash</span> /opt/gitlab/bin/gitlab-rake gitlab:backup:create<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以到&#x2F;data&#x2F;gitlab&#x2F;backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p><h4 id="4、设置备份保留时长"><a href="#4、设置备份保留时长" class="headerlink" title="4、设置备份保留时长"></a>4、设置备份保留时长</h4><p>防止每天执行备份，有目录被爆满的风险，打开&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb配置文件，找到如下配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'backup_keep_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">604800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置备份保留7天（7<em>3600</em>24&#x3D;604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。</p><p>备份完成，会在备份目录中生成一个当天日期的tar包。</p><h3 id="3、数据恢复"><a href="#3、数据恢复" class="headerlink" title="3、数据恢复"></a>3、数据恢复</h3><h4 id="1、安装部署-gitlab-server"><a href="#1、安装部署-gitlab-server" class="headerlink" title="1、安装部署 gitlab server"></a>1、安装部署 gitlab server</h4><p> 具体步骤参见上面：gitlab server 搭建过程</p><h4 id="2、恢复-gitlab"><a href="#2、恢复-gitlab" class="headerlink" title="2、恢复 gitlab"></a>2、恢复 gitlab</h4><h5 id="1、查看备份相关的配置项-1"><a href="#1、查看备份相关的配置项-1" class="headerlink" title="1、查看备份相关的配置项"></a>1、查看备份相关的配置项</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/gitlab/gitlab.rb</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'backup_path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/data/gitlab/backups"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改该配置，定义了默认备份出文件的路径，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p><h5 id="2、恢复前需要先停掉数据连接服务"><a href="#2、恢复前需要先停掉数据连接服务" class="headerlink" title="2、恢复前需要先停掉数据连接服务"></a>2、恢复前需要先停掉数据连接服务</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl stop unicorn</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl stop sidekiq</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。</li></ul><h5 id="3、同步备份文件到新服务器"><a href="#3、同步备份文件到新服务器" class="headerlink" title="3、同步备份文件到新服务器"></a>3、同步备份文件到新服务器</h5><p>将老服务器&#x2F;data&#x2F;gitlab&#x2F;backups目录下的备份文件拷贝到新服务器上的&#x2F;data&#x2F;gitlab&#x2F;backups</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com gitlab<span class="token punctuation">]</span><span class="token comment"># rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com backups<span class="token punctuation">]</span><span class="token comment"># pwd</span>/data/gitlab/backups<span class="token punctuation">[</span>root@qfedu.com backups<span class="token punctuation">]</span><span class="token comment"># chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar </span><span class="token punctuation">[</span>root@qfedu.com backups<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">17328900</span><span class="token parameter variable">-rwxrwxrwx</span> <span class="token number">1</span> <span class="token function">git</span> <span class="token function">git</span> <span class="token number">17744793600</span> Jul  <span class="token number">5</span> <span class="token number">14</span>:47 1530773117_2018_07_05_gitlab_backup.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、执行命令进行恢复"><a href="#4、执行命令进行恢复" class="headerlink" title="4、执行命令进行恢复"></a>4、执行命令进行恢复</h5><p>后面再输入两次 yes 就完成恢复了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar</span>注意：backups 目录下保留一个备份文件可直接执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5、恢复完成启动服务"><a href="#5、恢复完成启动服务" class="headerlink" title="5、恢复完成启动服务"></a>5、恢复完成启动服务</h5><p>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl start unicorn</span><span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl start sidekiq</span>或<span class="token punctuation">[</span>root@qfedu.com ~<span class="token punctuation">]</span><span class="token comment"># gitlab-ctl restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p><h2 id="十一、利用Gitlab管理k8s集群"><a href="#十一、利用Gitlab管理k8s集群" class="headerlink" title="十一、利用Gitlab管理k8s集群"></a>十一、利用Gitlab管理k8s集群</h2><h3 id="1、权限设置"><a href="#1、权限设置" class="headerlink" title="1、权限设置"></a>1、权限设置</h3><p><img src="/image-20200821174547237.png" alt="image-20200821174547237"></p><h3 id="2、获取k8s集群API地址"><a href="#2、获取k8s集群API地址" class="headerlink" title="2、获取k8s集群API地址"></a>2、获取k8s集群API地址</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ &#123;print $NF&#125;'</span>https<span class="token punctuation">:</span>//192.168.19.200<span class="token punctuation">:</span><span class="token number">6443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、获取k8s集群默认CA证书"><a href="#3、获取k8s集群默认CA证书" class="headerlink" title="3、获取k8s集群默认CA证书"></a>3、获取k8s集群默认CA证书</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl get secretsNAME                  TYPE                                  DATA   AGEdefault-token-cvfqx   kubernetes.io&#x2F;service-account-token   3      3d21h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>default-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书</p><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath&#x3D;&quot;&#123;[&#39;data&#39;][&#39;ca\.crt&#39;]&#125;&quot; | base64 --decode-----BEGIN CERTIFICATE-----MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJlcm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UEAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIMiOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz&#x2F;&#x2F;Z6vrgqo2COn2NjKrVM11bmzVhHPCruc3snfTLIS+&#x2F;Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KWlaqbuLKTbtTm+oCtAKYXUlzqrFGR&#x2F;&#x2F;GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJQAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb&#x2F;W3hOGWV0gdmvaq7CE&#x2F;ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N&#x2F;WPyq76RlH7somiIb8S1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH&#x2F;BAQDAgKkMA8GA1UdEwEB&#x2F;wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3OOB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsOZXHDfK7AzDGpLPUxlygkK7c7XCES&#x2F;GEJe5agBxQyCo2pAvcj&#x2F;nb+JIBeSh8JcG05pzPhL11it9hDqmS5k92+63xGs&#x2F;SDEzXEbBVMnyZWiv+AOHlO1&#x2F;IFofUD3VHcSRMYwH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8xDvVgtOWq5P9fVfnE4Am0LI&#x2F;DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4&#x3D;-----END CERTIFICATE-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、设置rbac"><a href="#4、设置rbac" class="headerlink" title="4、设置rbac"></a>4、设置rbac</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim gitlab-admin-service-account.yamlapiVersion: v1kind: ServiceAccountmetadata:  name: gitlab-admin  namespace: kube-system---apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1kind: ClusterRoleBindingmetadata:  name: gitlab-adminroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: gitlab-admin  namespace: kube-system[root@master ~]# kubectl apply -f gitlab-admin-service-account.yamlserviceaccount&#x2F;gitlab-admin createdclusterrolebinding.rbac.authorization.k8s.io&#x2F;gitlab-admin created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、获取gitlab-admin的token"><a href="#5、获取gitlab-admin的token" class="headerlink" title="5、获取gitlab-admin的token"></a>5、获取gitlab-admin的token</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '&#123;print $1&#125;')</span><span class="token key atrule">Name</span><span class="token punctuation">:</span>         gitlab<span class="token punctuation">-</span>admin<span class="token punctuation">-</span>token<span class="token punctuation">-</span>pmb2h<span class="token key atrule">Namespace</span><span class="token punctuation">:</span>    kube<span class="token punctuation">-</span>system<span class="token key atrule">Labels</span><span class="token punctuation">:</span>       &lt;none<span class="token punctuation">></span><span class="token key atrule">Annotations</span><span class="token punctuation">:</span>  <span class="token key atrule">kubernetes.io/service-account.name</span><span class="token punctuation">:</span> gitlab<span class="token punctuation">-</span>admin              <span class="token key atrule">kubernetes.io/service-account.uid</span><span class="token punctuation">:</span> bc9e1f94<span class="token punctuation">-</span>088d<span class="token punctuation">-</span>41f4<span class="token punctuation">-</span>8e18<span class="token punctuation">-</span>f31f1e9a9369<span class="token key atrule">Type</span><span class="token punctuation">:</span>  kubernetes.io/service<span class="token punctuation">-</span>account<span class="token punctuation">-</span>tokenData====<span class="token key atrule">ca.crt</span><span class="token punctuation">:</span>     1025 bytes<span class="token key atrule">namespace</span><span class="token punctuation">:</span>  11 bytes<span class="token key atrule">token</span><span class="token punctuation">:</span>      eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP<span class="token punctuation">-</span>rYt81FarjQhIQPn554SrtmiTp<span class="token punctuation">-</span>iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs<span class="token punctuation">-</span>Pmg6D0NbdN0Ipb<span class="token punctuation">-</span><span class="token punctuation">-</span>s<span class="token punctuation">-</span>Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8<span class="token punctuation">-</span>4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy<span class="token punctuation">-</span>ZbAhHgO89OqVIjY<span class="token punctuation">-</span>3H<span class="token punctuation">-</span>rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、添加k8s集群</p><p><img src="/image-20200821180353378.png" alt="image-20200821180353378"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker安装mysql和redis</title>
      <link href="/posts/47352.html"/>
      <url>/posts/47352.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><ol><li>到docker hub中找自己需要的mysql 镜像版本 或者执行docker search mysql</li></ol><p><img src="/1658759001622.png" alt="1658759001622"></p><ol start="2"><li>docker pull mysql  — 不指定版本默认下载最新的mysql</li></ol><p>   <img src="/223100.png" alt="屏幕截图 2022-07-25 223100"></p><ol start="3"><li><p>docker pull mysql:5.7 下载5.7版本的镜像</p></li><li><p>运行mysql 镜像</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">sudo docker run \ -p 3306:3306 --name mysql \ -v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \  -v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \  -v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql \  -e MYSQL_ROOT_PASSWORD&#x3D;root \  -d mysql:5.7  配置端口映射：-p 3306:3306 --name mysql将容器的3306端口映射到主机的3306端口配置mysql数据卷挂载1.-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql(日志文件挂载)将容器中的日志文件夹挂载到主机对应的&#x2F;var&#x2F;log&#x2F;mysql文件夹中2.-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql(数据文件挂载)将容器中的数据文件夹挂载到主机对应的&#x2F;var&#x2F;lib&#x2F;mysql文件夹中3.-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql(配置文件挂载)将容器的配置文件夹挂载到主机对应的&#x2F;etc&#x2F;mysql文件夹中注(这里所提的主机指的是当前的linux主机)配置用户-e MYSQL_ROOT_PASSWORD&#x3D;root设置初始化root用户的密码指定镜像资源-d mysql:5.7-d：以后台方式运行实例mysql:5.7：指定用这个镜像来创建运行实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>查看mysql 容器</p><pre class="line-numbers language-none"><code class="language-none">docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><ol><li><p>docker pull redis</p></li><li><p>挂载配置文件</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p  &#x2F;home&#x2F;redis&#x2F;myredis&#x2F;datavim &#x2F;home&#x2F;redis&#x2F;myredis&#x2F;redis.conf   # 写入redis 配置文件内容# 执行docker命令docker run --restart&#x3D;always --log-opt max-size&#x3D;100m --log-opt max-file&#x3D;2 -p 6379:6379 --name myredis -v &#x2F;home&#x2F;redis&#x2F;myredis&#x2F;myredis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf -v &#x2F;home&#x2F;redis&#x2F;myredis&#x2F;data:&#x2F;data -d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf  --appendonly yes  --requirepass 000415<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明</p><pre class="line-numbers language-none"><code class="language-none">–restart&#x3D;always 总是开机启动–log是日志方面的-p 6379:6379 将6379端口挂载出去–name 给这个容器取一个名字-v 数据卷挂载&#x2F;home&#x2F;redis&#x2F;myredis&#x2F;myredis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf 这里是将 liunx 路径下的myredis.conf 和redis下的redis.conf 挂载在一起。&#x2F;home&#x2F;redis&#x2F;myredis&#x2F;data:&#x2F;data 这个同上-d redis 表示后台启动redisredis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录 &#x2F;etc&#x2F;redis&#x2F;redis.conf 也就是liunx下的&#x2F;home&#x2F;redis&#x2F;myredis&#x2F;myredis.conf–appendonly yes 开启redis 持久化–requirepass 000415 设置密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> reids </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>镜像简介与镜像的构建</title>
      <link href="/posts/45106.html"/>
      <url>/posts/45106.html</url>
      
        <content type="html"><![CDATA[<h2 id="镜像介绍与操作"><a href="#镜像介绍与操作" class="headerlink" title="镜像介绍与操作"></a>镜像介绍与操作</h2><h3 id="何为镜像"><a href="#何为镜像" class="headerlink" title="何为镜像"></a>何为镜像</h3><p>镜像是一个轻量级、可独立运行的软件包，用来打包软件运行的环境和依赖</p><h4 id="unionfs"><a href="#unionfs" class="headerlink" title="unionfs"></a>unionfs</h4><p>镜像是由unionfs联合文件系统构成，由一层层的文件系统堆积组成，他支持对文件系统的修改作为一次提交来叠加</p><p>特性： 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 </p><h4 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h4><p> docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统叫做UnionFS。 </p><p> bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。 </p><p> rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p><h4 id="unionfs分层结构的特点"><a href="#unionfs分层结构的特点" class="headerlink" title="unionfs分层结构的特点"></a>unionfs分层结构的特点</h4><p>其实我们也会考虑docker为什么会才用这种分层的结果，它有什么好处呢？最大的一个好处就是共享资源</p><p>  比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h4 id="镜像的特点"><a href="#镜像的特点" class="headerlink" title="镜像的特点"></a>镜像的特点</h4><p> docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部，这一层通常被称为容器层,容器层之下的都叫镜像层。 </p><h3 id="镜像的相关操作"><a href="#镜像的相关操作" class="headerlink" title="镜像的相关操作"></a>镜像的相关操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token parameter variable">-m</span>  提交副本实质成为一个新的镜像   <span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">"zhangtq"</span> <span class="token parameter variable">-m</span> <span class="token string">"no doc"</span> bba8e1b9632c aiguigu/mytomcat:1.2<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> 对外暴露的端口8888:8080 tomcat<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8080 tomcat<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-P</span> tomcat  随机分配暴露端口<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> bba8e1b9632c /bin/bash<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">6666</span>:8080 tomcat 后台启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker容器数据持久化和数据共享"><a href="#docker容器数据持久化和数据共享" class="headerlink" title="docker容器数据持久化和数据共享"></a>docker容器数据持久化和数据共享</h4><p>  数据卷的特点： </p><ol><li>数据卷可以在容器之间共享或重用数据   </li><li>卷中的更改可以直接生效   </li><li>数据卷中的更改不会包含在镜像的更新中   </li><li>数据卷的生命周期一致持续到没有容器使用他为止</li></ol><h5 id="添加数据卷："><a href="#添加数据卷：" class="headerlink" title="添加数据卷："></a>添加数据卷：</h5><p>容器内添加：</p><ol><li>直接命令添加</li></ol><pre class="line-numbers language-none"><code class="language-none">docker run -it -v &#x2F;mydatavolume:&#x2F;mydatavolumecontainer centos  # 可读可写docker run -it -v &#x2F;mydatavolume:&#x2F;mydatavolumecontainer:ro centos  #只读挂载 主机可以写，容器内只读docker inspect centos  #查看数据是否挂载成功docker start 56dd279c7699 启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>dockerfile 添加</li></ol>   <pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># volume test</span><span class="token instruction"><span class="token keyword">FROM</span> centos</span><span class="token instruction"><span class="token keyword">VOLUME</span> [<span class="token string">"/dataVolumeContainer1"</span>, <span class="token string">"/dataVolumeContainere2"</span>]</span><span class="token instruction"><span class="token keyword">CMD</span> echo <span class="token string">"finished, -------success1"</span></span><span class="token instruction"><span class="token keyword">CMD</span> /bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-none"><code class="language-none">docker build -f &#x2F;mydocker&#x2F;DockerFile -t test&#x2F;centos .  创建镜像<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="构建docker-镜像"><a href="#构建docker-镜像" class="headerlink" title="构建docker 镜像"></a>构建docker 镜像</h3><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p>FROM         — 基础镜像，当前镜像是由哪个基础镜像构建的</p><p>MAINTAINER        — 镜像维护者的名字以及邮件地址</p><p>RUN        — 容器构建时需要运行的指令</p><p>EXPOSE        — 当前容器对外暴露的端口</p><p>WORKDR       —  容器创建后，终端登录后默认的工作目录</p><p>ENV       —  用来构建镜像的过程中设置环境变量</p><p>ADD       —  将宿主机的目录下的文件拷贝至镜像且add命令会自动处理url 和解压tar压缩包</p><p>COPY        —- 拷贝文件和目录到镜像。功能比add小</p><p>VOLUME      — 容器数据卷，用于保存数据和数据持久化</p><p>CMD         —  指定一个容器启动时要运行的命令 Dockerfile中可以有多个cmd命令， 但是只有最后一个生效，cmd会被docker run之后的参数替换</p><p>ENTRYPOINT   — 和cmd 类似，但是ENTRYPOINT是命令的追加</p><p>ONBUILD        — 当构建一个被继承的Dockerfile，父镜像在被继承后，父镜像的onbuild 被触发</p><h4 id="制作mycentos镜像"><a href="#制作mycentos镜像" class="headerlink" title="制作mycentos镜像"></a>制作mycentos镜像</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ol><li>设定登录后的默认登录路径</li><li>支持vim编辑器</li><li>查看网络配置ifconfig</li></ol><h5 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h5><ol><li>新增Dockerfile文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>添加如下内容</li></ol><pre class="line-numbers language-none"><code class="language-none">FROM centosMAINTAINER zhangtq&lt;zhangtq@example.com&gt;ENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo &quot;success------------ok!&quot;CMD &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>生成镜像</p><pre class="line-numbers language-none"><code class="language-none"># 在当前目录由DockerFile 文件生成名为mycentos,tag为1.3的镜像docker build -f Dockerfile -t mycentos:1.3 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看是否成功</p><pre class="line-numbers language-none"><code class="language-none">docker image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行验证</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">docker run -it mycentos:1.3pwdls -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>列出镜像的变更历史</li></ol>   <pre class="line-numbers language-none"><code class="language-none">docker history mycentos:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="自定义镜像（mycentos01）"><a href="#自定义镜像（mycentos01）" class="headerlink" title="自定义镜像（mycentos01）"></a>自定义镜像（mycentos01）</h5><ol><li>vi mycentos01</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM centosrun yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span>CMD <span class="token punctuation">[</span><span class="token string">"curl"</span>, <span class="token string">"-s"</span>, <span class="token string">"https://ip.cn"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>构建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-f</span> ./mycentos01 <span class="token parameter variable">-t</span> myip <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行</p><p>docker run -it myip  运行成功</p><p>但是如果我们添加一个参数运行</p><p>docker run -it myip -i 此时运行其实不会执行CM中的命令,我们期待cmd执行的命令为 curl -s <a href="http://ip.cn/">http://ip.cn</a> -i  但是其实 只会执行-i ，所以会报错</p><p>这时dockerfile中就需要使用entrypoint 而不能使用CMD</p></li><li><p>重新编写dockerfile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM centosRUN yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span>RNTRYPOINT <span class="token punctuation">[</span><span class="token string">"curl"</span>, <span class="token string">"-s"</span>, <span class="token string">"https://ip.cn"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重新构建和运行</p></li><li><pre><code class="shell">docker build -f ./mycentos01 -t myip .dcoker run myip -i 执行成功，并且会显示整个请求结果信息</code></pre></li><li><p>CMD 关键字的注意事项</p><p>cmd 关键字会覆盖dockerfile中run指令比如docker run -it 7777:8888 tomcat ls -l 其中ls -l 会导致tomcat没有启动</p></li><li><p>onbuild关键字</p></li><li><p>add 和copy关键字</p><p> copy关键字将文件放入到镜像指定目录 </p><p> add关键字将文件放入到镜像指定目录并且解压</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令</title>
      <link href="/posts/12799.html"/>
      <url>/posts/12799.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h2><h3 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h3><ol><li>docker run hello-word</li><li>docker search tomcatdocker images  —查看docker镜像</li><li>docker pull tomcat — docker pull tomcat:latestdocker pull 镜像:tag</li><li>docker rmi 镜像:tag —删除镜像</li><li>docker rmi -f hello-world nginx —删除多个镜像</li><li>docker rmi -f $(docker images -qa) 删除docker中所有的镜像</li></ol><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><ol><li><p>docker pull centos  — 先获取一个docker镜像</p></li><li><p>docker run centos  — 运行一个centos镜像，生成centos 实例</p></li><li><p>docker build   — 打包封装一个容器为镜像</p></li><li><p>docker run -it –env-file .&#x2F;run&#x2F;hrms.env -v &#x2F;opt&#x2F;hrms&#x2F;hrms&#x2F;hrms:&#x2F;opt&#x2F;hrms&#x2F;hrms -p 10.142.8.12:8083:8080 55ad68601db</p><ol><li>-i : 以交互式模式运行容器， 通常与t同时使用</li><li>-t:为容器重新分配一个伪终端，通常与i同时使用</li><li>-v:  表示将宿主机上的文件挂载到镜像中，冒号前面表示宿主机文件路径，后面表示镜像文件路径，都要用绝对路径</li></ol></li><li><p>docker ps  — 查看docker中运行的容器</p></li><li><p>docker ps -l  — 上次运行的</p></li><li><p>docker ps -n 5    — 上5次运行的容器</p></li><li><p>docker ps -qa   — 所有运行的容器</p></li><li><p>exit 退出 (结束退出)</p></li><li><p>ctrl + q+p 守护退出</p></li><li><p>docker stop&#x2F; start ed3e7ce4801b — 停止或者启动容器</p></li><li><p>docker kill ed3e7ce4801b  — 强制停止</p></li><li><p>docker rm id1 id2 —删除多个容器</p></li><li><p>docker rm -f $(docker ps -aq) 删除所有容器</p></li></ol><h3 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h3><ol><li>docker logs -f -t –tail </li><li>docker logs 3441313e8552</li><li>docker top 3441313e8552 查看容器的进程</li><li>docker inspect 3441313e8552 查看容器内的结构细节</li><li>docker attach 12004edc9cdd 进入容器，然后执行命令</li><li>docker exec -t 12004edc9cdd ls -l &#x2F;tmp 直接的得到某个容器的执行结果</li><li>docker cp 宿主机中要拷贝的文件名及其路径 容器名：要拷贝到容器里面对应的路径 </li><li>docker cp 容器名:要拷贝的文件在容器里面的路径 要拷贝到宿主机的相应路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>run一个hello-world镜像</title>
      <link href="/posts/4585.html"/>
      <url>/posts/4585.html</url>
      
        <content type="html"><![CDATA[<h2 id="运行一个hello-world容器"><a href="#运行一个hello-world容器" class="headerlink" title="运行一个hello-world容器"></a>运行一个hello-world容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="日志如下"><a href="#日志如下" class="headerlink" title="日志如下"></a>日志如下</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost log]# docker run hello-worldUnable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library&#x2F;hello-world0e03bdcc26d7: Pull complete Digest: sha256:8e3114318a995a1ee497790535e7b88365222a21771ae7e53687ad76563e8e76Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an centos container with: $ docker run -it centos bashShare images, automate workflows, and more with a free Docker ID: https:&#x2F;&#x2F;hub.docker.com&#x2F;For more examples and ideas, visit: https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程分析："><a href="#运行过程分析：" class="headerlink" title="运行过程分析："></a>运行过程分析：</h3><ol><li><p>执行run hello-world后，docker首先会从本地的镜像仓库中查找hello-world这个镜像如果找到了，就会用本地的镜像闯将容器，如果没有找到对应的镜像，就会前往已经配置好的远端仓库查找，找到后下载到本地仓库，创建容器并启动</p></li><li><p>从 <strong>Unable to find image ‘hello-world:latest’ locally</strong> 可以看到本地没有找到对应的镜像</p></li><li><p>从 <strong>latest: Pulling from library&#x2F;hello-world</strong> 可以看到，docker 到远端开去镜像</p></li><li><p>从<strong>Status: Downloaded newer image for hello-world:latest</strong> 可以看到镜像拉取成功，此时本地仓库已经添加了hello-world镜像</p></li><li><p>从<strong>hello docker</strong>可以看到镜像已经成功运行了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dokcer介绍精简版</title>
      <link href="/posts/61099.html"/>
      <url>/posts/61099.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-介绍"><a href="#docker-介绍" class="headerlink" title="docker 介绍"></a>docker 介绍</h2><p><a href="https://www.docker.org.cn/page/resources.html">Docker资源 - docker中文社区</a></p><h3 id="意义：让开发测试运维的环境保持一致"><a href="#意义：让开发测试运维的环境保持一致" class="headerlink" title="意义：让开发测试运维的环境保持一致"></a>意义：让开发测试运维的环境保持一致</h3><p>1.以前代码就是应用，使用docker后需要将原始环境一摸一样的复制过来（操作系统，代码，文档，依赖等）即交付镜像</p><p>2.在集群模式下，有丰富的应用</p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>虚拟机的区别是什么虚拟机是在一个系统上运行另一种操作系统，虚拟机不但模拟软件还模拟硬件， 对于底层系统来说，虚拟机就是一个文件， 资源占用多<br>docker 将软件运行的所有资源打包成一个容器，不会对硬件进行虚拟</p><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ol><li>镜像 image（模板）用来创造容器 —类              </li><li>容器 contain独立运行的一个或者一组应用，是镜像的实例，可以被启动停止删除， 每个容器都是互相隔离的              </li><li>仓库 存放镜像文件的场所 仓库和仓库注册服务器是有区别的。仓库注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签tag</li></ol><h3 id="主流集成方式"><a href="#主流集成方式" class="headerlink" title="主流集成方式"></a>主流集成方式</h3><p>devops 优势</p><ol><li><p>更快速的应用交付和部署</p></li><li><p>更便捷的升级和扩缩容</p></li><li><p>更简单的系统运维</p></li><li><p>更高效的计算资源利用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker配置阿里云镜像加速</title>
      <link href="/posts/20211.html"/>
      <url>/posts/20211.html</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要配置镜像加速"><a href="#为什么需要配置镜像加速" class="headerlink" title="为什么需要配置镜像加速"></a>为什么需要配置镜像加速</h3><p>从docker hub 下载镜像太慢，使用阿里云镜像加速器</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p>登录<a href="https://www.aliyun.com/">阿里云</a></p></li><li><p>个人中心—&gt;控制台—-&gt;搜索容器镜像服务—&gt;镜像加速</p></li><li><p>开始配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://xxxxx.mirror.aliyuncs.com"]&#125;EOF</span>  <span class="token function">sudo</span> systemctl daemon-reload  <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装</title>
      <link href="/posts/8175.html"/>
      <url>/posts/8175.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h2><h3 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h3>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token function">docker</span> docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装新版本"><a href="#安装新版本" class="headerlink" title="安装新版本"></a>安装新版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span class="token function">sudo</span> yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo<span class="token comment"># 如果上面的太慢，更换国内的源</span><span class="token comment"># yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span class="token function">docker</span> version   确定是否安装成功注意只能在centos6.5版本以上版本中使用docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解决centos8中podman问题"><a href="#解决centos8中podman问题" class="headerlink" title="解决centos8中podman问题"></a>解决centos8中podman问题</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum erase <span class="token function">podman</span> buildah<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker介绍</title>
      <link href="/posts/28889.html"/>
      <url>/posts/28889.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-介绍"><a href="#docker-介绍" class="headerlink" title="docker 介绍"></a>docker 介绍</h1><h2 id="docker为什么-会出现"><a href="#docker为什么-会出现" class="headerlink" title="docker为什么 会出现"></a>docker为什么 会出现</h2><ol><li><p>生产流程需要</p><blockquote><p>一款产品从开发到上线，一般都会有开发环境，测试环境，运行环境。如果有一个环境中某个软件或者依赖版本不同了，可能产品就会出现一些错误，甚至无法运行。比如开发人员在windows系统，但是最终要把项目部署到linux。如果存在不支持跨平台的软件，那项目肯定也无法部署成功。</p></blockquote></li></ol><blockquote><p>这就产生了开发和运维人员之间的矛盾。开发人员在开发环境将代码跑通，但是到了上线的时候就崩了。还要重新检查操作系统，软件，依赖等版本，这大大降低了效率，造成了生产效率低下的问题</p></blockquote><ol start="2"><li><p>繁琐的配置</p><blockquote><p>如果一个产品需要使用mysql集群，redis集群，Haddop集群，或者elasticsearch集群等等，不同的人都要用到这些，那每一个人都要对集群进行配置，如果有一个位置不同就有可能产生重大问题。况且配环境是一个极其繁琐，很需要耐心和细心的。回想一下自己刚学编程的时候，配置环境变量是不是都有可能耗费很长时间，这些集群就更不用说了。</p></blockquote></li><li><p>docker的出现</p><p>为了解决上述问题，我们自然的想到能否将开发的环境拷贝一份呢？docker给了我们答案</p><blockquote><p>开发人员把环境配置好，将需要运行的程序包运行成功，然后把程序包和环境一起打包给运维人员，让运维人员部署就可以了。这大大提高了项目上线的效率。</p></blockquote></li></ol><blockquote><p>如果需要配置集群，只需要一人配置好，然后打包发给大家就可以了。</p></blockquote><h2 id="docker-的理念"><a href="#docker-的理念" class="headerlink" title="docker 的理念"></a>docker 的理念</h2><blockquote><p> docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会影响。此时我们就不需要转么运送水果的船和专门运送化学品的船了。只要将这些货物打包在集装箱里封装好，那么我们就可以用同一艘大船把他们都运走。</p></blockquote><p>docker就是类似的理念。<strong>操作系统相当于大货轮，docker就是集装箱。</strong></p><p>在实际开发中，可能会有如下的问题：</p><ol><li><p>应用程序可能会有不同的应用环境，比如.net和php开发的网站依赖的软件都安装在一个服务器上要调试很久，而且很麻烦，还会造成一些冲突，此时就要隔离两个不同的网站。常规来讲，我们可以在服务器将上创建不同的虚拟机，将应用服务放置在不同的虚拟机中，但是虚拟机开销比较高。docker可以实现虚拟机隔离应用环境的功能，并且开销小</p></li><li><p>开发用的是centos，运维或者实际部署环境是ubuntu，这时就需要考虑两者的兼容性问题，在整个转移过程中有很多小的细节和很深的坑。这个时候，docker可以直接把开发环境封装打包，在不同的操作系统上运行。</p></li><li><p>在服务器负载方面，如果你单独开一个虚拟机，那么虚拟机会占用空闲的内存，docker部署的话，这些内存就会利用起来</p></li></ol><hr><h3 id="docker-解决了什么问题"><a href="#docker-解决了什么问题" class="headerlink" title="docker 解决了什么问题"></a>docker 解决了什么问题</h3><p>在不同的计算机上有不同的操作系统、不同的库和组件，因此在多台计算机上部署一个APP需要进行大量的配置操作。</p><p>Docker主要解决环境配置问题。 这是一种虚拟化技术，隔离进程，隔离进程独立于主机操作系统和其他隔离进程。 使用Docker，开发者无需更改APP代码，无需学习特定环境的技术，即可将现有的APP部署到其他计算机上。</p><p><img src="https://zhangtq-blog.oss-cn-hangzhou.aliyuncs.com/content_picture/1658682652885.png" alt="1658682652885"></p><hr><h3 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h3><p>Docker是一个开源项目，诞生于2013年初，最初是dotCloud公司内部的一个开源的PAAS服务的业余项目。它是基于Google公司推出的Go语言实现。项目后来加入了Linux基金会，遵从了Apache2.0协议，项目代码在Github上进行维护。 </p><p>Docker是基于linux内核的，最早采用的是lxc虚拟化技术，lxc是linux 原生支持的容器化技术，可以提供轻量级的虚拟化，提供了基于lxc的高级封装，在标准的lxc基础上，docker提供了一系列更加强大的功能，而虚拟化技术是基于kvm模块来实现的。到后拉docker改用自己研发的runc技术运行容器，彻底放弃了lxc</p><p>相较于虚拟机，docker交付速度更快，资源消耗更低，docker 采用了服务CS架构，使用远程api来管理和创建容器，可以轻松的创建一个轻量级的、可移植的、自给自足的容器</p><hr><h3 id="dokcer的三大理念"><a href="#dokcer的三大理念" class="headerlink" title="dokcer的三大理念"></a>dokcer的三大理念</h3><ol><li>build: 构建镜像，镜像就是集装箱，包含文件以及运行环境等</li><li>ship: 运输镜像，在宿主机和仓库之间进行传输</li><li>run：运行镜像，运行的镜像就像是一个容器，容器就是程序运行的地方</li></ol><h3 id="docker-三要素"><a href="#docker-三要素" class="headerlink" title="docker 三要素"></a>docker 三要素</h3><p><strong>镜像</strong></p><p>镜像是用于创建容器的只读模板，通过Docker build命令创建，由镜像层构成，存储FDocker Registry。</p><p>Docker镜像是容器的基础，是有序文件系统层以及容器运行时所需参数组成，无状态的Docker，镜像的内容不可更改（只能通过重新打镜像构建新镜像）</p><p><strong>容器</strong></p><p>容器是镜像的运行实例（一个镜像可以创建多个容器，镜像和容器的关系类比Java中的类和对象的关系），应用运行环境的封装,具有轻量级、移植性高等特点。容器由镜像创建,内部封装所有运行应用所需依赖及可执行文件（包括root用户权限、进程空间和网络空间等）。不是模拟一个完整的操作系统，而是对进程进行隔离。没有自己的内核，也没有对硬件虚拟，因此对虚拟机更轻便。每个容器之间相互隔离。</p><p><strong>仓库</strong></p><p>Registry是存储Docker镜像的地方，可自建私有Registry和使用公用Registry如Docker Hub在Registry中，镜像存储在RepositoryDocker Repository是具有相同名字，不同标签的Docker镜像的集合</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
